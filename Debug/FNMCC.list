
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009168  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009300  08009300  0000a300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  0000b104  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009370  08009370  0000b104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009374  08009374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  08009378  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  20000104  0800947c  0000b104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000138c  0800947c  0000b38c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183d9  00000000  00000000  0000b134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3a  00000000  00000000  0002350d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  00027048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e3  00000000  00000000  00028620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005008  00000000  00000000  00029703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c24c  00000000  00000000  0002e70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e741  00000000  00000000  0004a957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9098  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c80  00000000  00000000  000e90dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000eed5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000104 	.word	0x20000104
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092e8 	.word	0x080092e8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000108 	.word	0x20000108
 80001d4:	080092e8 	.word	0x080092e8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
void USBRxData(uint8_t *buf, uint32_t len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	myFlag.bits.bit1 = 1;
 800050c:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_ADC_ConvCpltCallback+0x44>)
 800050e:	7813      	ldrb	r3, [r2, #0]
 8000510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000514:	7013      	strb	r3, [r2, #0]

	for (int i = 0; i < 8; i++) {
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e00a      	b.n	8000532 <HAL_ADC_ConvCpltCallback+0x2e>
		adcDataTx[i] = adcData[i];
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <HAL_ADC_ConvCpltCallback+0x48>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3301      	adds	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2b07      	cmp	r3, #7
 8000536:	ddf1      	ble.n	800051c <HAL_ADC_ConvCpltCallback+0x18>
	}
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000039c 	.word	0x2000039c
 800054c:	20000278 	.word	0x20000278
 8000550:	20000288 	.word	0x20000288

08000554 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d113      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x3a>
		counter++;
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800056e:	6013      	str	r3, [r2, #0]

		if (counter == TIMETO10MS) {
 8000570:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b28      	cmp	r3, #40	@ 0x28
 8000576:	d105      	bne.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x30>
			counter = 0;
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
			is10ms = 1;
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000580:	2201      	movs	r2, #1
 8000582:	601a      	str	r2, [r3, #0]
		}

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000584:	2208      	movs	r2, #8
 8000586:	4907      	ldr	r1, [pc, #28]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000588:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800058a:	f000 fedf 	bl	800134c <HAL_ADC_Start_DMA>

	}
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010000 	.word	0x40010000
 800059c:	20000274 	.word	0x20000274
 80005a0:	20000264 	.word	0x20000264
 80005a4:	20000278 	.word	0x20000278
 80005a8:	20000120 	.word	0x20000120

080005ac <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	 BufUSBTx[2]='B';
	 BufUSBTx[3]=' ';

	 */

	for (nBytesTx = 0; nBytesTx < len; nBytesTx++) {
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <USBRxData+0x54>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e00f      	b.n	80005de <USBRxData+0x32>
		BufUSBTx[nBytesTx] = buf[nBytesTx];
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <USBRxData+0x54>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <USBRxData+0x54>)
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	7819      	ldrb	r1, [r3, #0]
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <USBRxData+0x58>)
 80005d0:	5499      	strb	r1, [r3, r2]
	for (nBytesTx = 0; nBytesTx < len; nBytesTx++) {
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <USBRxData+0x54>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <USBRxData+0x54>)
 80005dc:	701a      	strb	r2, [r3, #0]
 80005de:	4b08      	ldr	r3, [pc, #32]	@ (8000600 <USBRxData+0x54>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d8e9      	bhi.n	80005be <USBRxData+0x12>
	}

	nBytesTx += 0;
 80005ea:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <USBRxData+0x54>)
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <USBRxData+0x54>)
 80005f0:	701a      	strb	r2, [r3, #0]

}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000398 	.word	0x20000398
 8000604:	20000298 	.word	0x20000298

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fcb4 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f89c 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fa6a 	bl	8000aec <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fa48 	bl	8000aac <MX_DMA_Init>
  MX_ADC1_Init();
 800061c:	f000 f8fe 	bl	800081c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000620:	f000 f9b0 	bl	8000984 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000624:	f000 f9dc 	bl	80009e0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000628:	f008 f8b6 	bl	8008798 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	CDC_Attach_Rx(USBRxData); //Attach myusbrxdata a la función que tenia en el .C
 800062c:	483a      	ldr	r0, [pc, #232]	@ (8000718 <main+0x110>)
 800062e:	f008 fa05 	bl	8008a3c <CDC_Attach_Rx>
	HAL_TIM_Base_Start_IT(&htim1); //timer
 8000632:	483a      	ldr	r0, [pc, #232]	@ (800071c <main+0x114>)
 8000634:	f004 f8ba 	bl	80047ac <HAL_TIM_Base_Start_IT>

	nBytesTx = 0;
 8000638:	4b39      	ldr	r3, [pc, #228]	@ (8000720 <main+0x118>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	tmo100ms = 10;
 800063e:	4b39      	ldr	r3, [pc, #228]	@ (8000724 <main+0x11c>)
 8000640:	220a      	movs	r2, #10
 8000642:	601a      	str	r2, [r3, #0]
	tmo1000ms = 25;
 8000644:	4b38      	ldr	r3, [pc, #224]	@ (8000728 <main+0x120>)
 8000646:	2219      	movs	r2, #25
 8000648:	601a      	str	r2, [r3, #0]
	is10ms = 0;
 800064a:	4b38      	ldr	r3, [pc, #224]	@ (800072c <main+0x124>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
	is1000ms = 0;
 8000650:	4b37      	ldr	r3, [pc, #220]	@ (8000730 <main+0x128>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]

	myFlag.bytes = 0;
 8000656:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <main+0x12c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	2102      	movs	r1, #2
 8000660:	4835      	ldr	r0, [pc, #212]	@ (8000738 <main+0x130>)
 8000662:	f002 f845 	bl	80026f0 <HAL_GPIO_WritePin>
	//SSD1306_Init();

	counter = 0;
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <main+0x134>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000672:	4833      	ldr	r0, [pc, #204]	@ (8000740 <main+0x138>)
 8000674:	f002 f83c 	bl	80026f0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (myFlag.bits.bit1 && is1000ms) {
 8000678:	4b2e      	ldr	r3, [pc, #184]	@ (8000734 <main+0x12c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	d00f      	beq.n	80006a6 <main+0x9e>
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <main+0x128>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00b      	beq.n	80006a6 <main+0x9e>
			is1000ms = 0;
 800068e:	4b28      	ldr	r3, [pc, #160]	@ (8000730 <main+0x128>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
			myFlag.bits.bit1 = 0;
 8000694:	4a27      	ldr	r2, [pc, #156]	@ (8000734 <main+0x12c>)
 8000696:	7813      	ldrb	r3, [r2, #0]
 8000698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800069c:	7013      	strb	r3, [r2, #0]
			CDC_Transmit_FS((uint8_t*) adcDataTx, 16);
 800069e:	2110      	movs	r1, #16
 80006a0:	4828      	ldr	r0, [pc, #160]	@ (8000744 <main+0x13c>)
 80006a2:	f008 f993 	bl	80089cc <CDC_Transmit_FS>
		}

		if (is10ms) {
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <main+0x124>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d022      	beq.n	80006f4 <main+0xec>

			is10ms = 0;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <main+0x124>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]

			tmo100ms--;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <main+0x11c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3b01      	subs	r3, #1
 80006ba:	4a1a      	ldr	r2, [pc, #104]	@ (8000724 <main+0x11c>)
 80006bc:	6013      	str	r3, [r2, #0]
			if (tmo100ms == 0) {
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <main+0x11c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d116      	bne.n	80006f4 <main+0xec>
				tmo100ms = 10;
 80006c6:	4b17      	ldr	r3, [pc, #92]	@ (8000724 <main+0x11c>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	601a      	str	r2, [r3, #0]
				tmo1000ms--;
 80006cc:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <main+0x120>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <main+0x120>)
 80006d4:	6013      	str	r3, [r2, #0]
				if (tmo1000ms == 0) {
 80006d6:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <main+0x120>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d105      	bne.n	80006ea <main+0xe2>
					tmo1000ms = 25;
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <main+0x120>)
 80006e0:	2219      	movs	r2, #25
 80006e2:	601a      	str	r2, [r3, #0]
					is1000ms = 1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <main+0x128>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80006ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ee:	4814      	ldr	r0, [pc, #80]	@ (8000740 <main+0x138>)
 80006f0:	f002 f817 	bl	8002722 <HAL_GPIO_TogglePin>
			}
		}

		if ((nBytesTx != 0)) { //Condicio para que envio de datos se realiza de manera continua
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <main+0x118>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0bd      	beq.n	8000678 <main+0x70>
			if ((CDC_Transmit_FS(BufUSBTx, nBytesTx) == USBD_OK))
 80006fc:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <main+0x118>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	4811      	ldr	r0, [pc, #68]	@ (8000748 <main+0x140>)
 8000704:	f008 f962 	bl	80089cc <CDC_Transmit_FS>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1b4      	bne.n	8000678 <main+0x70>
				nBytesTx = 0;
 800070e:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <main+0x118>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
		if (myFlag.bits.bit1 && is1000ms) {
 8000714:	e7b0      	b.n	8000678 <main+0x70>
 8000716:	bf00      	nop
 8000718:	080005ad 	.word	0x080005ad
 800071c:	2000021c 	.word	0x2000021c
 8000720:	20000398 	.word	0x20000398
 8000724:	2000026c 	.word	0x2000026c
 8000728:	20000270 	.word	0x20000270
 800072c:	20000264 	.word	0x20000264
 8000730:	20000268 	.word	0x20000268
 8000734:	2000039c 	.word	0x2000039c
 8000738:	40020400 	.word	0x40020400
 800073c:	20000274 	.word	0x20000274
 8000740:	40020800 	.word	0x40020800
 8000744:	20000288 	.word	0x20000288
 8000748:	20000298 	.word	0x20000298

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	@ 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f008 fd98 	bl	8009290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <SystemClock_Config+0xc8>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a26      	ldr	r2, [pc, #152]	@ (8000814 <SystemClock_Config+0xc8>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <SystemClock_Config+0xc8>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <SystemClock_Config+0xcc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <SystemClock_Config+0xcc>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <SystemClock_Config+0xcc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007bc:	2319      	movs	r3, #25
 80007be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007c0:	23c0      	movs	r3, #192	@ 0xc0
 80007c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c8:	2304      	movs	r3, #4
 80007ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fb57 	bl	8003e84 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f9e6 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2103      	movs	r1, #3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fdb9 	bl	8004374 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000808:	f000 f9d0 	bl	8000bac <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3750      	adds	r7, #80	@ 0x50
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082e:	4b52      	ldr	r3, [pc, #328]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000830:	4a52      	ldr	r2, [pc, #328]	@ (800097c <MX_ADC1_Init+0x160>)
 8000832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000834:	4b50      	ldr	r3, [pc, #320]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000836:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800083a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800083c:	4b4e      	ldr	r3, [pc, #312]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000842:	4b4d      	ldr	r3, [pc, #308]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000844:	2201      	movs	r2, #1
 8000846:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000848:	4b4b      	ldr	r3, [pc, #300]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800084a:	2200      	movs	r2, #0
 800084c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084e:	4b4a      	ldr	r3, [pc, #296]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000850:	2200      	movs	r2, #0
 8000852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000856:	4b48      	ldr	r3, [pc, #288]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085c:	4b46      	ldr	r3, [pc, #280]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800085e:	4a48      	ldr	r2, [pc, #288]	@ (8000980 <MX_ADC1_Init+0x164>)
 8000860:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000862:	4b45      	ldr	r3, [pc, #276]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000868:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800086a:	2208      	movs	r2, #8
 800086c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800086e:	4b42      	ldr	r3, [pc, #264]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000878:	2201      	movs	r2, #1
 800087a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	483e      	ldr	r0, [pc, #248]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800087e:	f000 fc11 	bl	80010a4 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 f990 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000890:	2301      	movs	r3, #1
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4836      	ldr	r0, [pc, #216]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800089e:	f000 fe67 	bl	8001570 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a8:	f000 f980 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	482f      	ldr	r0, [pc, #188]	@ (8000978 <MX_ADC1_Init+0x15c>)
 80008ba:	f000 fe59 	bl	8001570 <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008c4:	f000 f972 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008cc:	2303      	movs	r3, #3
 80008ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4828      	ldr	r0, [pc, #160]	@ (8000978 <MX_ADC1_Init+0x15c>)
 80008d6:	f000 fe4b 	bl	8001570 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80008e0:	f000 f964 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008e4:	2303      	movs	r3, #3
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4821      	ldr	r0, [pc, #132]	@ (8000978 <MX_ADC1_Init+0x15c>)
 80008f2:	f000 fe3d 	bl	8001570 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80008fc:	f000 f956 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000900:	2304      	movs	r3, #4
 8000902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000904:	2305      	movs	r3, #5
 8000906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4619      	mov	r1, r3
 800090c:	481a      	ldr	r0, [pc, #104]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800090e:	f000 fe2f 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000918:	f000 f948 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800091c:	2305      	movs	r3, #5
 800091e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000920:	2306      	movs	r3, #6
 8000922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000924:	463b      	mov	r3, r7
 8000926:	4619      	mov	r1, r3
 8000928:	4813      	ldr	r0, [pc, #76]	@ (8000978 <MX_ADC1_Init+0x15c>)
 800092a:	f000 fe21 	bl	8001570 <HAL_ADC_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000934:	f000 f93a 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000938:	2306      	movs	r3, #6
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800093c:	2307      	movs	r3, #7
 800093e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000946:	f000 fe13 	bl	8001570 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000950:	f000 f92c 	bl	8000bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000954:	2307      	movs	r3, #7
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000958:	2308      	movs	r3, #8
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_ADC1_Init+0x15c>)
 8000962:	f000 fe05 	bl	8001570 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800096c:	f000 f91e 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000120 	.word	0x20000120
 800097c:	40012000 	.word	0x40012000
 8000980:	0f000001 	.word	0x0f000001

08000984 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2C1_Init+0x50>)
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <MX_I2C1_Init+0x54>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_I2C1_Init+0x50>)
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_I2C1_Init+0x58>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_I2C1_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_I2C1_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_I2C1_Init+0x50>)
 80009c2:	f001 fec9 	bl	8002758 <HAL_I2C_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009cc:	f000 f8ee 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200001c8 	.word	0x200001c8
 80009d8:	40005400 	.word	0x40005400
 80009dc:	00061a80 	.word	0x00061a80

080009e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a0e:	4a26      	ldr	r2, [pc, #152]	@ (8000aa8 <MX_TIM1_Init+0xc8>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000a12:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a14:	225f      	movs	r2, #95	@ 0x5f
 8000a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a20:	22f9      	movs	r2, #249	@ 0xf9
 8000a22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a36:	481b      	ldr	r0, [pc, #108]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a38:	f003 fe68 	bl	800470c <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000a42:	f000 f8b3 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4619      	mov	r1, r3
 8000a52:	4814      	ldr	r0, [pc, #80]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a54:	f003 fffc 	bl	8004a50 <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a5e:	f000 f8a5 	bl	8000bac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a72:	f004 f8b4 	bl	8004bde <HAL_TIM_SlaveConfigSynchro>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000a7c:	f000 f896 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_TIM1_Init+0xc4>)
 8000a8e:	f004 fac3 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a98:	f000 f888 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	@ 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000021c 	.word	0x2000021c
 8000aa8:	40010000 	.word	0x40010000

08000aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_DMA_Init+0x3c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <MX_DMA_Init+0x3c>)
 8000abc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_DMA_Init+0x3c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2038      	movs	r0, #56	@ 0x38
 8000ad4:	f001 f8e1 	bl	8001c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ad8:	2038      	movs	r0, #56	@ 0x38
 8000ada:	f001 f8fa 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a26      	ldr	r2, [pc, #152]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0xb8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b78:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b7a:	f001 fdb9 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b98:	f001 fc26 	bl	80023e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020800 	.word	0x40020800

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a32      	ldr	r2, [pc, #200]	@ (8000cf0 <HAL_ADC_MspInit+0xe8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d15e      	bne.n	8000ce8 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b31      	ldr	r3, [pc, #196]	@ (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	4a30      	ldr	r2, [pc, #192]	@ (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a29      	ldr	r2, [pc, #164]	@ (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <HAL_ADC_MspInit+0xec>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c62:	23ff      	movs	r3, #255	@ 0xff
 8000c64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4820      	ldr	r0, [pc, #128]	@ (8000cf8 <HAL_ADC_MspInit+0xf0>)
 8000c76:	f001 fbb7 	bl	80023e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000c7c:	4a20      	ldr	r2, [pc, #128]	@ (8000d00 <HAL_ADC_MspInit+0xf8>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000c94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000c9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000ca4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbc:	480f      	ldr	r0, [pc, #60]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000cbe:	f001 f823 	bl	8001d08 <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000cc8:	f7ff ff70 	bl	8000bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a0b      	ldr	r2, [pc, #44]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000cd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <HAL_ADC_MspInit+0xf4>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2012      	movs	r0, #18
 8000cde:	f000 ffdc 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ce2:	2012      	movs	r0, #18
 8000ce4:	f000 fff5 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	@ 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40012000 	.word	0x40012000
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	20000168 	.word	0x20000168
 8000d00:	40026410 	.word	0x40026410

08000d04 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	@ (8000d88 <HAL_I2C_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d42:	23c0      	movs	r3, #192	@ 0xc0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d46:	2312      	movs	r3, #18
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d52:	2304      	movs	r3, #4
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	@ (8000d90 <HAL_I2C_MspInit+0x8c>)
 8000d5e:	f001 fb43 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a08      	ldr	r2, [pc, #32]	@ (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_I2C_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020400 	.word	0x40020400

08000d94 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e0c <HAL_TIM_Base_MspInit+0x78>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12d      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a18      	ldr	r2, [pc, #96]	@ (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_TIM_Base_MspInit+0x7c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2018      	movs	r0, #24
 8000dc8:	f000 ff67 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000dcc:	2018      	movs	r0, #24
 8000dce:	f000 ff80 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2019      	movs	r0, #25
 8000dd8:	f000 ff5f 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ddc:	2019      	movs	r0, #25
 8000dde:	f000 ff78 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	201a      	movs	r0, #26
 8000de8:	f000 ff57 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000dec:	201a      	movs	r0, #26
 8000dee:	f000 ff70 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	201b      	movs	r0, #27
 8000df8:	f000 ff4f 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000dfc:	201b      	movs	r0, #27
 8000dfe:	f000 ff68 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40023800 	.word	0x40023800

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f8d7 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <ADC_IRQHandler+0x10>)
 8000e7a:	f000 f956 	bl	800112a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000120 	.word	0x20000120

08000e88 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e8e:	f003 fcef 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000021c 	.word	0x2000021c

08000e9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ea2:	f003 fce5 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000021c 	.word	0x2000021c

08000eb0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000eb6:	f003 fcdb 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000021c 	.word	0x2000021c

08000ec4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <TIM1_CC_IRQHandler+0x10>)
 8000eca:	f003 fcd1 	bl	8004870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000021c 	.word	0x2000021c

08000ed8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <DMA2_Stream0_IRQHandler+0x10>)
 8000ede:	f001 f819 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000168 	.word	0x20000168

08000eec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <OTG_FS_IRQHandler+0x10>)
 8000ef2:	f001 feb9 	bl	8002c68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000c88 	.word	0x20000c88

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f28:	f7ff ffea 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f008 f9a5 	bl	80092a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fb57 	bl	8000608 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000f68:	08009378 	.word	0x08009378
  ldr r2, =_sbss
 8000f6c:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000f70:	2000138c 	.word	0x2000138c

08000f74 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <DMA1_Stream0_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	@ (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 fe6f 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe04 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fe87 	bl	8001cee <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 fe4f 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	@ (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	200003a0 	.word	0x200003a0

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200003a0 	.word	0x200003a0

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e033      	b.n	8001122 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d109      	bne.n	80010d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fda0 	bl	8000c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d118      	bne.n	8001114 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010ea:	f023 0302 	bic.w	r3, r3, #2
 80010ee:	f043 0202 	orr.w	r2, r3, #2
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fb6c 	bl	80017d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f023 0303 	bic.w	r3, r3, #3
 800110a:	f043 0201 	orr.w	r2, r3, #1
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40
 8001112:	e001      	b.n	8001118 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0320 	and.w	r3, r3, #32
 8001158:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d049      	beq.n	80011f4 <HAL_ADC_IRQHandler+0xca>
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d046      	beq.n	80011f4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d105      	bne.n	800117e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d12b      	bne.n	80011e4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001190:	2b00      	cmp	r3, #0
 8001192:	d127      	bne.n	80011e4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d119      	bne.n	80011e4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0220 	bic.w	r2, r2, #32
 80011be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff f98d 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f06f 0212 	mvn.w	r2, #18
 80011f2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001202:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d057      	beq.n	80012ba <HAL_ADC_IRQHandler+0x190>
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d054      	beq.n	80012ba <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	f003 0310 	and.w	r3, r3, #16
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d139      	bne.n	80012aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800124e:	2b00      	cmp	r3, #0
 8001250:	d12b      	bne.n	80012aa <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800125c:	2b00      	cmp	r3, #0
 800125e:	d124      	bne.n	80012aa <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11d      	bne.n	80012aa <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001284:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fc10 	bl	8001ad0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f06f 020c 	mvn.w	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d017      	beq.n	8001300 <HAL_ADC_IRQHandler+0x1d6>
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d014      	beq.n	8001300 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10d      	bne.n	8001300 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f929 	bl	8001548 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f06f 0201 	mvn.w	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800130e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d015      	beq.n	8001342 <HAL_ADC_IRQHandler+0x218>
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d012      	beq.n	8001342 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	f043 0202 	orr.w	r2, r3, #2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f06f 0220 	mvn.w	r2, #32
 8001330:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f912 	bl	800155c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f06f 0220 	mvn.w	r2, #32
 8001340:	601a      	str	r2, [r3, #0]
  }
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADC_Start_DMA+0x22>
 800136a:	2302      	movs	r3, #2
 800136c:	e0d0      	b.n	8001510 <HAL_ADC_Start_DMA+0x1c4>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d018      	beq.n	80013b6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001394:	4b60      	ldr	r3, [pc, #384]	@ (8001518 <HAL_ADC_Start_DMA+0x1cc>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a60      	ldr	r2, [pc, #384]	@ (800151c <HAL_ADC_Start_DMA+0x1d0>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	0c9a      	lsrs	r2, r3, #18
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013c4:	d107      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013d4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	f040 8088 	bne.w	80014f6 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001410:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001424:	d106      	bne.n	8001434 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f023 0206 	bic.w	r2, r3, #6
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	645a      	str	r2, [r3, #68]	@ 0x44
 8001432:	e002      	b.n	800143a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <HAL_ADC_Start_DMA+0x1d4>)
 8001444:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144a:	4a36      	ldr	r2, [pc, #216]	@ (8001524 <HAL_ADC_Start_DMA+0x1d8>)
 800144c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001452:	4a35      	ldr	r2, [pc, #212]	@ (8001528 <HAL_ADC_Start_DMA+0x1dc>)
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800145a:	4a34      	ldr	r2, [pc, #208]	@ (800152c <HAL_ADC_Start_DMA+0x1e0>)
 800145c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001466:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001476:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001486:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	334c      	adds	r3, #76	@ 0x4c
 8001492:	4619      	mov	r1, r3
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f000 fce4 	bl	8001e64 <HAL_DMA_Start_IT>
 800149c:	4603      	mov	r3, r0
 800149e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10f      	bne.n	80014cc <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d129      	bne.n	800150e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	e020      	b.n	800150e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a17      	ldr	r2, [pc, #92]	@ (8001530 <HAL_ADC_Start_DMA+0x1e4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d11b      	bne.n	800150e <HAL_ADC_Start_DMA+0x1c2>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d114      	bne.n	800150e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	e00b      	b.n	800150e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f043 0210 	orr.w	r2, r3, #16
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800150e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83
 8001520:	40012300 	.word	0x40012300
 8001524:	080019cd 	.word	0x080019cd
 8001528:	08001a87 	.word	0x08001a87
 800152c:	08001aa3 	.word	0x08001aa3
 8001530:	40012000 	.word	0x40012000

08001534 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1c>
 8001588:	2302      	movs	r3, #2
 800158a:	e113      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x244>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d925      	bls.n	80015e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68d9      	ldr	r1, [r3, #12]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	3b1e      	subs	r3, #30
 80015b2:	2207      	movs	r2, #7
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	4603      	mov	r3, r0
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4403      	add	r3, r0
 80015da:	3b1e      	subs	r3, #30
 80015dc:	409a      	lsls	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	e022      	b.n	800162e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6919      	ldr	r1, [r3, #16]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	2207      	movs	r2, #7
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	400a      	ands	r2, r1
 800160a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6919      	ldr	r1, [r3, #16]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	4603      	mov	r3, r0
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4403      	add	r3, r0
 8001624:	409a      	lsls	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b06      	cmp	r3, #6
 8001634:	d824      	bhi.n	8001680 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	3b05      	subs	r3, #5
 8001648:	221f      	movs	r2, #31
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	400a      	ands	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	3b05      	subs	r3, #5
 8001672:	fa00 f203 	lsl.w	r2, r0, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	635a      	str	r2, [r3, #52]	@ 0x34
 800167e:	e04c      	b.n	800171a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b0c      	cmp	r3, #12
 8001686:	d824      	bhi.n	80016d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b23      	subs	r3, #35	@ 0x23
 800169a:	221f      	movs	r2, #31
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43da      	mvns	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	400a      	ands	r2, r1
 80016a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b23      	subs	r3, #35	@ 0x23
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80016d0:	e023      	b.n	800171a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	3b41      	subs	r3, #65	@ 0x41
 80016e4:	221f      	movs	r2, #31
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	400a      	ands	r2, r1
 80016f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b41      	subs	r3, #65	@ 0x41
 800170e:	fa00 f203 	lsl.w	r2, r0, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800171a:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <HAL_ADC_ConfigChannel+0x250>)
 800171c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a28      	ldr	r2, [pc, #160]	@ (80017c4 <HAL_ADC_ConfigChannel+0x254>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d10f      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1d8>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b12      	cmp	r3, #18
 800172e:	d10b      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <HAL_ADC_ConfigChannel+0x254>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d12b      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x23a>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <HAL_ADC_ConfigChannel+0x258>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d003      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x1f4>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b11      	cmp	r3, #17
 8001762:	d122      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <HAL_ADC_ConfigChannel+0x258>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d111      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_ADC_ConfigChannel+0x25c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <HAL_ADC_ConfigChannel+0x260>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9a      	lsrs	r2, r3, #18
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800179c:	e002      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f9      	bne.n	800179e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40012300 	.word	0x40012300
 80017c4:	40012000 	.word	0x40012000
 80017c8:	10000012 	.word	0x10000012
 80017cc:	20000000 	.word	0x20000000
 80017d0:	431bde83 	.word	0x431bde83

080017d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017dc:	4b79      	ldr	r3, [pc, #484]	@ (80019c4 <ADC_Init+0x1f0>)
 80017de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	021a      	lsls	r2, r3, #8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800182c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800184e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6899      	ldr	r1, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	4a58      	ldr	r2, [pc, #352]	@ (80019c8 <ADC_Init+0x1f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d022      	beq.n	80018b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800187a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6899      	ldr	r1, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800189c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e00f      	b.n	80018d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0202 	bic.w	r2, r2, #2
 80018e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6899      	ldr	r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	005a      	lsls	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800190e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800191e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6859      	ldr	r1, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	3b01      	subs	r3, #1
 800192c:	035a      	lsls	r2, r3, #13
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	e007      	b.n	8001948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001946:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	3b01      	subs	r3, #1
 8001964:	051a      	lsls	r2, r3, #20
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800197c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6899      	ldr	r1, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800198a:	025a      	lsls	r2, r3, #9
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	029a      	lsls	r2, r3, #10
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40012300 	.word	0x40012300
 80019c8:	0f000001 	.word	0x0f000001

080019cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d13c      	bne.n	8001a60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d12b      	bne.n	8001a58 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d127      	bne.n	8001a58 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d119      	bne.n	8001a58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0220 	bic.w	r2, r2, #32
 8001a32:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7fe fd53 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a5e:	e00e      	b.n	8001a7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff fd75 	bl	800155c <HAL_ADC_ErrorCallback>
}
 8001a72:	e004      	b.n	8001a7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a92:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff fd4d 	bl	8001534 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2240      	movs	r2, #64	@ 0x40
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f043 0204 	orr.w	r2, r3, #4
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f7ff fd4a 	bl	800155c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff f996 	bl	8001044 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e099      	b.n	8001e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d44:	e00f      	b.n	8001d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d46:	f7ff f97d 	bl	8001044 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d908      	bls.n	8001d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e078      	b.n	8001e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e8      	bne.n	8001d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_DMA_Init+0x158>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d117      	bne.n	8001e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fa6f 	bl	80022f0 <DMA_CheckFifoParam>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	@ 0x40
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e26:	2301      	movs	r3, #1
 8001e28:	e016      	b.n	8001e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fa26 	bl	8002284 <DMA_CalcBaseAndBitshift>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	223f      	movs	r2, #63	@ 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	f010803f 	.word	0xf010803f

08001e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_DMA_Start_IT+0x26>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e040      	b.n	8001f0c <HAL_DMA_Start_IT+0xa8>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d12f      	bne.n	8001efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f9b8 	bl	8002228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	223f      	movs	r2, #63	@ 0x3f
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0216 	orr.w	r2, r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0208 	orr.w	r2, r2, #8
 8001eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e005      	b.n	8001f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
 8001f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f20:	4b8e      	ldr	r3, [pc, #568]	@ (800215c <HAL_DMA_IRQHandler+0x248>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a8e      	ldr	r2, [pc, #568]	@ (8002160 <HAL_DMA_IRQHandler+0x24c>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0a9b      	lsrs	r3, r3, #10
 8001f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3e:	2208      	movs	r2, #8
 8001f40:	409a      	lsls	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d01a      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f84:	2201      	movs	r2, #1
 8001f86:	409a      	lsls	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fba:	2204      	movs	r2, #4
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2204      	movs	r2, #4
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 0204 	orr.w	r2, r3, #4
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d043      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03c      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200e:	2210      	movs	r2, #16
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d108      	bne.n	8002044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d024      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
 8002042:	e01f      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
 8002054:	e016      	b.n	8002084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0208 	bic.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002088:	2220      	movs	r2, #32
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 808f 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8087 	beq.w	80021b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020aa:	2220      	movs	r2, #32
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d136      	bne.n	800212c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0216 	bic.w	r2, r2, #22
 80020cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d103      	bne.n	80020ee <HAL_DMA_IRQHandler+0x1da>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002102:	223f      	movs	r2, #63	@ 0x3f
 8002104:	409a      	lsls	r2, r3
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
        }
        return;
 800212a:	e079      	b.n	8002220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01d      	beq.n	8002176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	2b00      	cmp	r3, #0
 800214e:	d031      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
 8002158:	e02c      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000
 8002160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	4798      	blx	r3
 8002174:	e01e      	b.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10f      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0210 	bic.w	r2, r2, #16
 8002192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d032      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d022      	beq.n	800220e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2205      	movs	r2, #5
 80021cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d307      	bcc.n	80021fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f2      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x2cc>
 80021fa:	e000      	b.n	80021fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4798      	blx	r3
 800221e:	e000      	b.n	8002222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002220:	bf00      	nop
    }
  }
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d108      	bne.n	8002268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002266:	e007      	b.n	8002278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	3b10      	subs	r3, #16
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <DMA_CalcBaseAndBitshift+0x64>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800229e:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <DMA_CalcBaseAndBitshift+0x68>)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d909      	bls.n	80022c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	1d1a      	adds	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c4:	e007      	b.n	80022d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	aaaaaaab 	.word	0xaaaaaaab
 80022ec:	08009360 	.word	0x08009360

080022f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11f      	bne.n	800234a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d856      	bhi.n	80023be <DMA_CheckFifoParam+0xce>
 8002310:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <DMA_CheckFifoParam+0x28>)
 8002312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002316:	bf00      	nop
 8002318:	08002329 	.word	0x08002329
 800231c:	0800233b 	.word	0x0800233b
 8002320:	08002329 	.word	0x08002329
 8002324:	080023bf 	.word	0x080023bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d046      	beq.n	80023c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002338:	e043      	b.n	80023c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002342:	d140      	bne.n	80023c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002348:	e03d      	b.n	80023c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002352:	d121      	bne.n	8002398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d837      	bhi.n	80023ca <DMA_CheckFifoParam+0xda>
 800235a:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <DMA_CheckFifoParam+0x70>)
 800235c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002360:	08002371 	.word	0x08002371
 8002364:	08002377 	.word	0x08002377
 8002368:	08002371 	.word	0x08002371
 800236c:	08002389 	.word	0x08002389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      break;
 8002374:	e030      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d025      	beq.n	80023ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002386:	e022      	b.n	80023ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002390:	d11f      	bne.n	80023d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002396:	e01c      	b.n	80023d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d903      	bls.n	80023a6 <DMA_CheckFifoParam+0xb6>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d003      	beq.n	80023ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023a4:	e018      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      break;
 80023aa:	e015      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e00b      	b.n	80023d6 <DMA_CheckFifoParam+0xe6>
      break;
 80023be:	bf00      	nop
 80023c0:	e00a      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c2:	bf00      	nop
 80023c4:	e008      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e006      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e004      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e002      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
    }
  } 
  
  return status; 
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e159      	b.n	80026b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8148 	bne.w	80026b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a2 	beq.w	80026b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b57      	ldr	r3, [pc, #348]	@ (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a56      	ldr	r2, [pc, #344]	@ (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b54      	ldr	r3, [pc, #336]	@ (80026d0 <HAL_GPIO_Init+0x2e8>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_GPIO_Init+0x2ec>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a49      	ldr	r2, [pc, #292]	@ (80026d8 <HAL_GPIO_Init+0x2f0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x202>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a48      	ldr	r2, [pc, #288]	@ (80026dc <HAL_GPIO_Init+0x2f4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x1fe>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a47      	ldr	r2, [pc, #284]	@ (80026e0 <HAL_GPIO_Init+0x2f8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x1fa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a46      	ldr	r2, [pc, #280]	@ (80026e4 <HAL_GPIO_Init+0x2fc>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x1f6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a45      	ldr	r2, [pc, #276]	@ (80026e8 <HAL_GPIO_Init+0x300>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x1f2>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025da:	2307      	movs	r3, #7
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4935      	ldr	r1, [pc, #212]	@ (80026d4 <HAL_GPIO_Init+0x2ec>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800260a:	4b38      	ldr	r3, [pc, #224]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262e:	4a2f      	ldr	r2, [pc, #188]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002634:	4b2d      	ldr	r3, [pc, #180]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002658:	4a24      	ldr	r2, [pc, #144]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265e:	4b23      	ldr	r3, [pc, #140]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002682:	4a1a      	ldr	r2, [pc, #104]	@ (80026ec <HAL_GPIO_Init+0x304>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002688:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_GPIO_Init+0x304>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ac:	4a0f      	ldr	r2, [pc, #60]	@ (80026ec <HAL_GPIO_Init+0x304>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f aea2 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	@ 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40020000 	.word	0x40020000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40020c00 	.word	0x40020c00
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002734:	887a      	ldrh	r2, [r7, #2]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4013      	ands	r3, r2
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43d9      	mvns	r1, r3
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	400b      	ands	r3, r1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e12b      	b.n	80029c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fac0 	bl	8000d04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	@ 0x24
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027bc:	f001 ff92 	bl	80046e4 <HAL_RCC_GetPCLK1Freq>
 80027c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4a81      	ldr	r2, [pc, #516]	@ (80029cc <HAL_I2C_Init+0x274>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d807      	bhi.n	80027dc <HAL_I2C_Init+0x84>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a80      	ldr	r2, [pc, #512]	@ (80029d0 <HAL_I2C_Init+0x278>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	e006      	b.n	80027ea <HAL_I2C_Init+0x92>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a7d      	ldr	r2, [pc, #500]	@ (80029d4 <HAL_I2C_Init+0x27c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0e7      	b.n	80029c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a78      	ldr	r2, [pc, #480]	@ (80029d8 <HAL_I2C_Init+0x280>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9b      	lsrs	r3, r3, #18
 80027fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a6a      	ldr	r2, [pc, #424]	@ (80029cc <HAL_I2C_Init+0x274>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d802      	bhi.n	800282c <HAL_I2C_Init+0xd4>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	3301      	adds	r3, #1
 800282a:	e009      	b.n	8002840 <HAL_I2C_Init+0xe8>
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a69      	ldr	r2, [pc, #420]	@ (80029dc <HAL_I2C_Init+0x284>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	3301      	adds	r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	430b      	orrs	r3, r1
 8002846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	495c      	ldr	r1, [pc, #368]	@ (80029cc <HAL_I2C_Init+0x274>)
 800285c:	428b      	cmp	r3, r1
 800285e:	d819      	bhi.n	8002894 <HAL_I2C_Init+0x13c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e59      	subs	r1, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fbb1 f3f3 	udiv	r3, r1, r3
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002874:	400b      	ands	r3, r1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_I2C_Init+0x138>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e59      	subs	r1, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fbb1 f3f3 	udiv	r3, r1, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288e:	e051      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002890:	2304      	movs	r3, #4
 8002892:	e04f      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <HAL_I2C_Init+0x168>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	440b      	add	r3, r1
 80028aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	e012      	b.n	80028e6 <HAL_I2C_Init+0x18e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1e58      	subs	r0, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	0099      	lsls	r1, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Init+0x196>
 80028ea:	2301      	movs	r3, #1
 80028ec:	e022      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10e      	bne.n	8002914 <HAL_I2C_Init+0x1bc>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1e58      	subs	r0, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	440b      	add	r3, r1
 8002904:	fbb0 f3f3 	udiv	r3, r0, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002912:	e00f      	b.n	8002934 <HAL_I2C_Init+0x1dc>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e58      	subs	r0, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	0099      	lsls	r1, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	fbb0 f3f3 	udiv	r3, r0, r3
 800292a:	3301      	adds	r3, #1
 800292c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	6809      	ldr	r1, [r1, #0]
 8002938:	4313      	orrs	r3, r2
 800293a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6911      	ldr	r1, [r2, #16]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	4311      	orrs	r1, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	430b      	orrs	r3, r1
 8002976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0201 	orr.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	000186a0 	.word	0x000186a0
 80029d0:	001e847f 	.word	0x001e847f
 80029d4:	003d08ff 	.word	0x003d08ff
 80029d8:	431bde83 	.word	0x431bde83
 80029dc:	10624dd3 	.word	0x10624dd3

080029e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e101      	b.n	8002bf6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f006 f935 	bl	8008c7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2203      	movs	r2, #3
 8002a16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a20:	d102      	bne.n	8002a28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 fc8c 	bl	800534a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7c1a      	ldrb	r2, [r3, #16]
 8002a3a:	f88d 2000 	strb.w	r2, [sp]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a42:	f002 fb6b 	bl	800511c <USB_CoreInit>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0ce      	b.n	8002bf6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f002 fc84 	bl	800536c <USB_SetCurrentMode>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0bf      	b.n	8002bf6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
 8002a7a:	e04a      	b.n	8002b12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3315      	adds	r3, #21
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	7bfa      	ldrb	r2, [r7, #15]
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	b298      	uxth	r0, r3
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	332e      	adds	r3, #46	@ 0x2e
 8002ab8:	4602      	mov	r2, r0
 8002aba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3318      	adds	r3, #24
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	331c      	adds	r3, #28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ae4:	7bfa      	ldrb	r2, [r7, #15]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3320      	adds	r3, #32
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3324      	adds	r3, #36	@ 0x24
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	791b      	ldrb	r3, [r3, #4]
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d3af      	bcc.n	8002a7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e044      	b.n	8002bac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b34:	2200      	movs	r2, #0
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	791b      	ldrb	r3, [r3, #4]
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3b5      	bcc.n	8002b22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7c1a      	ldrb	r2, [r3, #16]
 8002bbe:	f88d 2000 	strb.w	r2, [sp]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc6:	f002 fc1d 	bl	8005404 <USB_DevInit>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e00c      	b.n	8002bf6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fc67 	bl	80064c2 <USB_DevDisconnect>

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_PCD_Start+0x1c>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e022      	b.n	8002c60 <HAL_PCD_Start+0x62>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fb6e 	bl	8005328 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 fc15 	bl	8006480 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08d      	sub	sp, #52	@ 0x34
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 fcd3 	bl	800662a <USB_GetMode>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 848c 	bne.w	80035a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 fc37 	bl	8006504 <USB_ReadInterrupts>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 8482 	beq.w	80035a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	0a1b      	lsrs	r3, r3, #8
 8002ca8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fc24 	bl	8006504 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f002 0202 	and.w	r2, r2, #2
 8002cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 fc12 	bl	8006504 <USB_ReadInterrupts>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b10      	cmp	r3, #16
 8002ce8:	d161      	bne.n	8002dae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0210 	bic.w	r2, r2, #16
 8002cf8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f003 020f 	and.w	r2, r3, #15
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	3304      	adds	r3, #4
 8002d18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002d20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d24:	d124      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d035      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	461a      	mov	r2, r3
 8002d44:	6a38      	ldr	r0, [r7, #32]
 8002d46:	f003 fa49 	bl	80061dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d56:	441a      	add	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d68:	441a      	add	r2, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	e016      	b.n	8002d9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002d76:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002d7a:	d110      	bne.n	8002d9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d82:	2208      	movs	r2, #8
 8002d84:	4619      	mov	r1, r3
 8002d86:	6a38      	ldr	r0, [r7, #32]
 8002d88:	f003 fa28 	bl	80061dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d98:	441a      	add	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699a      	ldr	r2, [r3, #24]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0210 	orr.w	r2, r2, #16
 8002dac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fba6 	bl	8006504 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dbe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002dc2:	f040 80a7 	bne.w	8002f14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fbab 	bl	800652a <USB_ReadDevAllOutEpInterrupt>
 8002dd4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002dd6:	e099      	b.n	8002f0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 808e 	beq.w	8002f00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fbcf 	bl	8006592 <USB_ReadDevOutEPInterrupt>
 8002df4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00c      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2301      	movs	r3, #1
 8002e10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fea3 	bl	8003b60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e30:	461a      	mov	r2, r3
 8002e32:	2308      	movs	r3, #8
 8002e34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 ff79 	bl	8003d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	2310      	movs	r3, #16
 8002e58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d030      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e6c:	2b80      	cmp	r3, #128	@ 0x80
 8002e6e:	d109      	bne.n	8002e84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	78db      	ldrb	r3, [r3, #3]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d108      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f005 ffe0 	bl	8008e74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002edc:	461a      	mov	r2, r3
 8002ede:	2320      	movs	r3, #32
 8002ee0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef8:	461a      	mov	r2, r3
 8002efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002efe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	3301      	adds	r3, #1
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	085b      	lsrs	r3, r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f47f af62 	bne.w	8002dd8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 faf3 	bl	8006504 <USB_ReadInterrupts>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f28:	f040 80db 	bne.w	80030e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fb14 	bl	800655e <USB_ReadDevAllInEpInterrupt>
 8002f36:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002f3c:	e0cd      	b.n	80030da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80c2 	beq.w	80030ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fb3a 	bl	80065ce <USB_ReadDevInEPInterrupt>
 8002f5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d057      	beq.n	8003016 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69f9      	ldr	r1, [r7, #28]
 8002f82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f86:	4013      	ands	r3, r2
 8002f88:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f96:	461a      	mov	r2, r3
 8002f98:	2301      	movs	r3, #1
 8002f9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	799b      	ldrb	r3, [r3, #6]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d132      	bne.n	800300a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4403      	add	r3, r0
 8002fc4:	331c      	adds	r3, #28
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4419      	add	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4403      	add	r3, r0
 8002fd8:	3320      	adds	r3, #32
 8002fda:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d113      	bne.n	800300a <HAL_PCD_IRQHandler+0x3a2>
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3324      	adds	r3, #36	@ 0x24
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003002:	461a      	mov	r2, r3
 8003004:	2101      	movs	r1, #1
 8003006:	f003 fb41 	bl	800668c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4619      	mov	r1, r3
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f005 feb4 	bl	8008d7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800302c:	461a      	mov	r2, r3
 800302e:	2308      	movs	r3, #8
 8003030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003048:	461a      	mov	r2, r3
 800304a:	2310      	movs	r3, #16
 800304c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003064:	461a      	mov	r2, r3
 8003066:	2340      	movs	r3, #64	@ 0x40
 8003068:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d023      	beq.n	80030bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003074:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003076:	6a38      	ldr	r0, [r7, #32]
 8003078:	f002 fb28 	bl	80056cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800307c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	3310      	adds	r3, #16
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	78db      	ldrb	r3, [r3, #3]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d108      	bne.n	80030aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2200      	movs	r2, #0
 800309c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f005 fef7 	bl	8008e98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030b6:	461a      	mov	r2, r3
 80030b8:	2302      	movs	r3, #2
 80030ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fcbd 	bl	8003a48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	3301      	adds	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f47f af2e 	bne.w	8002f3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fa0c 	bl	8006504 <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030f6:	d122      	bne.n	800313e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003112:	2b01      	cmp	r3, #1
 8003114:	d108      	bne.n	8003128 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800311e:	2100      	movs	r1, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fea3 	bl	8003e6c <HAL_PCDEx_LPM_Callback>
 8003126:	e002      	b.n	800312e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f005 fe95 	bl	8008e58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800313c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 f9de 	bl	8006504 <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800314e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003152:	d112      	bne.n	800317a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b01      	cmp	r3, #1
 8003162:	d102      	bne.n	800316a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f005 fe51 	bl	8008e0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003178:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f003 f9c0 	bl	8006504 <USB_ReadInterrupts>
 8003184:	4603      	mov	r3, r0
 8003186:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318e:	f040 80b7 	bne.w	8003300 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2110      	movs	r1, #16
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 fa8d 	bl	80056cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b6:	e046      	b.n	8003246 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031c4:	461a      	mov	r2, r3
 80031c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80031cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80031e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f8:	461a      	mov	r2, r3
 80031fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80031fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	69fa      	ldr	r2, [r7, #28]
 8003214:	440a      	add	r2, r1
 8003216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800321a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800321e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003230:	0151      	lsls	r1, r2, #5
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	440a      	add	r2, r1
 8003236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800323a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800323e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003242:	3301      	adds	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	791b      	ldrb	r3, [r3, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	4293      	cmp	r3, r2
 8003250:	d3b2      	bcc.n	80031b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003260:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003264:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7bdb      	ldrb	r3, [r3, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d016      	beq.n	800329c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003274:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800327e:	f043 030b 	orr.w	r3, r3, #11
 8003282:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003294:	f043 030b 	orr.w	r3, r3, #11
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	e015      	b.n	80032c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80032b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032c2:	f043 030b 	orr.w	r3, r3, #11
 80032c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80032da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032ea:	461a      	mov	r2, r3
 80032ec:	f003 f9ce 	bl	800668c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80032fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 f8fd 	bl	8006504 <USB_ReadInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003314:	d123      	bne.n	800335e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f003 f993 	bl	8006646 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f002 fa4a 	bl	80057be <USB_GetDevSpeed>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681c      	ldr	r4, [r3, #0]
 8003336:	f001 f9c9 	bl	80046cc <HAL_RCC_GetHCLKFreq>
 800333a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003340:	461a      	mov	r2, r3
 8003342:	4620      	mov	r0, r4
 8003344:	f001 ff4e 	bl	80051e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f005 fd40 	bl	8008dce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800335c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f003 f8ce 	bl	8006504 <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b08      	cmp	r3, #8
 8003370:	d10a      	bne.n	8003388 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f005 fd1d 	bl	8008db2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f002 0208 	and.w	r2, r2, #8
 8003386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f003 f8b9 	bl	8006504 <USB_ReadInterrupts>
 8003392:	4603      	mov	r3, r0
 8003394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003398:	2b80      	cmp	r3, #128	@ 0x80
 800339a:	d123      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033a8:	2301      	movs	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	e014      	b.n	80033d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d105      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80033c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fb0a 	bl	80039e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	3301      	adds	r3, #1
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	791b      	ldrb	r3, [r3, #4]
 80033dc:	461a      	mov	r2, r3
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d3e4      	bcc.n	80033ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 f88b 	bl	8006504 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033f8:	d13c      	bne.n	8003474 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033fa:	2301      	movs	r3, #1
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fe:	e02b      	b.n	8003458 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3318      	adds	r3, #24
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d115      	bne.n	8003452 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003426:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	da12      	bge.n	8003452 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3317      	adds	r3, #23
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003448:	b2db      	uxtb	r3, r3
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 faca 	bl	80039e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	3301      	adds	r3, #1
 8003456:	627b      	str	r3, [r7, #36]	@ 0x24
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	791b      	ldrb	r3, [r3, #4]
 800345c:	461a      	mov	r2, r3
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	4293      	cmp	r3, r2
 8003462:	d3cd      	bcc.n	8003400 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 f843 	bl	8006504 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003484:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003488:	d156      	bne.n	8003538 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
 800348e:	e045      	b.n	800351c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d12e      	bne.n	8003516 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da2b      	bge.n	8003516 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	0c1a      	lsrs	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80034c8:	4053      	eors	r3, r2
 80034ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d121      	bne.n	8003516 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800350e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003512:	6053      	str	r3, [r2, #4]
            break;
 8003514:	e008      	b.n	8003528 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	3301      	adds	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	461a      	mov	r2, r3
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	4293      	cmp	r3, r2
 8003526:	d3b3      	bcc.n	8003490 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f002 ffe1 	bl	8006504 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354c:	d10a      	bne.n	8003564 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f005 fcb4 	bl	8008ebc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f002 ffcb 	bl	8006504 <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d115      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f005 fca4 	bl	8008ed8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	e000      	b.n	80035a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80035a2:	bf00      	nop
    }
  }
}
 80035a4:	3734      	adds	r7, #52	@ 0x34
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd90      	pop	{r4, r7, pc}

080035aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_PCD_SetAddress+0x1a>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e012      	b.n	80035ea <HAL_PCD_SetAddress+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f002 ff2a 	bl	8006434 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	4608      	mov	r0, r1
 80035fc:	4611      	mov	r1, r2
 80035fe:	461a      	mov	r2, r3
 8003600:	4603      	mov	r3, r0
 8003602:	70fb      	strb	r3, [r7, #3]
 8003604:	460b      	mov	r3, r1
 8003606:	803b      	strh	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003614:	2b00      	cmp	r3, #0
 8003616:	da0f      	bge.n	8003638 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 020f 	and.w	r2, r3, #15
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3310      	adds	r3, #16
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	3304      	adds	r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	705a      	strb	r2, [r3, #1]
 8003636:	e00f      	b.n	8003658 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	4613      	mov	r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003664:	883b      	ldrh	r3, [r7, #0]
 8003666:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	78ba      	ldrb	r2, [r7, #2]
 8003672:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	785b      	ldrb	r3, [r3, #1]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003686:	78bb      	ldrb	r3, [r7, #2]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d102      	bne.n	8003692 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_PCD_EP_Open+0xae>
 800369c:	2302      	movs	r3, #2
 800369e:	e00e      	b.n	80036be <HAL_PCD_EP_Open+0xcc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68f9      	ldr	r1, [r7, #12]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 f8aa 	bl	8005808 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80036bc:	7afb      	ldrb	r3, [r7, #11]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	da0f      	bge.n	80036fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 020f 	and.w	r2, r3, #15
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	3310      	adds	r3, #16
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	705a      	strb	r2, [r3, #1]
 80036f8:	e00f      	b.n	800371a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	f003 020f 	and.w	r2, r3, #15
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_PCD_EP_Close+0x6e>
 8003730:	2302      	movs	r3, #2
 8003732:	e00e      	b.n	8003752 <HAL_PCD_EP_Close+0x8c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	4618      	mov	r0, r3
 8003744:	f002 f8e8 	bl	8005918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b086      	sub	sp, #24
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	460b      	mov	r3, r1
 8003768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2200      	movs	r2, #0
 8003794:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	799b      	ldrb	r3, [r3, #6]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d102      	bne.n	80037b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	799b      	ldrb	r3, [r3, #6]
 80037be:	461a      	mov	r2, r3
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	f002 f985 	bl	8005ad0 <USB_EPStartXfer>

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	460b      	mov	r3, r1
 800380e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	f003 020f 	and.w	r2, r3, #15
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	3310      	adds	r3, #16
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	3304      	adds	r3, #4
 8003826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2200      	movs	r2, #0
 8003838:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2201      	movs	r2, #1
 800383e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	b2da      	uxtb	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	799b      	ldrb	r3, [r3, #6]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d102      	bne.n	800385a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	799b      	ldrb	r3, [r3, #6]
 8003862:	461a      	mov	r2, r3
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	f002 f933 	bl	8005ad0 <USB_EPStartXfer>

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	7912      	ldrb	r2, [r2, #4]
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e04f      	b.n	8003932 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003896:	2b00      	cmp	r3, #0
 8003898:	da0f      	bge.n	80038ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	f003 020f 	and.w	r2, r3, #15
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	3310      	adds	r3, #16
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	3304      	adds	r3, #4
 80038b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	705a      	strb	r2, [r3, #1]
 80038b8:	e00d      	b.n	80038d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	4413      	add	r3, r2
 80038cc:	3304      	adds	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_PCD_EP_SetStall+0x82>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e01d      	b.n	8003932 <HAL_PCD_EP_SetStall+0xbe>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68f9      	ldr	r1, [r7, #12]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 fcc1 	bl	800628c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	f003 030f 	and.w	r3, r3, #15
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	7999      	ldrb	r1, [r3, #6]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003922:	461a      	mov	r2, r3
 8003924:	f002 feb2 	bl	800668c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	460b      	mov	r3, r1
 8003944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	7912      	ldrb	r2, [r2, #4]
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e042      	b.n	80039de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800395c:	2b00      	cmp	r3, #0
 800395e:	da0f      	bge.n	8003980 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	f003 020f 	and.w	r2, r3, #15
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	3310      	adds	r3, #16
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	4413      	add	r3, r2
 8003974:	3304      	adds	r3, #4
 8003976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	705a      	strb	r2, [r3, #1]
 800397e:	e00f      	b.n	80039a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	f003 020f 	and.w	r2, r3, #15
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_PCD_EP_ClrStall+0x86>
 80039bc:	2302      	movs	r3, #2
 80039be:	e00e      	b.n	80039de <HAL_PCD_EP_ClrStall+0xa4>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68f9      	ldr	r1, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fcca 	bl	8006368 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80039f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	da0c      	bge.n	8003a14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 020f 	and.w	r2, r3, #15
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	3310      	adds	r3, #16
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e00c      	b.n	8003a2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 020f 	and.w	r2, r3, #15
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 fae9 	bl	800600c <USB_EPStopXfer>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	3310      	adds	r3, #16
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d901      	bls.n	8003a80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e06b      	b.n	8003b58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d902      	bls.n	8003a9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3303      	adds	r3, #3
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aa4:	e02a      	b.n	8003afc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d902      	bls.n	8003ac2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	089b      	lsrs	r3, r3, #2
 8003ac8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68d9      	ldr	r1, [r3, #12]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	4603      	mov	r3, r0
 8003ade:	6978      	ldr	r0, [r7, #20]
 8003ae0:	f002 fb3e 	bl	8006160 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	441a      	add	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	441a      	add	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d809      	bhi.n	8003b26 <PCD_WriteEmptyTxFifo+0xde>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d203      	bcs.n	8003b26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1bf      	bne.n	8003aa6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d811      	bhi.n	8003b56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	2201      	movs	r2, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	6939      	ldr	r1, [r7, #16]
 8003b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b52:	4013      	ands	r3, r2
 8003b54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	333c      	adds	r3, #60	@ 0x3c
 8003b78:	3304      	adds	r3, #4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	799b      	ldrb	r3, [r3, #6]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d17b      	bne.n	8003c8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4a61      	ldr	r2, [pc, #388]	@ (8003d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f240 80b9 	bls.w	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80b3 	beq.w	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc8:	6093      	str	r3, [r2, #8]
 8003bca:	e0a7      	b.n	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2320      	movs	r3, #32
 8003be6:	6093      	str	r3, [r2, #8]
 8003be8:	e098      	b.n	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8093 	bne.w	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d90f      	bls.n	8003c1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c1a:	6093      	str	r3, [r2, #8]
 8003c1c:	e07e      	b.n	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1a      	ldr	r2, [r3, #32]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	0159      	lsls	r1, r3, #5
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	440b      	add	r3, r1
 8003c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d114      	bne.n	8003c80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	f002 fd0e 	bl	800668c <USB_EP0_OutStart>
 8003c70:	e006      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f005 f85e 	bl	8008d48 <HAL_PCD_DataOutStageCallback>
 8003c8c:	e046      	b.n	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4a26      	ldr	r2, [pc, #152]	@ (8003d2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d124      	bne.n	8003ce0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cac:	461a      	mov	r2, r3
 8003cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb2:	6093      	str	r3, [r2, #8]
 8003cb4:	e032      	b.n	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2320      	movs	r3, #32
 8003cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f005 f835 	bl	8008d48 <HAL_PCD_DataOutStageCallback>
 8003cde:	e01d      	b.n	8003d1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d114      	bne.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	f002 fcbe 	bl	800668c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f005 f816 	bl	8008d48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	4f54300a 	.word	0x4f54300a
 8003d2c:	4f54310a 	.word	0x4f54310a

08003d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	333c      	adds	r3, #60	@ 0x3c
 8003d48:	3304      	adds	r3, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d90e      	bls.n	8003d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f004 ffcd 	bl	8008d24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d90c      	bls.n	8003dac <PCD_EP_OutSetupPacket_int+0x7c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	799b      	ldrb	r3, [r3, #6]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d108      	bne.n	8003dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003da4:	461a      	mov	r2, r3
 8003da6:	2101      	movs	r1, #1
 8003da8:	f002 fc70 	bl	800668c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	4f54300a 	.word	0x4f54300a

08003dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dda:	883b      	ldrh	r3, [r7, #0]
 8003ddc:	0419      	lsls	r1, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003de8:	e028      	b.n	8003e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	73fb      	strb	r3, [r7, #15]
 8003dfc:	e00d      	b.n	8003e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	3340      	adds	r3, #64	@ 0x40
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	4413      	add	r3, r2
 8003e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	3301      	adds	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3ec      	bcc.n	8003dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e24:	883b      	ldrh	r3, [r7, #0]
 8003e26:	0418      	lsls	r0, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	4302      	orrs	r2, r0
 8003e34:	3340      	adds	r3, #64	@ 0x40
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e267      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d075      	beq.n	8003f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ea2:	4b88      	ldr	r3, [pc, #544]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d00c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eae:	4b85      	ldr	r3, [pc, #532]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d112      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eba:	4b82      	ldr	r3, [pc, #520]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05b      	beq.n	8003f8c <HAL_RCC_OscConfig+0x108>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d157      	bne.n	8003f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e242      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x74>
 8003eea:	4b76      	ldr	r3, [pc, #472]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a75      	ldr	r2, [pc, #468]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	e01d      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x98>
 8003f02:	4b70      	ldr	r3, [pc, #448]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a6f      	ldr	r2, [pc, #444]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a6c      	ldr	r2, [pc, #432]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0xb0>
 8003f1c:	4b69      	ldr	r3, [pc, #420]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a68      	ldr	r2, [pc, #416]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b66      	ldr	r3, [pc, #408]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a65      	ldr	r2, [pc, #404]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd f882 	bl	8001044 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd f87e 	bl	8001044 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	@ 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e207      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b5b      	ldr	r3, [pc, #364]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0xc0>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fd f86e 	bl	8001044 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7fd f86a 	bl	8001044 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e1f3      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7e:	4b51      	ldr	r3, [pc, #324]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0xe8>
 8003f8a:	e000      	b.n	8003f8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 030c 	and.w	r3, r3, #12
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa6:	4b47      	ldr	r3, [pc, #284]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d11c      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb2:	4b44      	ldr	r3, [pc, #272]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	4b41      	ldr	r3, [pc, #260]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e1c7      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4937      	ldr	r1, [pc, #220]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fea:	e03a      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d020      	beq.n	8004036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff4:	4b34      	ldr	r3, [pc, #208]	@ (80040c8 <HAL_RCC_OscConfig+0x244>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fd f823 	bl	8001044 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004002:	f7fd f81f 	bl	8001044 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e1a8      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004020:	4b28      	ldr	r3, [pc, #160]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4925      	ldr	r1, [pc, #148]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e015      	b.n	8004062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004036:	4b24      	ldr	r3, [pc, #144]	@ (80040c8 <HAL_RCC_OscConfig+0x244>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd f802 	bl	8001044 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004044:	f7fc fffe 	bl	8001044 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e187      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d036      	beq.n	80040dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004076:	4b15      	ldr	r3, [pc, #84]	@ (80040cc <HAL_RCC_OscConfig+0x248>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407c:	f7fc ffe2 	bl	8001044 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004084:	f7fc ffde 	bl	8001044 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e167      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_RCC_OscConfig+0x240>)
 8004098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x200>
 80040a2:	e01b      	b.n	80040dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a4:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <HAL_RCC_OscConfig+0x248>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040aa:	f7fc ffcb 	bl	8001044 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	e00e      	b.n	80040d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fc ffc7 	bl	8001044 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d907      	bls.n	80040d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e150      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
 80040c4:	40023800 	.word	0x40023800
 80040c8:	42470000 	.word	0x42470000
 80040cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	4b88      	ldr	r3, [pc, #544]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ea      	bne.n	80040b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8097 	beq.w	8004218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ee:	4b81      	ldr	r3, [pc, #516]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10f      	bne.n	800411a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	4b7d      	ldr	r3, [pc, #500]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	4a7c      	ldr	r2, [pc, #496]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	@ 0x40
 800410a:	4b7a      	ldr	r3, [pc, #488]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411a:	4b77      	ldr	r3, [pc, #476]	@ (80042f8 <HAL_RCC_OscConfig+0x474>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d118      	bne.n	8004158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004126:	4b74      	ldr	r3, [pc, #464]	@ (80042f8 <HAL_RCC_OscConfig+0x474>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a73      	ldr	r2, [pc, #460]	@ (80042f8 <HAL_RCC_OscConfig+0x474>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004132:	f7fc ff87 	bl	8001044 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413a:	f7fc ff83 	bl	8001044 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e10c      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	4b6a      	ldr	r3, [pc, #424]	@ (80042f8 <HAL_RCC_OscConfig+0x474>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x2ea>
 8004160:	4b64      	ldr	r3, [pc, #400]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	4a63      	ldr	r2, [pc, #396]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6713      	str	r3, [r2, #112]	@ 0x70
 800416c:	e01c      	b.n	80041a8 <HAL_RCC_OscConfig+0x324>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b05      	cmp	r3, #5
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0x30c>
 8004176:	4b5f      	ldr	r3, [pc, #380]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	4a5e      	ldr	r2, [pc, #376]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	6713      	str	r3, [r2, #112]	@ 0x70
 8004182:	4b5c      	ldr	r3, [pc, #368]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	4a5b      	ldr	r2, [pc, #364]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	6713      	str	r3, [r2, #112]	@ 0x70
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0x324>
 8004190:	4b58      	ldr	r3, [pc, #352]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004194:	4a57      	ldr	r2, [pc, #348]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	6713      	str	r3, [r2, #112]	@ 0x70
 800419c:	4b55      	ldr	r3, [pc, #340]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a54      	ldr	r2, [pc, #336]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80041a2:	f023 0304 	bic.w	r3, r3, #4
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fc ff48 	bl	8001044 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fc ff44 	bl	8001044 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0cb      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ce:	4b49      	ldr	r3, [pc, #292]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0ee      	beq.n	80041b8 <HAL_RCC_OscConfig+0x334>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041dc:	f7fc ff32 	bl	8001044 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fc ff2e 	bl	8001044 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e0b5      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fa:	4b3e      	ldr	r3, [pc, #248]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1ee      	bne.n	80041e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420c:	4b39      	ldr	r3, [pc, #228]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	4a38      	ldr	r2, [pc, #224]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004216:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a1 	beq.w	8004364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004222:	4b34      	ldr	r3, [pc, #208]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b08      	cmp	r3, #8
 800422c:	d05c      	beq.n	80042e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d141      	bne.n	80042ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004236:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <HAL_RCC_OscConfig+0x478>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fc ff02 	bl	8001044 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fc fefe 	bl	8001044 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e087      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	019b      	lsls	r3, r3, #6
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	3b01      	subs	r3, #1
 800427c:	041b      	lsls	r3, r3, #16
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	491b      	ldr	r1, [pc, #108]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800428c:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <HAL_RCC_OscConfig+0x478>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004292:	f7fc fed7 	bl	8001044 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800429a:	f7fc fed3 	bl	8001044 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e05c      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ac:	4b11      	ldr	r3, [pc, #68]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x416>
 80042b8:	e054      	b.n	8004364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ba:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <HAL_RCC_OscConfig+0x478>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fc fec0 	bl	8001044 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fc febc 	bl	8001044 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e045      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <HAL_RCC_OscConfig+0x470>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x444>
 80042e6:	e03d      	b.n	8004364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e038      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40007000 	.word	0x40007000
 80042fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004300:	4b1b      	ldr	r3, [pc, #108]	@ (8004370 <HAL_RCC_OscConfig+0x4ec>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d028      	beq.n	8004360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d121      	bne.n	8004360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d11a      	bne.n	8004360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004338:	4293      	cmp	r3, r2
 800433a:	d111      	bne.n	8004360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	3b01      	subs	r3, #1
 800434a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d107      	bne.n	8004360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800

08004374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0cc      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004388:	4b68      	ldr	r3, [pc, #416]	@ (800452c <HAL_RCC_ClockConfig+0x1b8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d90c      	bls.n	80043b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004396:	4b65      	ldr	r3, [pc, #404]	@ (800452c <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b63      	ldr	r3, [pc, #396]	@ (800452c <HAL_RCC_ClockConfig+0x1b8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0b8      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c8:	4b59      	ldr	r3, [pc, #356]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a58      	ldr	r2, [pc, #352]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e0:	4b53      	ldr	r3, [pc, #332]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a52      	ldr	r2, [pc, #328]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4b50      	ldr	r3, [pc, #320]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	494d      	ldr	r1, [pc, #308]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d044      	beq.n	8004494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d107      	bne.n	8004422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	4b47      	ldr	r3, [pc, #284]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d119      	bne.n	8004452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e07f      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d003      	beq.n	8004432 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800442e:	2b03      	cmp	r3, #3
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004432:	4b3f      	ldr	r3, [pc, #252]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06f      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004442:	4b3b      	ldr	r3, [pc, #236]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e067      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004452:	4b37      	ldr	r3, [pc, #220]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f023 0203 	bic.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4934      	ldr	r1, [pc, #208]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004464:	f7fc fdee 	bl	8001044 <HAL_GetTick>
 8004468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446a:	e00a      	b.n	8004482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446c:	f7fc fdea 	bl	8001044 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e04f      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004482:	4b2b      	ldr	r3, [pc, #172]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 020c 	and.w	r2, r3, #12
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	429a      	cmp	r2, r3
 8004492:	d1eb      	bne.n	800446c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004494:	4b25      	ldr	r3, [pc, #148]	@ (800452c <HAL_RCC_ClockConfig+0x1b8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d20c      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a2:	4b22      	ldr	r3, [pc, #136]	@ (800452c <HAL_RCC_ClockConfig+0x1b8>)
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b20      	ldr	r3, [pc, #128]	@ (800452c <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d001      	beq.n	80044bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e032      	b.n	8004522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c8:	4b19      	ldr	r3, [pc, #100]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4916      	ldr	r1, [pc, #88]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	490e      	ldr	r1, [pc, #56]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044fa:	f000 f821 	bl	8004540 <HAL_RCC_GetSysClockFreq>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490a      	ldr	r1, [pc, #40]	@ (8004534 <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	fa22 f303 	lsr.w	r3, r2, r3
 8004512:	4a09      	ldr	r2, [pc, #36]	@ (8004538 <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004516:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_RCC_ClockConfig+0x1c8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc fd4e 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40023c00 	.word	0x40023c00
 8004530:	40023800 	.word	0x40023800
 8004534:	08009348 	.word	0x08009348
 8004538:	20000000 	.word	0x20000000
 800453c:	20000004 	.word	0x20000004

08004540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004544:	b090      	sub	sp, #64	@ 0x40
 8004546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004558:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b08      	cmp	r3, #8
 8004562:	d00d      	beq.n	8004580 <HAL_RCC_GetSysClockFreq+0x40>
 8004564:	2b08      	cmp	r3, #8
 8004566:	f200 80a1 	bhi.w	80046ac <HAL_RCC_GetSysClockFreq+0x16c>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_RCC_GetSysClockFreq+0x34>
 800456e:	2b04      	cmp	r3, #4
 8004570:	d003      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x3a>
 8004572:	e09b      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004574:	4b53      	ldr	r3, [pc, #332]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004576:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004578:	e09b      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457a:	4b53      	ldr	r3, [pc, #332]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800457c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800457e:	e098      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004580:	4b4f      	ldr	r3, [pc, #316]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458a:	4b4d      	ldr	r3, [pc, #308]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d028      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004596:	4b4a      	ldr	r3, [pc, #296]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	099b      	lsrs	r3, r3, #6
 800459c:	2200      	movs	r2, #0
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045a8:	2100      	movs	r1, #0
 80045aa:	4b47      	ldr	r3, [pc, #284]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80045ac:	fb03 f201 	mul.w	r2, r3, r1
 80045b0:	2300      	movs	r3, #0
 80045b2:	fb00 f303 	mul.w	r3, r0, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	4a43      	ldr	r2, [pc, #268]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80045ba:	fba0 1202 	umull	r1, r2, r0, r2
 80045be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045c0:	460a      	mov	r2, r1
 80045c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045c6:	4413      	add	r3, r2
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045cc:	2200      	movs	r2, #0
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	61fa      	str	r2, [r7, #28]
 80045d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045da:	f7fb fdfd 	bl	80001d8 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4613      	mov	r3, r2
 80045e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045e6:	e053      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e8:	4b35      	ldr	r3, [pc, #212]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	2200      	movs	r2, #0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	617a      	str	r2, [r7, #20]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045fa:	f04f 0b00 	mov.w	fp, #0
 80045fe:	4652      	mov	r2, sl
 8004600:	465b      	mov	r3, fp
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004610:	0150      	lsls	r0, r2, #5
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	ebb2 080a 	subs.w	r8, r2, sl
 800461a:	eb63 090b 	sbc.w	r9, r3, fp
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800462a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800462e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004632:	ebb2 0408 	subs.w	r4, r2, r8
 8004636:	eb63 0509 	sbc.w	r5, r3, r9
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	00eb      	lsls	r3, r5, #3
 8004644:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004648:	00e2      	lsls	r2, r4, #3
 800464a:	4614      	mov	r4, r2
 800464c:	461d      	mov	r5, r3
 800464e:	eb14 030a 	adds.w	r3, r4, sl
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	eb45 030b 	adc.w	r3, r5, fp
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004666:	4629      	mov	r1, r5
 8004668:	028b      	lsls	r3, r1, #10
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004670:	4621      	mov	r1, r4
 8004672:	028a      	lsls	r2, r1, #10
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800467a:	2200      	movs	r2, #0
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	60fa      	str	r2, [r7, #12]
 8004680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004684:	f7fb fda8 	bl	80001d8 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4613      	mov	r3, r2
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	0c1b      	lsrs	r3, r3, #16
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	3301      	adds	r3, #1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3740      	adds	r7, #64	@ 0x40
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	017d7840 	.word	0x017d7840

080046cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d0:	4b03      	ldr	r3, [pc, #12]	@ (80046e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d2:	681b      	ldr	r3, [r3, #0]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000000 	.word	0x20000000

080046e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046e8:	f7ff fff0 	bl	80046cc <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	0a9b      	lsrs	r3, r3, #10
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	08009358 	.word	0x08009358

0800470c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e041      	b.n	80047a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc fb2e 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 fab2 	bl	8004cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d001      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e044      	b.n	800484e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a1e      	ldr	r2, [pc, #120]	@ (800485c <HAL_TIM_Base_Start_IT+0xb0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d018      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x6c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ee:	d013      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x6c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004860 <HAL_TIM_Base_Start_IT+0xb4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x6c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <HAL_TIM_Base_Start_IT+0xb8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x6c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <HAL_TIM_Base_Start_IT+0xbc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x6c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a16      	ldr	r2, [pc, #88]	@ (800486c <HAL_TIM_Base_Start_IT+0xc0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d111      	bne.n	800483c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b06      	cmp	r3, #6
 8004828:	d010      	beq.n	800484c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	e007      	b.n	800484c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40014000 	.word	0x40014000

08004870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01b      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0202 	mvn.w	r2, #2
 80048a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9db 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9cd 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f9de 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d020      	beq.n	8004920 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01b      	beq.n	8004920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0204 	mvn.w	r2, #4
 80048f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f9b5 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 800490c:	e005      	b.n	800491a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9a7 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f9b8 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d020      	beq.n	800496c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01b      	beq.n	800496c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0208 	mvn.w	r2, #8
 800493c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2204      	movs	r2, #4
 8004942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f98f 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f981 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f992 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d020      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01b      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0210 	mvn.w	r2, #16
 8004988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2208      	movs	r2, #8
 800498e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f969 	bl	8004c76 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f95b 	bl	8004c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f96c 	bl	8004c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0201 	mvn.w	r2, #1
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fb fdbc 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fb84 	bl	8005108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00c      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d007      	beq.n	8004a24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f93d 	bl	8004c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00c      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0220 	mvn.w	r2, #32
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fb56 	bl	80050f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_ConfigClockSource+0x1c>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0b4      	b.n	8004bd6 <HAL_TIM_ConfigClockSource+0x186>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa4:	d03e      	beq.n	8004b24 <HAL_TIM_ConfigClockSource+0xd4>
 8004aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aaa:	f200 8087 	bhi.w	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab2:	f000 8086 	beq.w	8004bc2 <HAL_TIM_ConfigClockSource+0x172>
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aba:	d87f      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b70      	cmp	r3, #112	@ 0x70
 8004abe:	d01a      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ac0:	2b70      	cmp	r3, #112	@ 0x70
 8004ac2:	d87b      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b60      	cmp	r3, #96	@ 0x60
 8004ac6:	d050      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x11a>
 8004ac8:	2b60      	cmp	r3, #96	@ 0x60
 8004aca:	d877      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d03c      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xfa>
 8004ad0:	2b50      	cmp	r3, #80	@ 0x50
 8004ad2:	d873      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d058      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x13a>
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d86f      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b30      	cmp	r3, #48	@ 0x30
 8004ade:	d064      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004ae0:	2b30      	cmp	r3, #48	@ 0x30
 8004ae2:	d86b      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d060      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d867      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d05c      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d05a      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004af4:	e062      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b06:	f000 fa66 	bl	8004fd6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	609a      	str	r2, [r3, #8]
      break;
 8004b22:	e04f      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b34:	f000 fa4f 	bl	8004fd6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b46:	609a      	str	r2, [r3, #8]
      break;
 8004b48:	e03c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	461a      	mov	r2, r3
 8004b58:	f000 f9c3 	bl	8004ee2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2150      	movs	r1, #80	@ 0x50
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fa1c 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004b68:	e02c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	461a      	mov	r2, r3
 8004b78:	f000 f9e2 	bl	8004f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2160      	movs	r1, #96	@ 0x60
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fa0c 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004b88:	e01c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	461a      	mov	r2, r3
 8004b98:	f000 f9a3 	bl	8004ee2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2140      	movs	r1, #64	@ 0x40
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f9fc 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f000 f9f3 	bl	8004fa0 <TIM_ITRx_SetConfig>
      break;
 8004bba:	e003      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e031      	b.n	8004c5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f8d9 	bl	8004dc0 <TIM_SlaveTimer_SetConfig>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e018      	b.n	8004c5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a37      	ldr	r2, [pc, #220]	@ (8004da4 <TIM_Base_SetConfig+0xf0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a34      	ldr	r2, [pc, #208]	@ (8004da8 <TIM_Base_SetConfig+0xf4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a33      	ldr	r2, [pc, #204]	@ (8004dac <TIM_Base_SetConfig+0xf8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x38>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a32      	ldr	r2, [pc, #200]	@ (8004db0 <TIM_Base_SetConfig+0xfc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d108      	bne.n	8004cfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a28      	ldr	r2, [pc, #160]	@ (8004da4 <TIM_Base_SetConfig+0xf0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01b      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d0c:	d017      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a25      	ldr	r2, [pc, #148]	@ (8004da8 <TIM_Base_SetConfig+0xf4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a24      	ldr	r2, [pc, #144]	@ (8004dac <TIM_Base_SetConfig+0xf8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00f      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a23      	ldr	r2, [pc, #140]	@ (8004db0 <TIM_Base_SetConfig+0xfc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a22      	ldr	r2, [pc, #136]	@ (8004db4 <TIM_Base_SetConfig+0x100>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a21      	ldr	r2, [pc, #132]	@ (8004db8 <TIM_Base_SetConfig+0x104>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_Base_SetConfig+0x8a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a20      	ldr	r2, [pc, #128]	@ (8004dbc <TIM_Base_SetConfig+0x108>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a0c      	ldr	r2, [pc, #48]	@ (8004da4 <TIM_Base_SetConfig+0xf0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d103      	bne.n	8004d7e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f043 0204 	orr.w	r2, r3, #4
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ddc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b70      	cmp	r3, #112	@ 0x70
 8004e08:	d01a      	beq.n	8004e40 <TIM_SlaveTimer_SetConfig+0x80>
 8004e0a:	2b70      	cmp	r3, #112	@ 0x70
 8004e0c:	d860      	bhi.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
 8004e0e:	2b60      	cmp	r3, #96	@ 0x60
 8004e10:	d054      	beq.n	8004ebc <TIM_SlaveTimer_SetConfig+0xfc>
 8004e12:	2b60      	cmp	r3, #96	@ 0x60
 8004e14:	d85c      	bhi.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
 8004e16:	2b50      	cmp	r3, #80	@ 0x50
 8004e18:	d046      	beq.n	8004ea8 <TIM_SlaveTimer_SetConfig+0xe8>
 8004e1a:	2b50      	cmp	r3, #80	@ 0x50
 8004e1c:	d858      	bhi.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
 8004e1e:	2b40      	cmp	r3, #64	@ 0x40
 8004e20:	d019      	beq.n	8004e56 <TIM_SlaveTimer_SetConfig+0x96>
 8004e22:	2b40      	cmp	r3, #64	@ 0x40
 8004e24:	d854      	bhi.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
 8004e26:	2b30      	cmp	r3, #48	@ 0x30
 8004e28:	d055      	beq.n	8004ed6 <TIM_SlaveTimer_SetConfig+0x116>
 8004e2a:	2b30      	cmp	r3, #48	@ 0x30
 8004e2c:	d850      	bhi.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d051      	beq.n	8004ed6 <TIM_SlaveTimer_SetConfig+0x116>
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d84c      	bhi.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04d      	beq.n	8004ed6 <TIM_SlaveTimer_SetConfig+0x116>
 8004e3a:	2b10      	cmp	r3, #16
 8004e3c:	d04b      	beq.n	8004ed6 <TIM_SlaveTimer_SetConfig+0x116>
 8004e3e:	e047      	b.n	8004ed0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	f000 f8c1 	bl	8004fd6 <TIM_ETR_SetConfig>
      break;
 8004e54:	e040      	b.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b05      	cmp	r3, #5
 8004e5c:	d101      	bne.n	8004e62 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e03b      	b.n	8004eda <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e88:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
      break;
 8004ea6:	e017      	b.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f000 f814 	bl	8004ee2 <TIM_TI1_ConfigInputStage>
      break;
 8004eba:	e00d      	b.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f000 f839 	bl	8004f40 <TIM_TI2_ConfigInputStage>
      break;
 8004ece:	e003      	b.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ed4:	e000      	b.n	8004ed8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004ed6:	bf00      	nop
  }

  return status;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b087      	sub	sp, #28
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 030a 	bic.w	r3, r3, #10
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	621a      	str	r2, [r3, #32]
}
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	031b      	lsls	r3, r3, #12
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f043 0307 	orr.w	r3, r3, #7
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	609a      	str	r2, [r3, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	609a      	str	r2, [r3, #8]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800502c:	2302      	movs	r3, #2
 800502e:	e050      	b.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1c      	ldr	r2, [pc, #112]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d018      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507c:	d013      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a16      	ldr	r2, [pc, #88]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d009      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a15      	ldr	r2, [pc, #84]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10c      	bne.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40014000 	.word	0x40014000

080050f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800511c:	b084      	sub	sp, #16
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	f107 001c 	add.w	r0, r7, #28
 800512a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800512e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005132:	2b01      	cmp	r3, #1
 8005134:	d123      	bne.n	800517e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800514a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800515e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005162:	2b01      	cmp	r3, #1
 8005164:	d105      	bne.n	8005172 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 fae8 	bl	8006748 <USB_CoreReset>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e01b      	b.n	80051b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fadc 	bl	8006748 <USB_CoreReset>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005194:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005198:	2b00      	cmp	r3, #0
 800519a:	d106      	bne.n	80051aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80051a8:	e005      	b.n	80051b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80051b6:	7fbb      	ldrb	r3, [r7, #30]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10b      	bne.n	80051d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f043 0206 	orr.w	r2, r3, #6
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051e0:	b004      	add	sp, #16
 80051e2:	4770      	bx	lr

080051e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	4613      	mov	r3, r2
 80051f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d165      	bne.n	80052c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a41      	ldr	r2, [pc, #260]	@ (8005300 <USB_SetTurnaroundTime+0x11c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d906      	bls.n	800520e <USB_SetTurnaroundTime+0x2a>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4a40      	ldr	r2, [pc, #256]	@ (8005304 <USB_SetTurnaroundTime+0x120>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d202      	bcs.n	800520e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005208:	230f      	movs	r3, #15
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e062      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a3c      	ldr	r2, [pc, #240]	@ (8005304 <USB_SetTurnaroundTime+0x120>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d306      	bcc.n	8005224 <USB_SetTurnaroundTime+0x40>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4a3b      	ldr	r2, [pc, #236]	@ (8005308 <USB_SetTurnaroundTime+0x124>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d202      	bcs.n	8005224 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800521e:	230e      	movs	r3, #14
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e057      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a38      	ldr	r2, [pc, #224]	@ (8005308 <USB_SetTurnaroundTime+0x124>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d306      	bcc.n	800523a <USB_SetTurnaroundTime+0x56>
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4a37      	ldr	r2, [pc, #220]	@ (800530c <USB_SetTurnaroundTime+0x128>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d202      	bcs.n	800523a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005234:	230d      	movs	r3, #13
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e04c      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4a33      	ldr	r2, [pc, #204]	@ (800530c <USB_SetTurnaroundTime+0x128>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d306      	bcc.n	8005250 <USB_SetTurnaroundTime+0x6c>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4a32      	ldr	r2, [pc, #200]	@ (8005310 <USB_SetTurnaroundTime+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d802      	bhi.n	8005250 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800524a:	230c      	movs	r3, #12
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e041      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4a2f      	ldr	r2, [pc, #188]	@ (8005310 <USB_SetTurnaroundTime+0x12c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d906      	bls.n	8005266 <USB_SetTurnaroundTime+0x82>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4a2e      	ldr	r2, [pc, #184]	@ (8005314 <USB_SetTurnaroundTime+0x130>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d802      	bhi.n	8005266 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005260:	230b      	movs	r3, #11
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e036      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4a2a      	ldr	r2, [pc, #168]	@ (8005314 <USB_SetTurnaroundTime+0x130>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d906      	bls.n	800527c <USB_SetTurnaroundTime+0x98>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4a29      	ldr	r2, [pc, #164]	@ (8005318 <USB_SetTurnaroundTime+0x134>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d802      	bhi.n	800527c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005276:	230a      	movs	r3, #10
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e02b      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a26      	ldr	r2, [pc, #152]	@ (8005318 <USB_SetTurnaroundTime+0x134>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d906      	bls.n	8005292 <USB_SetTurnaroundTime+0xae>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4a25      	ldr	r2, [pc, #148]	@ (800531c <USB_SetTurnaroundTime+0x138>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d202      	bcs.n	8005292 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800528c:	2309      	movs	r3, #9
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e020      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	4a21      	ldr	r2, [pc, #132]	@ (800531c <USB_SetTurnaroundTime+0x138>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d306      	bcc.n	80052a8 <USB_SetTurnaroundTime+0xc4>
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4a20      	ldr	r2, [pc, #128]	@ (8005320 <USB_SetTurnaroundTime+0x13c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d802      	bhi.n	80052a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052a2:	2308      	movs	r3, #8
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e015      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <USB_SetTurnaroundTime+0x13c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d906      	bls.n	80052be <USB_SetTurnaroundTime+0xda>
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <USB_SetTurnaroundTime+0x140>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d202      	bcs.n	80052be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052b8:	2307      	movs	r3, #7
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e00a      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052be:	2306      	movs	r3, #6
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e007      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80052ca:	2309      	movs	r3, #9
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	e001      	b.n	80052d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80052d0:	2309      	movs	r3, #9
 80052d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80052ec:	431a      	orrs	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	00d8acbf 	.word	0x00d8acbf
 8005304:	00e4e1c0 	.word	0x00e4e1c0
 8005308:	00f42400 	.word	0x00f42400
 800530c:	01067380 	.word	0x01067380
 8005310:	011a499f 	.word	0x011a499f
 8005314:	01312cff 	.word	0x01312cff
 8005318:	014ca43f 	.word	0x014ca43f
 800531c:	016e3600 	.word	0x016e3600
 8005320:	01a6ab1f 	.word	0x01a6ab1f
 8005324:	01e84800 	.word	0x01e84800

08005328 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f043 0201 	orr.w	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d115      	bne.n	80053ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800539a:	200a      	movs	r0, #10
 800539c:	f7fb fe5e 	bl	800105c <HAL_Delay>
      ms += 10U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	330a      	adds	r3, #10
 80053a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f001 f93f 	bl	800662a <USB_GetMode>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d01e      	beq.n	80053f0 <USB_SetCurrentMode+0x84>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80053b6:	d9f0      	bls.n	800539a <USB_SetCurrentMode+0x2e>
 80053b8:	e01a      	b.n	80053f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d115      	bne.n	80053ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053cc:	200a      	movs	r0, #10
 80053ce:	f7fb fe45 	bl	800105c <HAL_Delay>
      ms += 10U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	330a      	adds	r3, #10
 80053d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f001 f926 	bl	800662a <USB_GetMode>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <USB_SetCurrentMode+0x84>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80053e8:	d9f0      	bls.n	80053cc <USB_SetCurrentMode+0x60>
 80053ea:	e001      	b.n	80053f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e005      	b.n	80053fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80053f4:	d101      	bne.n	80053fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005404:	b084      	sub	sp, #16
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e009      	b.n	8005438 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3340      	adds	r3, #64	@ 0x40
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3301      	adds	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b0e      	cmp	r3, #14
 800543c:	d9f2      	bls.n	8005424 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800543e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11c      	bne.n	8005480 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	@ 0x38
 800547e:	e00b      	b.n	8005498 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054a4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10d      	bne.n	80054c8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054b4:	2100      	movs	r1, #0
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f968 	bl	800578c <USB_SetDevSpeed>
 80054bc:	e008      	b.n	80054d0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054be:	2101      	movs	r1, #1
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f963 	bl	800578c <USB_SetDevSpeed>
 80054c6:	e003      	b.n	80054d0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054c8:	2103      	movs	r1, #3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f95e 	bl	800578c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054d0:	2110      	movs	r1, #16
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8fa 	bl	80056cc <USB_FlushTxFifo>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f924 	bl	8005730 <USB_FlushRxFifo>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f8:	461a      	mov	r2, r3
 80054fa:	2300      	movs	r3, #0
 80054fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005504:	461a      	mov	r2, r3
 8005506:	2300      	movs	r3, #0
 8005508:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	e043      	b.n	80055a4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800552e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005532:	d118      	bne.n	8005566 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005546:	461a      	mov	r2, r3
 8005548:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e013      	b.n	8005578 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555c:	461a      	mov	r2, r3
 800555e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e008      	b.n	8005578 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005584:	461a      	mov	r2, r3
 8005586:	2300      	movs	r3, #0
 8005588:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005596:	461a      	mov	r2, r3
 8005598:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800559c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3301      	adds	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055a8:	461a      	mov	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d3b5      	bcc.n	800551c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	e043      	b.n	800563e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055cc:	d118      	bne.n	8005600 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e013      	b.n	8005612 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e008      	b.n	8005612 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	461a      	mov	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005630:	461a      	mov	r2, r3
 8005632:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005636:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3301      	adds	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005642:	461a      	mov	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4293      	cmp	r3, r2
 8005648:	d3b5      	bcc.n	80055b6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800565c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800566a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800566c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f043 0210 	orr.w	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	4b10      	ldr	r3, [pc, #64]	@ (80056c8 <USB_DevInit+0x2c4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800568c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f043 0208 	orr.w	r2, r3, #8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d107      	bne.n	80056b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056b0:	f043 0304 	orr.w	r3, r3, #4
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c4:	b004      	add	sp, #16
 80056c6:	4770      	bx	lr
 80056c8:	803c3800 	.word	0x803c3800

080056cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056e6:	d901      	bls.n	80056ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e01b      	b.n	8005724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	daf2      	bge.n	80056da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	019b      	lsls	r3, r3, #6
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005710:	d901      	bls.n	8005716 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e006      	b.n	8005724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b20      	cmp	r3, #32
 8005720:	d0f0      	beq.n	8005704 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005748:	d901      	bls.n	800574e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e018      	b.n	8005780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	daf2      	bge.n	800573c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2210      	movs	r2, #16
 800575e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576c:	d901      	bls.n	8005772 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e006      	b.n	8005780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d0f0      	beq.n	8005760 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80057be:	b480      	push	{r7}
 80057c0:	b087      	sub	sp, #28
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0306 	and.w	r3, r3, #6
 80057d6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]
 80057e2:	e00a      	b.n	80057fa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d002      	beq.n	80057f0 <USB_GetDevSpeed+0x32>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b06      	cmp	r3, #6
 80057ee:	d102      	bne.n	80057f6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057f0:	2302      	movs	r3, #2
 80057f2:	75fb      	strb	r3, [r7, #23]
 80057f4:	e001      	b.n	80057fa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057f6:	230f      	movs	r3, #15
 80057f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	371c      	adds	r7, #28
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d13a      	bne.n	800589a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	2101      	movs	r1, #1
 8005836:	fa01 f303 	lsl.w	r3, r1, r3
 800583a:	b29b      	uxth	r3, r3
 800583c:	68f9      	ldr	r1, [r7, #12]
 800583e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005842:	4313      	orrs	r3, r2
 8005844:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d155      	bne.n	8005908 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	791b      	ldrb	r3, [r3, #4]
 8005876:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005878:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	059b      	lsls	r3, r3, #22
 800587e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005880:	4313      	orrs	r3, r2
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	440a      	add	r2, r1
 800588a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e036      	b.n	8005908 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	2101      	movs	r1, #1
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	68f9      	ldr	r1, [r7, #12]
 80058b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11a      	bne.n	8005908 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	791b      	ldrb	r3, [r3, #4]
 80058ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ee:	430b      	orrs	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	0151      	lsls	r1, r2, #5
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	440a      	add	r2, r1
 80058fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005906:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d161      	bne.n	80059f8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005946:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800594a:	d11f      	bne.n	800598c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005966:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800596a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005986:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800598a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005992:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f303 	lsl.w	r3, r1, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059ac:	4013      	ands	r3, r2
 80059ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	2101      	movs	r1, #1
 80059c2:	fa01 f303 	lsl.w	r3, r1, r3
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	43db      	mvns	r3, r3
 80059ca:	68f9      	ldr	r1, [r7, #12]
 80059cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059d0:	4013      	ands	r3, r2
 80059d2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	0159      	lsls	r1, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	440b      	add	r3, r1
 80059ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ee:	4619      	mov	r1, r3
 80059f0:	4b35      	ldr	r3, [pc, #212]	@ (8005ac8 <USB_DeactivateEndpoint+0x1b0>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]
 80059f6:	e060      	b.n	8005aba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a0e:	d11f      	bne.n	8005a50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a4a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	2101      	movs	r1, #1
 8005a62:	fa01 f303 	lsl.w	r3, r1, r3
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a70:	4013      	ands	r3, r2
 8005a72:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	2101      	movs	r1, #1
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a94:	4013      	ands	r3, r2
 8005a96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	0159      	lsls	r1, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <USB_DeactivateEndpoint+0x1b4>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	ec337800 	.word	0xec337800
 8005acc:	eff37800 	.word	0xeff37800

08005ad0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f040 817f 	bne.w	8005df0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d132      	bne.n	8005b60 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	015a      	lsls	r2, r3, #5
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	4413      	add	r3, r2
 8005b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	0151      	lsls	r1, r2, #5
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	440a      	add	r2, r1
 8005b10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b14:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b18:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b58:	0cdb      	lsrs	r3, r3, #19
 8005b5a:	04db      	lsls	r3, r3, #19
 8005b5c:	6113      	str	r3, [r2, #16]
 8005b5e:	e097      	b.n	8005c90 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7a:	0cdb      	lsrs	r3, r3, #19
 8005b7c:	04db      	lsls	r3, r3, #19
 8005b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b9a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b9e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ba2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d11a      	bne.n	8005be0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d903      	bls.n	8005bbe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bdc:	6113      	str	r3, [r2, #16]
 8005bde:	e044      	b.n	8005c6a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	1e5a      	subs	r2, r3, #1
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	8afb      	ldrh	r3, [r7, #22]
 8005c06:	04d9      	lsls	r1, r3, #19
 8005c08:	4ba4      	ldr	r3, [pc, #656]	@ (8005e9c <USB_EPStartXfer+0x3cc>)
 8005c0a:	400b      	ands	r3, r1
 8005c0c:	69b9      	ldr	r1, [r7, #24]
 8005c0e:	0148      	lsls	r0, r1, #5
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	4401      	add	r1, r0
 8005c14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	791b      	ldrb	r3, [r3, #4]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d122      	bne.n	8005c6a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c3e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005c42:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	691a      	ldr	r2, [r3, #16]
 8005c52:	8afb      	ldrh	r3, [r7, #22]
 8005c54:	075b      	lsls	r3, r3, #29
 8005c56:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005c5a:	69b9      	ldr	r1, [r7, #24]
 8005c5c:	0148      	lsls	r0, r1, #5
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	4401      	add	r1, r0
 8005c62:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c66:	4313      	orrs	r3, r2
 8005c68:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	0148      	lsls	r0, r1, #5
 8005c84:	69f9      	ldr	r1, [r7, #28]
 8005c86:	4401      	add	r1, r0
 8005c88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d14b      	bne.n	8005d2e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005caa:	461a      	mov	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	791b      	ldrb	r3, [r3, #4]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d128      	bne.n	8005d0c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d110      	bne.n	8005cec <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	69fa      	ldr	r2, [r7, #28]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e00f      	b.n	8005d0c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d2a:	6013      	str	r3, [r2, #0]
 8005d2c:	e166      	b.n	8005ffc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	69fa      	ldr	r2, [r7, #28]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d48:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d4c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	791b      	ldrb	r3, [r3, #4]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d015      	beq.n	8005d82 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 814e 	beq.w	8005ffc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f003 030f 	and.w	r3, r3, #15
 8005d70:	2101      	movs	r1, #1
 8005d72:	fa01 f303 	lsl.w	r3, r1, r3
 8005d76:	69f9      	ldr	r1, [r7, #28]
 8005d78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d80:	e13c      	b.n	8005ffc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d110      	bne.n	8005db4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	e00f      	b.n	8005dd4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	68d9      	ldr	r1, [r3, #12]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	b298      	uxth	r0, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	4603      	mov	r3, r0
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f9b9 	bl	8006160 <USB_WritePacket>
 8005dee:	e105      	b.n	8005ffc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0a:	0cdb      	lsrs	r3, r3, #19
 8005e0c:	04db      	lsls	r3, r3, #19
 8005e0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e32:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d132      	bne.n	8005ea0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	689a      	ldr	r2, [r3, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	0148      	lsls	r0, r1, #5
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	4401      	add	r1, r0
 8005e70:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e96:	6113      	str	r3, [r2, #16]
 8005e98:	e062      	b.n	8005f60 <USB_EPStartXfer+0x490>
 8005e9a:	bf00      	nop
 8005e9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d123      	bne.n	8005ef0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ebe:	69b9      	ldr	r1, [r7, #24]
 8005ec0:	0148      	lsls	r0, r1, #5
 8005ec2:	69f9      	ldr	r1, [r7, #28]
 8005ec4:	4401      	add	r1, r0
 8005ec6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eec:	6113      	str	r3, [r2, #16]
 8005eee:	e037      	b.n	8005f60 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	1e5a      	subs	r2, r3, #1
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f04:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	8afa      	ldrh	r2, [r7, #22]
 8005f0c:	fb03 f202 	mul.w	r2, r3, r2
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	8afb      	ldrh	r3, [r7, #22]
 8005f24:	04d9      	lsls	r1, r3, #19
 8005f26:	4b38      	ldr	r3, [pc, #224]	@ (8006008 <USB_EPStartXfer+0x538>)
 8005f28:	400b      	ands	r3, r1
 8005f2a:	69b9      	ldr	r1, [r7, #24]
 8005f2c:	0148      	lsls	r0, r1, #5
 8005f2e:	69f9      	ldr	r1, [r7, #28]
 8005f30:	4401      	add	r1, r0
 8005f32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f36:	4313      	orrs	r3, r2
 8005f38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	0148      	lsls	r0, r1, #5
 8005f54:	69f9      	ldr	r1, [r7, #28]
 8005f56:	4401      	add	r1, r0
 8005f58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d10d      	bne.n	8005f82 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	68d9      	ldr	r1, [r3, #12]
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7e:	460a      	mov	r2, r1
 8005f80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	791b      	ldrb	r3, [r3, #4]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d128      	bne.n	8005fdc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d110      	bne.n	8005fbc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	e00f      	b.n	8005fdc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fda:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	0151      	lsls	r1, r2, #5
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	440a      	add	r2, r1
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	1ff80000 	.word	0x1ff80000

0800600c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	785b      	ldrb	r3, [r3, #1]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d14a      	bne.n	80060c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006042:	f040 8086 	bne.w	8006152 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006064:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006068:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	440a      	add	r2, r1
 8006084:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006088:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800608c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f242 7210 	movw	r2, #10000	@ 0x2710
 800609a:	4293      	cmp	r3, r2
 800609c:	d902      	bls.n	80060a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
          break;
 80060a2:	e056      	b.n	8006152 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060bc:	d0e7      	beq.n	800608e <USB_EPStopXfer+0x82>
 80060be:	e048      	b.n	8006152 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060d8:	d13b      	bne.n	8006152 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	7812      	ldrb	r2, [r2, #0]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	7812      	ldrb	r2, [r2, #0]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006120:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800612e:	4293      	cmp	r3, r2
 8006130:	d902      	bls.n	8006138 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
          break;
 8006136:	e00c      	b.n	8006152 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800614c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006150:	d0e7      	beq.n	8006122 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	@ 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4611      	mov	r1, r2
 800616c:	461a      	mov	r2, r3
 800616e:	460b      	mov	r3, r1
 8006170:	71fb      	strb	r3, [r7, #7]
 8006172:	4613      	mov	r3, r2
 8006174:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800617e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d123      	bne.n	80061ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006186:	88bb      	ldrh	r3, [r7, #4]
 8006188:	3303      	adds	r3, #3
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800618e:	2300      	movs	r3, #0
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	e018      	b.n	80061c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006194:	79fb      	ldrb	r3, [r7, #7]
 8006196:	031a      	lsls	r2, r3, #12
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	4413      	add	r3, r2
 800619c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061a0:	461a      	mov	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	3301      	adds	r3, #1
 80061b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	3301      	adds	r3, #1
 80061b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	3301      	adds	r3, #1
 80061be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	3301      	adds	r3, #1
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d3e2      	bcc.n	8006194 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3724      	adds	r7, #36	@ 0x24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061dc:	b480      	push	{r7}
 80061de:	b08b      	sub	sp, #44	@ 0x2c
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061fa:	88fb      	ldrh	r3, [r7, #6]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006202:	2300      	movs	r3, #0
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	e014      	b.n	8006232 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	601a      	str	r2, [r3, #0]
    pDest++;
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	3301      	adds	r3, #1
 8006218:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	3301      	adds	r3, #1
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	3301      	adds	r3, #1
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	3301      	adds	r3, #1
 800622a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	3301      	adds	r3, #1
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	429a      	cmp	r2, r3
 8006238:	d3e6      	bcc.n	8006208 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800623a:	8bfb      	ldrh	r3, [r7, #30]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d01e      	beq.n	800627e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800624a:	461a      	mov	r2, r3
 800624c:	f107 0310 	add.w	r3, r7, #16
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	fa22 f303 	lsr.w	r3, r2, r3
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	701a      	strb	r2, [r3, #0]
      i++;
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	3301      	adds	r3, #1
 800626a:	623b      	str	r3, [r7, #32]
      pDest++;
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	3301      	adds	r3, #1
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006272:	8bfb      	ldrh	r3, [r7, #30]
 8006274:	3b01      	subs	r3, #1
 8006276:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006278:	8bfb      	ldrh	r3, [r7, #30]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1ea      	bne.n	8006254 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006280:	4618      	mov	r0, r3
 8006282:	372c      	adds	r7, #44	@ 0x2c
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d12c      	bne.n	8006302 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	db12      	blt.n	80062e0 <USB_EPSetStall+0x54>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00f      	beq.n	80062e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	e02b      	b.n	800635a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db12      	blt.n	800633a <USB_EPSetStall+0xae>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006334:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006338:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006358:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d128      	bne.n	80063d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	440a      	add	r2, r1
 800639a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	2b03      	cmp	r3, #3
 80063aa:	d003      	beq.n	80063b4 <USB_EPClearStall+0x4c>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	791b      	ldrb	r3, [r3, #4]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d138      	bne.n	8006426 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	e027      	b.n	8006426 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	791b      	ldrb	r3, [r3, #4]
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d003      	beq.n	8006406 <USB_EPClearStall+0x9e>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	791b      	ldrb	r3, [r3, #4]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d10f      	bne.n	8006426 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0151      	lsls	r1, r2, #5
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	440a      	add	r2, r1
 800641c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006424:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006452:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006456:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800649a:	f023 0303 	bic.w	r3, r3, #3
 800649e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ae:	f023 0302 	bic.w	r3, r3, #2
 80064b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064dc:	f023 0303 	bic.w	r3, r3, #3
 80064e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064f0:	f043 0302 	orr.w	r3, r3, #2
 80064f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800651c:	68fb      	ldr	r3, [r7, #12]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	4013      	ands	r3, r2
 800654c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	0c1b      	lsrs	r3, r3, #16
}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	4013      	ands	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	b29b      	uxth	r3, r3
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	4013      	ands	r3, r2
 80065be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065c0:	68bb      	ldr	r3, [r7, #8]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b087      	sub	sp, #28
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	fa22 f303 	lsr.w	r3, r2, r3
 80065fe:	01db      	lsls	r3, r3, #7
 8006600:	b2db      	uxtb	r3, r3
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4013      	ands	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800661c:	68bb      	ldr	r3, [r7, #8]
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0301 	and.w	r3, r3, #1
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006660:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006664:	f023 0307 	bic.w	r3, r3, #7
 8006668:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800667c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	460b      	mov	r3, r1
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	333c      	adds	r3, #60	@ 0x3c
 80066a2:	3304      	adds	r3, #4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4a26      	ldr	r2, [pc, #152]	@ (8006744 <USB_EP0_OutStart+0xb8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d90a      	bls.n	80066c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066c0:	d101      	bne.n	80066c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e037      	b.n	8006736 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066cc:	461a      	mov	r2, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f4:	f043 0318 	orr.w	r3, r3, #24
 80066f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006708:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800670c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d10f      	bne.n	8006734 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800672e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	4f54300a 	.word	0x4f54300a

08006748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3301      	adds	r3, #1
 8006758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006760:	d901      	bls.n	8006766 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e022      	b.n	80067ac <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	daf2      	bge.n	8006754 <USB_CoreReset+0xc>

  count = 10U;
 800676e:	230a      	movs	r3, #10
 8006770:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006772:	e002      	b.n	800677a <USB_CoreReset+0x32>
  {
    count--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3b01      	subs	r3, #1
 8006778:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f9      	bne.n	8006774 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f043 0201 	orr.w	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3301      	adds	r3, #1
 8006790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006798:	d901      	bls.n	800679e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e006      	b.n	80067ac <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d0f0      	beq.n	800678c <USB_CoreReset+0x44>

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067c4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80067c8:	f002 fd1e 	bl	8009208 <USBD_static_malloc>
 80067cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d109      	bne.n	80067e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	32b0      	adds	r2, #176	@ 0xb0
 80067de:	2100      	movs	r1, #0
 80067e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e0d4      	b.n	8006992 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80067e8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80067ec:	2100      	movs	r1, #0
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f002 fd4e 	bl	8009290 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	32b0      	adds	r2, #176	@ 0xb0
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32b0      	adds	r2, #176	@ 0xb0
 800680e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7c1b      	ldrb	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d138      	bne.n	8006892 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006820:	4b5e      	ldr	r3, [pc, #376]	@ (800699c <USBD_CDC_Init+0x1e4>)
 8006822:	7819      	ldrb	r1, [r3, #0]
 8006824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006828:	2202      	movs	r2, #2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f002 fbc9 	bl	8008fc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006830:	4b5a      	ldr	r3, [pc, #360]	@ (800699c <USBD_CDC_Init+0x1e4>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 020f 	and.w	r2, r3, #15
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3323      	adds	r3, #35	@ 0x23
 8006846:	2201      	movs	r2, #1
 8006848:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800684a:	4b55      	ldr	r3, [pc, #340]	@ (80069a0 <USBD_CDC_Init+0x1e8>)
 800684c:	7819      	ldrb	r1, [r3, #0]
 800684e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006852:	2202      	movs	r2, #2
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 fbb4 	bl	8008fc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800685a:	4b51      	ldr	r3, [pc, #324]	@ (80069a0 <USBD_CDC_Init+0x1e8>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006876:	4b4b      	ldr	r3, [pc, #300]	@ (80069a4 <USBD_CDC_Init+0x1ec>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f003 020f 	and.w	r2, r3, #15
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	331c      	adds	r3, #28
 800688c:	2210      	movs	r2, #16
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e035      	b.n	80068fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006892:	4b42      	ldr	r3, [pc, #264]	@ (800699c <USBD_CDC_Init+0x1e4>)
 8006894:	7819      	ldrb	r1, [r3, #0]
 8006896:	2340      	movs	r3, #64	@ 0x40
 8006898:	2202      	movs	r2, #2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f002 fb91 	bl	8008fc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068a0:	4b3e      	ldr	r3, [pc, #248]	@ (800699c <USBD_CDC_Init+0x1e4>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	3323      	adds	r3, #35	@ 0x23
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068ba:	4b39      	ldr	r3, [pc, #228]	@ (80069a0 <USBD_CDC_Init+0x1e8>)
 80068bc:	7819      	ldrb	r1, [r3, #0]
 80068be:	2340      	movs	r3, #64	@ 0x40
 80068c0:	2202      	movs	r2, #2
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f002 fb7d 	bl	8008fc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068c8:	4b35      	ldr	r3, [pc, #212]	@ (80069a0 <USBD_CDC_Init+0x1e8>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	f003 020f 	and.w	r2, r3, #15
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80068e0:	2201      	movs	r2, #1
 80068e2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068e4:	4b2f      	ldr	r3, [pc, #188]	@ (80069a4 <USBD_CDC_Init+0x1ec>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	f003 020f 	and.w	r2, r3, #15
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	331c      	adds	r3, #28
 80068fa:	2210      	movs	r2, #16
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068fe:	4b29      	ldr	r3, [pc, #164]	@ (80069a4 <USBD_CDC_Init+0x1ec>)
 8006900:	7819      	ldrb	r1, [r3, #0]
 8006902:	2308      	movs	r3, #8
 8006904:	2203      	movs	r2, #3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f002 fb5b 	bl	8008fc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800690c:	4b25      	ldr	r3, [pc, #148]	@ (80069a4 <USBD_CDC_Init+0x1ec>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 020f 	and.w	r2, r3, #15
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	3323      	adds	r3, #35	@ 0x23
 8006922:	2201      	movs	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	33b0      	adds	r3, #176	@ 0xb0
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800695c:	2302      	movs	r3, #2
 800695e:	e018      	b.n	8006992 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	7c1b      	ldrb	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006968:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <USBD_CDC_Init+0x1e8>)
 800696a:	7819      	ldrb	r1, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006972:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f002 fc12 	bl	80091a0 <USBD_LL_PrepareReceive>
 800697c:	e008      	b.n	8006990 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800697e:	4b08      	ldr	r3, [pc, #32]	@ (80069a0 <USBD_CDC_Init+0x1e8>)
 8006980:	7819      	ldrb	r1, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006988:	2340      	movs	r3, #64	@ 0x40
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f002 fc08 	bl	80091a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000093 	.word	0x20000093
 80069a0:	20000094 	.word	0x20000094
 80069a4:	20000095 	.word	0x20000095

080069a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80069b4:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa0 <USBD_CDC_DeInit+0xf8>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f002 fb27 	bl	800900e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80069c0:	4b37      	ldr	r3, [pc, #220]	@ (8006aa0 <USBD_CDC_DeInit+0xf8>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	3323      	adds	r3, #35	@ 0x23
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80069da:	4b32      	ldr	r3, [pc, #200]	@ (8006aa4 <USBD_CDC_DeInit+0xfc>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f002 fb14 	bl	800900e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80069e6:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa4 <USBD_CDC_DeInit+0xfc>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	f003 020f 	and.w	r2, r3, #15
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a02:	4b29      	ldr	r3, [pc, #164]	@ (8006aa8 <USBD_CDC_DeInit+0x100>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f002 fb00 	bl	800900e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a0e:	4b26      	ldr	r3, [pc, #152]	@ (8006aa8 <USBD_CDC_DeInit+0x100>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	440b      	add	r3, r1
 8006a22:	3323      	adds	r3, #35	@ 0x23
 8006a24:	2200      	movs	r2, #0
 8006a26:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a28:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa8 <USBD_CDC_DeInit+0x100>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	331c      	adds	r3, #28
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	32b0      	adds	r2, #176	@ 0xb0
 8006a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01f      	beq.n	8006a94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	33b0      	adds	r3, #176	@ 0xb0
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	32b0      	adds	r2, #176	@ 0xb0
 8006a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 fbd4 	bl	8009224 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32b0      	adds	r2, #176	@ 0xb0
 8006a86:	2100      	movs	r1, #0
 8006a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000093 	.word	0x20000093
 8006aa4:	20000094 	.word	0x20000094
 8006aa8:	20000095 	.word	0x20000095

08006aac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	@ 0xb0
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0bf      	b.n	8006c5c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d050      	beq.n	8006b8a <USBD_CDC_Setup+0xde>
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	f040 80af 	bne.w	8006c4c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	88db      	ldrh	r3, [r3, #6]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03a      	beq.n	8006b6c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da1b      	bge.n	8006b38 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	33b0      	adds	r3, #176	@ 0xb0
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b16:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	88d2      	ldrh	r2, [r2, #6]
 8006b1c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	2b07      	cmp	r3, #7
 8006b24:	bf28      	it	cs
 8006b26:	2307      	movcs	r3, #7
 8006b28:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	89fa      	ldrh	r2, [r7, #14]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fda9 	bl	8008688 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b36:	e090      	b.n	8006c5a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	785a      	ldrb	r2, [r3, #1]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	88db      	ldrh	r3, [r3, #6]
 8006b46:	2b3f      	cmp	r3, #63	@ 0x3f
 8006b48:	d803      	bhi.n	8006b52 <USBD_CDC_Setup+0xa6>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	88db      	ldrh	r3, [r3, #6]
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	e000      	b.n	8006b54 <USBD_CDC_Setup+0xa8>
 8006b52:	2240      	movs	r2, #64	@ 0x40
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006b5a:	6939      	ldr	r1, [r7, #16]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006b62:	461a      	mov	r2, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fdbe 	bl	80086e6 <USBD_CtlPrepareRx>
      break;
 8006b6a:	e076      	b.n	8006c5a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	33b0      	adds	r3, #176	@ 0xb0
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	7850      	ldrb	r0, [r2, #1]
 8006b82:	2200      	movs	r2, #0
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	4798      	blx	r3
      break;
 8006b88:	e067      	b.n	8006c5a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b0b      	cmp	r3, #11
 8006b90:	d851      	bhi.n	8006c36 <USBD_CDC_Setup+0x18a>
 8006b92:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <USBD_CDC_Setup+0xec>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bc9 	.word	0x08006bc9
 8006b9c:	08006c45 	.word	0x08006c45
 8006ba0:	08006c37 	.word	0x08006c37
 8006ba4:	08006c37 	.word	0x08006c37
 8006ba8:	08006c37 	.word	0x08006c37
 8006bac:	08006c37 	.word	0x08006c37
 8006bb0:	08006c37 	.word	0x08006c37
 8006bb4:	08006c37 	.word	0x08006c37
 8006bb8:	08006c37 	.word	0x08006c37
 8006bbc:	08006c37 	.word	0x08006c37
 8006bc0:	08006bf3 	.word	0x08006bf3
 8006bc4:	08006c1d 	.word	0x08006c1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d107      	bne.n	8006be4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bd4:	f107 030a 	add.w	r3, r7, #10
 8006bd8:	2202      	movs	r2, #2
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fd53 	bl	8008688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006be2:	e032      	b.n	8006c4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fcd1 	bl	800858e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bec:	2303      	movs	r3, #3
 8006bee:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf0:	e02b      	b.n	8006c4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d107      	bne.n	8006c0e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006bfe:	f107 030d 	add.w	r3, r7, #13
 8006c02:	2201      	movs	r2, #1
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fd3e 	bl	8008688 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c0c:	e01d      	b.n	8006c4a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fcbc 	bl	800858e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c16:	2303      	movs	r3, #3
 8006c18:	75fb      	strb	r3, [r7, #23]
          break;
 8006c1a:	e016      	b.n	8006c4a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d00f      	beq.n	8006c48 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fcaf 	bl	800858e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c30:	2303      	movs	r3, #3
 8006c32:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c34:	e008      	b.n	8006c48 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 fca8 	bl	800858e <USBD_CtlError>
          ret = USBD_FAIL;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	75fb      	strb	r3, [r7, #23]
          break;
 8006c42:	e002      	b.n	8006c4a <USBD_CDC_Setup+0x19e>
          break;
 8006c44:	bf00      	nop
 8006c46:	e008      	b.n	8006c5a <USBD_CDC_Setup+0x1ae>
          break;
 8006c48:	bf00      	nop
      }
      break;
 8006c4a:	e006      	b.n	8006c5a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fc9d 	bl	800858e <USBD_CtlError>
      ret = USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006c76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32b0      	adds	r2, #176	@ 0xb0
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e065      	b.n	8006d5a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	32b0      	adds	r2, #176	@ 0xb0
 8006c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	440b      	add	r3, r1
 8006cb0:	3314      	adds	r3, #20
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02f      	beq.n	8006d18 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	f003 020f 	and.w	r2, r3, #15
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	3314      	adds	r3, #20
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	f003 010f 	and.w	r1, r3, #15
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	440b      	add	r3, r1
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4403      	add	r3, r0
 8006ce0:	331c      	adds	r3, #28
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d112      	bne.n	8006d18 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	3314      	adds	r3, #20
 8006d06:	2200      	movs	r2, #0
 8006d08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d0a:	78f9      	ldrb	r1, [r7, #3]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2200      	movs	r2, #0
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f002 fa24 	bl	800915e <USBD_LL_Transmit>
 8006d16:	e01f      	b.n	8006d58 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	33b0      	adds	r3, #176	@ 0xb0
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	33b0      	adds	r3, #176	@ 0xb0
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	32b0      	adds	r2, #176	@ 0xb0
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	32b0      	adds	r2, #176	@ 0xb0
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e01a      	b.n	8006dca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f002 fa22 	bl	80091e2 <USBD_LL_GetRxDataSize>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	33b0      	adds	r3, #176	@ 0xb0
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	32b0      	adds	r2, #176	@ 0xb0
 8006de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e024      	b.n	8006e3e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	33b0      	adds	r3, #176	@ 0xb0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d019      	beq.n	8006e3c <USBD_CDC_EP0_RxReady+0x6a>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006e0e:	2bff      	cmp	r3, #255	@ 0xff
 8006e10:	d014      	beq.n	8006e3c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	33b0      	adds	r3, #176	@ 0xb0
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e2a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	22ff      	movs	r2, #255	@ 0xff
 8006e38:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e50:	2182      	movs	r1, #130	@ 0x82
 8006e52:	4818      	ldr	r0, [pc, #96]	@ (8006eb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e54:	f000 fd62 	bl	800791c <USBD_GetEpDesc>
 8006e58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	4815      	ldr	r0, [pc, #84]	@ (8006eb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e5e:	f000 fd5d 	bl	800791c <USBD_GetEpDesc>
 8006e62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e64:	2181      	movs	r1, #129	@ 0x81
 8006e66:	4813      	ldr	r0, [pc, #76]	@ (8006eb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e68:	f000 fd58 	bl	800791c <USBD_GetEpDesc>
 8006e6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2210      	movs	r2, #16
 8006e78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e88:	711a      	strb	r2, [r3, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e9c:	711a      	strb	r2, [r3, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2243      	movs	r2, #67	@ 0x43
 8006ea6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ea8:	4b02      	ldr	r3, [pc, #8]	@ (8006eb4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000050 	.word	0x20000050

08006eb8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ec0:	2182      	movs	r1, #130	@ 0x82
 8006ec2:	4818      	ldr	r0, [pc, #96]	@ (8006f24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ec4:	f000 fd2a 	bl	800791c <USBD_GetEpDesc>
 8006ec8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4815      	ldr	r0, [pc, #84]	@ (8006f24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ece:	f000 fd25 	bl	800791c <USBD_GetEpDesc>
 8006ed2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ed4:	2181      	movs	r1, #129	@ 0x81
 8006ed6:	4813      	ldr	r0, [pc, #76]	@ (8006f24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ed8:	f000 fd20 	bl	800791c <USBD_GetEpDesc>
 8006edc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	711a      	strb	r2, [r3, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f042 0202 	orr.w	r2, r2, #2
 8006efc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	711a      	strb	r2, [r3, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f042 0202 	orr.w	r2, r2, #2
 8006f10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2243      	movs	r2, #67	@ 0x43
 8006f16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f18:	4b02      	ldr	r3, [pc, #8]	@ (8006f24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000050 	.word	0x20000050

08006f28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f30:	2182      	movs	r1, #130	@ 0x82
 8006f32:	4818      	ldr	r0, [pc, #96]	@ (8006f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f34:	f000 fcf2 	bl	800791c <USBD_GetEpDesc>
 8006f38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	4815      	ldr	r0, [pc, #84]	@ (8006f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f3e:	f000 fced 	bl	800791c <USBD_GetEpDesc>
 8006f42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f44:	2181      	movs	r1, #129	@ 0x81
 8006f46:	4813      	ldr	r0, [pc, #76]	@ (8006f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f48:	f000 fce8 	bl	800791c <USBD_GetEpDesc>
 8006f4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2210      	movs	r2, #16
 8006f58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f68:	711a      	strb	r2, [r3, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f7c:	711a      	strb	r2, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2243      	movs	r2, #67	@ 0x43
 8006f86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f88:	4b02      	ldr	r3, [pc, #8]	@ (8006f94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000050 	.word	0x20000050

08006f98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	220a      	movs	r2, #10
 8006fa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006fa6:	4b03      	ldr	r3, [pc, #12]	@ (8006fb4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	2000000c 	.word	0x2000000c

08006fb8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e009      	b.n	8006fe0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	33b0      	adds	r3, #176	@ 0xb0
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	32b0      	adds	r2, #176	@ 0xb0
 8007002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007006:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	e008      	b.n	8007024 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32b0      	adds	r2, #176	@ 0xb0
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	e004      	b.n	800705e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	@ 0xb0
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007084:	2301      	movs	r3, #1
 8007086:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	e025      	b.n	80070de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007098:	2b00      	cmp	r3, #0
 800709a:	d11f      	bne.n	80070dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2201      	movs	r2, #1
 80070a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80070a4:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <USBD_CDC_TransmitPacket+0x7c>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4403      	add	r3, r0
 80070be:	3314      	adds	r3, #20
 80070c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80070c2:	4b09      	ldr	r3, [pc, #36]	@ (80070e8 <USBD_CDC_TransmitPacket+0x7c>)
 80070c4:	7819      	ldrb	r1, [r3, #0]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f002 f843 	bl	800915e <USBD_LL_Transmit>

    ret = USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000093 	.word	0x20000093

080070ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	32b0      	adds	r2, #176	@ 0xb0
 80070fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007102:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32b0      	adds	r2, #176	@ 0xb0
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007116:	2303      	movs	r3, #3
 8007118:	e018      	b.n	800714c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7c1b      	ldrb	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <USBD_CDC_ReceivePacket+0x68>)
 8007124:	7819      	ldrb	r1, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800712c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f002 f835 	bl	80091a0 <USBD_LL_PrepareReceive>
 8007136:	e008      	b.n	800714a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <USBD_CDC_ReceivePacket+0x68>)
 800713a:	7819      	ldrb	r1, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007142:	2340      	movs	r3, #64	@ 0x40
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f002 f82b 	bl	80091a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000094 	.word	0x20000094

08007158 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800716c:	2303      	movs	r3, #3
 800716e:	e01f      	b.n	80071b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	79fa      	ldrb	r2, [r7, #7]
 80071a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f001 fea5 	bl	8008ef4 <USBD_LL_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e025      	b.n	800721c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	32ae      	adds	r2, #174	@ 0xae
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00f      	beq.n	800720c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	32ae      	adds	r2, #174	@ 0xae
 80071f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fc:	f107 020e 	add.w	r2, r7, #14
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	4602      	mov	r2, r0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 fead 	bl	8008f8c <USBD_LL_Start>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d009      	beq.n	8007280 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	4611      	mov	r1, r2
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f922 	bl	800851a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d01a      	beq.n	8007330 <USBD_LL_SetupStage+0x72>
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d822      	bhi.n	8007344 <USBD_LL_SetupStage+0x86>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <USBD_LL_SetupStage+0x4a>
 8007302:	2b01      	cmp	r3, #1
 8007304:	d00a      	beq.n	800731c <USBD_LL_SetupStage+0x5e>
 8007306:	e01d      	b.n	8007344 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fb77 	bl	8007a04 <USBD_StdDevReq>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
      break;
 800731a:	e020      	b.n	800735e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 fbdf 	bl	8007ae8 <USBD_StdItfReq>
 800732a:	4603      	mov	r3, r0
 800732c:	73fb      	strb	r3, [r7, #15]
      break;
 800732e:	e016      	b.n	800735e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc41 	bl	8007bc0 <USBD_StdEPReq>
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]
      break;
 8007342:	e00c      	b.n	800735e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800734a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800734e:	b2db      	uxtb	r3, r3
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 fe7a 	bl	800904c <USBD_LL_StallEP>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	bf00      	nop
  }

  return ret;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	460b      	mov	r3, r1
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d177      	bne.n	8007470 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007386:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800738e:	2b03      	cmp	r3, #3
 8007390:	f040 80a1 	bne.w	80074d6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	8992      	ldrh	r2, [r2, #12]
 800739c:	4293      	cmp	r3, r2
 800739e:	d91c      	bls.n	80073da <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	8992      	ldrh	r2, [r2, #12]
 80073a8:	1a9a      	subs	r2, r3, r2
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	8992      	ldrh	r2, [r2, #12]
 80073b6:	441a      	add	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6919      	ldr	r1, [r3, #16]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	899b      	ldrh	r3, [r3, #12]
 80073c4:	461a      	mov	r2, r3
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bf38      	it	cc
 80073ce:	4613      	movcc	r3, r2
 80073d0:	461a      	mov	r2, r3
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 f9a8 	bl	8008728 <USBD_CtlContinueRx>
 80073d8:	e07d      	b.n	80074d6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d014      	beq.n	8007412 <USBD_LL_DataOutStage+0xaa>
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d81d      	bhi.n	8007428 <USBD_LL_DataOutStage+0xc0>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <USBD_LL_DataOutStage+0x8e>
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d003      	beq.n	80073fc <USBD_LL_DataOutStage+0x94>
 80073f4:	e018      	b.n	8007428 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	75bb      	strb	r3, [r7, #22]
            break;
 80073fa:	e018      	b.n	800742e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007402:	b2db      	uxtb	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fa6e 	bl	80078e8 <USBD_CoreFindIF>
 800740c:	4603      	mov	r3, r0
 800740e:	75bb      	strb	r3, [r7, #22]
            break;
 8007410:	e00d      	b.n	800742e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007418:	b2db      	uxtb	r3, r3
 800741a:	4619      	mov	r1, r3
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fa70 	bl	8007902 <USBD_CoreFindEP>
 8007422:	4603      	mov	r3, r0
 8007424:	75bb      	strb	r3, [r7, #22]
            break;
 8007426:	e002      	b.n	800742e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	75bb      	strb	r3, [r7, #22]
            break;
 800742c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800742e:	7dbb      	ldrb	r3, [r7, #22]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d119      	bne.n	8007468 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d113      	bne.n	8007468 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007440:	7dba      	ldrb	r2, [r7, #22]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	32ae      	adds	r2, #174	@ 0xae
 8007446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007450:	7dba      	ldrb	r2, [r7, #22]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007458:	7dba      	ldrb	r2, [r7, #22]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	32ae      	adds	r2, #174	@ 0xae
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f001 f96e 	bl	800874a <USBD_CtlSendStatus>
 800746e:	e032      	b.n	80074d6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007470:	7afb      	ldrb	r3, [r7, #11]
 8007472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007476:	b2db      	uxtb	r3, r3
 8007478:	4619      	mov	r1, r3
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 fa41 	bl	8007902 <USBD_CoreFindEP>
 8007480:	4603      	mov	r3, r0
 8007482:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007484:	7dbb      	ldrb	r3, [r7, #22]
 8007486:	2bff      	cmp	r3, #255	@ 0xff
 8007488:	d025      	beq.n	80074d6 <USBD_LL_DataOutStage+0x16e>
 800748a:	7dbb      	ldrb	r3, [r7, #22]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d122      	bne.n	80074d6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b03      	cmp	r3, #3
 800749a:	d117      	bne.n	80074cc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800749c:	7dba      	ldrb	r2, [r7, #22]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	32ae      	adds	r2, #174	@ 0xae
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00f      	beq.n	80074cc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80074ac:	7dba      	ldrb	r2, [r7, #22]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80074b4:	7dba      	ldrb	r2, [r7, #22]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	32ae      	adds	r2, #174	@ 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	7afa      	ldrb	r2, [r7, #11]
 80074c2:	4611      	mov	r1, r2
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	4798      	blx	r3
 80074c8:	4603      	mov	r3, r0
 80074ca:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	e000      	b.n	80074d8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	460b      	mov	r3, r1
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d178      	bne.n	80075e6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3314      	adds	r3, #20
 80074f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007500:	2b02      	cmp	r3, #2
 8007502:	d163      	bne.n	80075cc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	8992      	ldrh	r2, [r2, #12]
 800750c:	4293      	cmp	r3, r2
 800750e:	d91c      	bls.n	800754a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	8992      	ldrh	r2, [r2, #12]
 8007518:	1a9a      	subs	r2, r3, r2
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	8992      	ldrh	r2, [r2, #12]
 8007526:	441a      	add	r2, r3
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6919      	ldr	r1, [r3, #16]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	461a      	mov	r2, r3
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f001 f8c4 	bl	80086c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800753c:	2300      	movs	r3, #0
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 fe2c 	bl	80091a0 <USBD_LL_PrepareReceive>
 8007548:	e040      	b.n	80075cc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	899b      	ldrh	r3, [r3, #12]
 800754e:	461a      	mov	r2, r3
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	d11c      	bne.n	8007592 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007560:	4293      	cmp	r3, r2
 8007562:	d316      	bcc.n	8007592 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800756e:	429a      	cmp	r2, r3
 8007570:	d20f      	bcs.n	8007592 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f001 f8a4 	bl	80086c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007584:	2300      	movs	r3, #0
 8007586:	2200      	movs	r2, #0
 8007588:	2100      	movs	r1, #0
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f001 fe08 	bl	80091a0 <USBD_LL_PrepareReceive>
 8007590:	e01c      	b.n	80075cc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b03      	cmp	r3, #3
 800759c:	d10f      	bne.n	80075be <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d009      	beq.n	80075be <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075be:	2180      	movs	r1, #128	@ 0x80
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f001 fd43 	bl	800904c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f001 f8d2 	bl	8008770 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d03a      	beq.n	800764c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fe30 	bl	800723c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80075e4:	e032      	b.n	800764c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	4619      	mov	r1, r3
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 f986 	bl	8007902 <USBD_CoreFindEP>
 80075f6:	4603      	mov	r3, r0
 80075f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075fa:	7dfb      	ldrb	r3, [r7, #23]
 80075fc:	2bff      	cmp	r3, #255	@ 0xff
 80075fe:	d025      	beq.n	800764c <USBD_LL_DataInStage+0x16c>
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d122      	bne.n	800764c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d11c      	bne.n	800764c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007612:	7dfa      	ldrb	r2, [r7, #23]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	32ae      	adds	r2, #174	@ 0xae
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d014      	beq.n	800764c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007622:	7dfa      	ldrb	r2, [r7, #23]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800762a:	7dfa      	ldrb	r2, [r7, #23]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	32ae      	adds	r2, #174	@ 0xae
 8007630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	7afa      	ldrb	r2, [r7, #11]
 8007638:	4611      	mov	r1, r2
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	4798      	blx	r3
 800763e:	4603      	mov	r3, r0
 8007640:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007642:	7dbb      	ldrb	r3, [r7, #22]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007648:	7dbb      	ldrb	r3, [r7, #22]
 800764a:	e000      	b.n	800764e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d014      	beq.n	80076bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00e      	beq.n	80076bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6852      	ldr	r2, [r2, #4]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	4611      	mov	r1, r2
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076bc:	2340      	movs	r3, #64	@ 0x40
 80076be:	2200      	movs	r2, #0
 80076c0:	2100      	movs	r1, #0
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f001 fc7d 	bl	8008fc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2240      	movs	r2, #64	@ 0x40
 80076d4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076d8:	2340      	movs	r3, #64	@ 0x40
 80076da:	2200      	movs	r2, #0
 80076dc:	2180      	movs	r1, #128	@ 0x80
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fc6f 	bl	8008fc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2240      	movs	r2, #64	@ 0x40
 80076f0:	841a      	strh	r2, [r3, #32]

  return ret;
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b04      	cmp	r3, #4
 800772e:	d006      	beq.n	800773e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007736:	b2da      	uxtb	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2204      	movs	r2, #4
 8007742:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b04      	cmp	r3, #4
 8007766:	d106      	bne.n	8007776 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800776e:	b2da      	uxtb	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b03      	cmp	r3, #3
 8007796:	d110      	bne.n	80077ba <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00b      	beq.n	80077ba <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32ae      	adds	r2, #174	@ 0xae
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e01c      	b.n	8007820 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d115      	bne.n	800781e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	32ae      	adds	r2, #174	@ 0xae
 80077fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	32ae      	adds	r2, #174	@ 0xae
 8007810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	78fa      	ldrb	r2, [r7, #3]
 8007818:	4611      	mov	r1, r2
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32ae      	adds	r2, #174	@ 0xae
 800783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007846:	2303      	movs	r3, #3
 8007848:	e01c      	b.n	8007884 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b03      	cmp	r3, #3
 8007854:	d115      	bne.n	8007882 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	32ae      	adds	r2, #174	@ 0xae
 8007860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	32ae      	adds	r2, #174	@ 0xae
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	4611      	mov	r1, r2
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00e      	beq.n	80078de <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6852      	ldr	r2, [r2, #4]
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	4611      	mov	r1, r2
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80078da:	2303      	movs	r3, #3
 80078dc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800790e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	885b      	ldrh	r3, [r3, #2]
 8007938:	b29b      	uxth	r3, r3
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	7812      	ldrb	r2, [r2, #0]
 800793e:	4293      	cmp	r3, r2
 8007940:	d91f      	bls.n	8007982 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007948:	e013      	b.n	8007972 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800794a:	f107 030a 	add.w	r3, r7, #10
 800794e:	4619      	mov	r1, r3
 8007950:	6978      	ldr	r0, [r7, #20]
 8007952:	f000 f81b 	bl	800798c <USBD_GetNextDesc>
 8007956:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	785b      	ldrb	r3, [r3, #1]
 800795c:	2b05      	cmp	r3, #5
 800795e:	d108      	bne.n	8007972 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	789b      	ldrb	r3, [r3, #2]
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	429a      	cmp	r2, r3
 800796c:	d008      	beq.n	8007980 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	885b      	ldrh	r3, [r3, #2]
 8007976:	b29a      	uxth	r2, r3
 8007978:	897b      	ldrh	r3, [r7, #10]
 800797a:	429a      	cmp	r2, r3
 800797c:	d8e5      	bhi.n	800794a <USBD_GetEpDesc+0x2e>
 800797e:	e000      	b.n	8007982 <USBD_GetEpDesc+0x66>
          break;
 8007980:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007982:	693b      	ldr	r3, [r7, #16]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80079b6:	68fb      	ldr	r3, [r7, #12]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	3301      	adds	r3, #1
 80079da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	b21a      	sxth	r2, r3
 80079ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b21b      	sxth	r3, r3
 80079f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079f4:	89fb      	ldrh	r3, [r7, #14]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a1a:	2b40      	cmp	r3, #64	@ 0x40
 8007a1c:	d005      	beq.n	8007a2a <USBD_StdDevReq+0x26>
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	d857      	bhi.n	8007ad2 <USBD_StdDevReq+0xce>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00f      	beq.n	8007a46 <USBD_StdDevReq+0x42>
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d153      	bne.n	8007ad2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	32ae      	adds	r2, #174	@ 0xae
 8007a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	4798      	blx	r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	e04a      	b.n	8007adc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	2b09      	cmp	r3, #9
 8007a4c:	d83b      	bhi.n	8007ac6 <USBD_StdDevReq+0xc2>
 8007a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a54 <USBD_StdDevReq+0x50>)
 8007a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007abd 	.word	0x08007abd
 8007a5c:	08007ac7 	.word	0x08007ac7
 8007a60:	08007ab3 	.word	0x08007ab3
 8007a64:	08007ac7 	.word	0x08007ac7
 8007a68:	08007a87 	.word	0x08007a87
 8007a6c:	08007a7d 	.word	0x08007a7d
 8007a70:	08007ac7 	.word	0x08007ac7
 8007a74:	08007a9f 	.word	0x08007a9f
 8007a78:	08007a91 	.word	0x08007a91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa3e 	bl	8007f00 <USBD_GetDescriptor>
          break;
 8007a84:	e024      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fba3 	bl	80081d4 <USBD_SetAddress>
          break;
 8007a8e:	e01f      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fbe2 	bl	800825c <USBD_SetConfig>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73fb      	strb	r3, [r7, #15]
          break;
 8007a9c:	e018      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc85 	bl	80083b0 <USBD_GetConfig>
          break;
 8007aa6:	e013      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fcb6 	bl	800841c <USBD_GetStatus>
          break;
 8007ab0:	e00e      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fce5 	bl	8008484 <USBD_SetFeature>
          break;
 8007aba:	e009      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fd09 	bl	80084d6 <USBD_ClrFeature>
          break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fd60 	bl	800858e <USBD_CtlError>
          break;
 8007ace:	bf00      	nop
      }
      break;
 8007ad0:	e004      	b.n	8007adc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd5a 	bl	800858e <USBD_CtlError>
      break;
 8007ada:	bf00      	nop
  }

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop

08007ae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007afe:	2b40      	cmp	r3, #64	@ 0x40
 8007b00:	d005      	beq.n	8007b0e <USBD_StdItfReq+0x26>
 8007b02:	2b40      	cmp	r3, #64	@ 0x40
 8007b04:	d852      	bhi.n	8007bac <USBD_StdItfReq+0xc4>
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <USBD_StdItfReq+0x26>
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d14e      	bne.n	8007bac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d840      	bhi.n	8007b9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	889b      	ldrh	r3, [r3, #4]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d836      	bhi.n	8007b94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	889b      	ldrh	r3, [r3, #4]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff feda 	bl	80078e8 <USBD_CoreFindIF>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2bff      	cmp	r3, #255	@ 0xff
 8007b3c:	d01d      	beq.n	8007b7a <USBD_StdItfReq+0x92>
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d11a      	bne.n	8007b7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b44:	7bba      	ldrb	r2, [r7, #14]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32ae      	adds	r2, #174	@ 0xae
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00f      	beq.n	8007b74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b54:	7bba      	ldrb	r2, [r7, #14]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b5c:	7bba      	ldrb	r2, [r7, #14]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	32ae      	adds	r2, #174	@ 0xae
 8007b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b72:	e004      	b.n	8007b7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b74:	2303      	movs	r3, #3
 8007b76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b78:	e001      	b.n	8007b7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d110      	bne.n	8007ba8 <USBD_StdItfReq+0xc0>
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10d      	bne.n	8007ba8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fddc 	bl	800874a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b92:	e009      	b.n	8007ba8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fcf9 	bl	800858e <USBD_CtlError>
          break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fcf4 	bl	800858e <USBD_CtlError>
          break;
 8007ba6:	e000      	b.n	8007baa <USBD_StdItfReq+0xc2>
          break;
 8007ba8:	bf00      	nop
      }
      break;
 8007baa:	e004      	b.n	8007bb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fced 	bl	800858e <USBD_CtlError>
      break;
 8007bb4:	bf00      	nop
  }

  return ret;
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	889b      	ldrh	r3, [r3, #4]
 8007bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bdc:	2b40      	cmp	r3, #64	@ 0x40
 8007bde:	d007      	beq.n	8007bf0 <USBD_StdEPReq+0x30>
 8007be0:	2b40      	cmp	r3, #64	@ 0x40
 8007be2:	f200 8181 	bhi.w	8007ee8 <USBD_StdEPReq+0x328>
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d02a      	beq.n	8007c40 <USBD_StdEPReq+0x80>
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	f040 817c 	bne.w	8007ee8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fe84 	bl	8007902 <USBD_CoreFindEP>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bfe:	7b7b      	ldrb	r3, [r7, #13]
 8007c00:	2bff      	cmp	r3, #255	@ 0xff
 8007c02:	f000 8176 	beq.w	8007ef2 <USBD_StdEPReq+0x332>
 8007c06:	7b7b      	ldrb	r3, [r7, #13]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f040 8172 	bne.w	8007ef2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007c0e:	7b7a      	ldrb	r2, [r7, #13]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c16:	7b7a      	ldrb	r2, [r7, #13]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	32ae      	adds	r2, #174	@ 0xae
 8007c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 8165 	beq.w	8007ef2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c28:	7b7a      	ldrb	r2, [r7, #13]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32ae      	adds	r2, #174	@ 0xae
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c3e:	e158      	b.n	8007ef2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	785b      	ldrb	r3, [r3, #1]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d008      	beq.n	8007c5a <USBD_StdEPReq+0x9a>
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	f300 8147 	bgt.w	8007edc <USBD_StdEPReq+0x31c>
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 809b 	beq.w	8007d8a <USBD_StdEPReq+0x1ca>
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d03c      	beq.n	8007cd2 <USBD_StdEPReq+0x112>
 8007c58:	e140      	b.n	8007edc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d002      	beq.n	8007c6c <USBD_StdEPReq+0xac>
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d016      	beq.n	8007c98 <USBD_StdEPReq+0xd8>
 8007c6a:	e02c      	b.n	8007cc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <USBD_StdEPReq+0xce>
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b80      	cmp	r3, #128	@ 0x80
 8007c76:	d00a      	beq.n	8007c8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f9e5 	bl	800904c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c82:	2180      	movs	r1, #128	@ 0x80
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f9e1 	bl	800904c <USBD_LL_StallEP>
 8007c8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c8c:	e020      	b.n	8007cd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc7c 	bl	800858e <USBD_CtlError>
              break;
 8007c96:	e01b      	b.n	8007cd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	885b      	ldrh	r3, [r3, #2]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10e      	bne.n	8007cbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <USBD_StdEPReq+0xfe>
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b80      	cmp	r3, #128	@ 0x80
 8007caa:	d008      	beq.n	8007cbe <USBD_StdEPReq+0xfe>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	88db      	ldrh	r3, [r3, #6]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f9c7 	bl	800904c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fd43 	bl	800874a <USBD_CtlSendStatus>

              break;
 8007cc4:	e004      	b.n	8007cd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc60 	bl	800858e <USBD_CtlError>
              break;
 8007cce:	bf00      	nop
          }
          break;
 8007cd0:	e109      	b.n	8007ee6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d002      	beq.n	8007ce4 <USBD_StdEPReq+0x124>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d016      	beq.n	8007d10 <USBD_StdEPReq+0x150>
 8007ce2:	e04b      	b.n	8007d7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00d      	beq.n	8007d06 <USBD_StdEPReq+0x146>
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b80      	cmp	r3, #128	@ 0x80
 8007cee:	d00a      	beq.n	8007d06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 f9a9 	bl	800904c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cfa:	2180      	movs	r1, #128	@ 0x80
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f9a5 	bl	800904c <USBD_LL_StallEP>
 8007d02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d04:	e040      	b.n	8007d88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fc40 	bl	800858e <USBD_CtlError>
              break;
 8007d0e:	e03b      	b.n	8007d88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	885b      	ldrh	r3, [r3, #2]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d136      	bne.n	8007d86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d004      	beq.n	8007d2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 f9af 	bl	800908a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fd0c 	bl	800874a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff fde3 	bl	8007902 <USBD_CoreFindEP>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d40:	7b7b      	ldrb	r3, [r7, #13]
 8007d42:	2bff      	cmp	r3, #255	@ 0xff
 8007d44:	d01f      	beq.n	8007d86 <USBD_StdEPReq+0x1c6>
 8007d46:	7b7b      	ldrb	r3, [r7, #13]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d11c      	bne.n	8007d86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d4c:	7b7a      	ldrb	r2, [r7, #13]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d54:	7b7a      	ldrb	r2, [r7, #13]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32ae      	adds	r2, #174	@ 0xae
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d010      	beq.n	8007d86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d64:	7b7a      	ldrb	r2, [r7, #13]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	32ae      	adds	r2, #174	@ 0xae
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d7a:	e004      	b.n	8007d86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fc05 	bl	800858e <USBD_CtlError>
              break;
 8007d84:	e000      	b.n	8007d88 <USBD_StdEPReq+0x1c8>
              break;
 8007d86:	bf00      	nop
          }
          break;
 8007d88:	e0ad      	b.n	8007ee6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d002      	beq.n	8007d9c <USBD_StdEPReq+0x1dc>
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d033      	beq.n	8007e02 <USBD_StdEPReq+0x242>
 8007d9a:	e099      	b.n	8007ed0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <USBD_StdEPReq+0x1f2>
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b80      	cmp	r3, #128	@ 0x80
 8007da6:	d004      	beq.n	8007db2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fbef 	bl	800858e <USBD_CtlError>
                break;
 8007db0:	e093      	b.n	8007eda <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007db2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da0b      	bge.n	8007dd2 <USBD_StdEPReq+0x212>
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
 8007dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	3310      	adds	r3, #16
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	3304      	adds	r3, #4
 8007dd0:	e00b      	b.n	8007dea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	4413      	add	r3, r2
 8007de8:	3304      	adds	r3, #4
 8007dea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2200      	movs	r2, #0
 8007df0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	330e      	adds	r3, #14
 8007df6:	2202      	movs	r2, #2
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fc44 	bl	8008688 <USBD_CtlSendData>
              break;
 8007e00:	e06b      	b.n	8007eda <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	da11      	bge.n	8007e2e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
 8007e0c:	f003 020f 	and.w	r2, r3, #15
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	440b      	add	r3, r1
 8007e1c:	3323      	adds	r3, #35	@ 0x23
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d117      	bne.n	8007e54 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 fbb1 	bl	800858e <USBD_CtlError>
                  break;
 8007e2c:	e055      	b.n	8007eda <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	f003 020f 	and.w	r2, r3, #15
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fb9e 	bl	800858e <USBD_CtlError>
                  break;
 8007e52:	e042      	b.n	8007eda <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da0b      	bge.n	8007e74 <USBD_StdEPReq+0x2b4>
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e62:	4613      	mov	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	3310      	adds	r3, #16
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	e00b      	b.n	8007e8c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <USBD_StdEPReq+0x2da>
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b80      	cmp	r3, #128	@ 0x80
 8007e98:	d103      	bne.n	8007ea2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	739a      	strb	r2, [r3, #14]
 8007ea0:	e00e      	b.n	8007ec0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 f90e 	bl	80090c8 <USBD_LL_IsStallEP>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	739a      	strb	r2, [r3, #14]
 8007eb8:	e002      	b.n	8007ec0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	330e      	adds	r3, #14
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fbdd 	bl	8008688 <USBD_CtlSendData>
              break;
 8007ece:	e004      	b.n	8007eda <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fb5b 	bl	800858e <USBD_CtlError>
              break;
 8007ed8:	bf00      	nop
          }
          break;
 8007eda:	e004      	b.n	8007ee6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fb55 	bl	800858e <USBD_CtlError>
          break;
 8007ee4:	bf00      	nop
      }
      break;
 8007ee6:	e005      	b.n	8007ef4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb4f 	bl	800858e <USBD_CtlError>
      break;
 8007ef0:	e000      	b.n	8007ef4 <USBD_StdEPReq+0x334>
      break;
 8007ef2:	bf00      	nop
  }

  return ret;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	2b06      	cmp	r3, #6
 8007f22:	f200 8128 	bhi.w	8008176 <USBD_GetDescriptor+0x276>
 8007f26:	a201      	add	r2, pc, #4	@ (adr r2, 8007f2c <USBD_GetDescriptor+0x2c>)
 8007f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2c:	08007f49 	.word	0x08007f49
 8007f30:	08007f61 	.word	0x08007f61
 8007f34:	08007fa1 	.word	0x08007fa1
 8007f38:	08008177 	.word	0x08008177
 8007f3c:	08008177 	.word	0x08008177
 8007f40:	08008117 	.word	0x08008117
 8007f44:	08008143 	.word	0x08008143
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	7c12      	ldrb	r2, [r2, #16]
 8007f54:	f107 0108 	add.w	r1, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
      break;
 8007f5e:	e112      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7c1b      	ldrb	r3, [r3, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10d      	bne.n	8007f84 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f70:	f107 0208 	add.w	r2, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	2202      	movs	r2, #2
 8007f80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f82:	e100      	b.n	8008186 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	f107 0208 	add.w	r2, r7, #8
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
 8007f94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	701a      	strb	r2, [r3, #0]
      break;
 8007f9e:	e0f2      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	885b      	ldrh	r3, [r3, #2]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	f200 80ac 	bhi.w	8008104 <USBD_GetDescriptor+0x204>
 8007fac:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <USBD_GetDescriptor+0xb4>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08007fcd 	.word	0x08007fcd
 8007fb8:	08008001 	.word	0x08008001
 8007fbc:	08008035 	.word	0x08008035
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	0800809d 	.word	0x0800809d
 8007fc8:	080080d1 	.word	0x080080d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00b      	beq.n	8007ff0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	7c12      	ldrb	r2, [r2, #16]
 8007fe4:	f107 0108 	add.w	r1, r7, #8
 8007fe8:	4610      	mov	r0, r2
 8007fea:	4798      	blx	r3
 8007fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fee:	e091      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 facb 	bl	800858e <USBD_CtlError>
            err++;
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffe:	e089      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008022:	e077      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fab1 	bl	800858e <USBD_CtlError>
            err++;
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	3301      	adds	r3, #1
 8008030:	72fb      	strb	r3, [r7, #11]
          break;
 8008032:	e06f      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	7c12      	ldrb	r2, [r2, #16]
 800804c:	f107 0108 	add.w	r1, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008056:	e05d      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa97 	bl	800858e <USBD_CtlError>
            err++;
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	3301      	adds	r3, #1
 8008064:	72fb      	strb	r3, [r7, #11]
          break;
 8008066:	e055      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	7c12      	ldrb	r2, [r2, #16]
 8008080:	f107 0108 	add.w	r1, r7, #8
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
 8008088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800808a:	e043      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa7d 	bl	800858e <USBD_CtlError>
            err++;
 8008094:	7afb      	ldrb	r3, [r7, #11]
 8008096:	3301      	adds	r3, #1
 8008098:	72fb      	strb	r3, [r7, #11]
          break;
 800809a:	e03b      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080be:	e029      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fa63 	bl	800858e <USBD_CtlError>
            err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
          break;
 80080ce:	e021      	b.n	8008114 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	7c12      	ldrb	r2, [r2, #16]
 80080e8:	f107 0108 	add.w	r1, r7, #8
 80080ec:	4610      	mov	r0, r2
 80080ee:	4798      	blx	r3
 80080f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080f2:	e00f      	b.n	8008114 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa49 	bl	800858e <USBD_CtlError>
            err++;
 80080fc:	7afb      	ldrb	r3, [r7, #11]
 80080fe:	3301      	adds	r3, #1
 8008100:	72fb      	strb	r3, [r7, #11]
          break;
 8008102:	e007      	b.n	8008114 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa41 	bl	800858e <USBD_CtlError>
          err++;
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	3301      	adds	r3, #1
 8008110:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008112:	bf00      	nop
      }
      break;
 8008114:	e037      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	7c1b      	ldrb	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d109      	bne.n	8008132 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008126:	f107 0208 	add.w	r2, r7, #8
 800812a:	4610      	mov	r0, r2
 800812c:	4798      	blx	r3
 800812e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008130:	e029      	b.n	8008186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fa2a 	bl	800858e <USBD_CtlError>
        err++;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	3301      	adds	r3, #1
 800813e:	72fb      	strb	r3, [r7, #11]
      break;
 8008140:	e021      	b.n	8008186 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	7c1b      	ldrb	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10d      	bne.n	8008166 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008152:	f107 0208 	add.w	r2, r7, #8
 8008156:	4610      	mov	r0, r2
 8008158:	4798      	blx	r3
 800815a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3301      	adds	r3, #1
 8008160:	2207      	movs	r2, #7
 8008162:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008164:	e00f      	b.n	8008186 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa10 	bl	800858e <USBD_CtlError>
        err++;
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	3301      	adds	r3, #1
 8008172:	72fb      	strb	r3, [r7, #11]
      break;
 8008174:	e007      	b.n	8008186 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fa08 	bl	800858e <USBD_CtlError>
      err++;
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	3301      	adds	r3, #1
 8008182:	72fb      	strb	r3, [r7, #11]
      break;
 8008184:	bf00      	nop
  }

  if (err != 0U)
 8008186:	7afb      	ldrb	r3, [r7, #11]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11e      	bne.n	80081ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	88db      	ldrh	r3, [r3, #6]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d016      	beq.n	80081c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008194:	893b      	ldrh	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00e      	beq.n	80081b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	88da      	ldrh	r2, [r3, #6]
 800819e:	893b      	ldrh	r3, [r7, #8]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	bf28      	it	cs
 80081a4:	4613      	movcs	r3, r2
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081aa:	893b      	ldrh	r3, [r7, #8]
 80081ac:	461a      	mov	r2, r3
 80081ae:	68f9      	ldr	r1, [r7, #12]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fa69 	bl	8008688 <USBD_CtlSendData>
 80081b6:	e009      	b.n	80081cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9e7 	bl	800858e <USBD_CtlError>
 80081c0:	e004      	b.n	80081cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fac1 	bl	800874a <USBD_CtlSendStatus>
 80081c8:	e000      	b.n	80081cc <USBD_GetDescriptor+0x2cc>
    return;
 80081ca:	bf00      	nop
  }
}
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	889b      	ldrh	r3, [r3, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d131      	bne.n	800824a <USBD_SetAddress+0x76>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	88db      	ldrh	r3, [r3, #6]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d12d      	bne.n	800824a <USBD_SetAddress+0x76>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	885b      	ldrh	r3, [r3, #2]
 80081f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80081f4:	d829      	bhi.n	800824a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008200:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b03      	cmp	r3, #3
 800820c:	d104      	bne.n	8008218 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f9bc 	bl	800858e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008216:	e01d      	b.n	8008254 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	7bfa      	ldrb	r2, [r7, #15]
 800821c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 ff7b 	bl	8009120 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa8d 	bl	800874a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823e:	e009      	b.n	8008254 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008248:	e004      	b.n	8008254 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f99e 	bl	800858e <USBD_CtlError>
  }
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	885b      	ldrh	r3, [r3, #2]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	4b4e      	ldr	r3, [pc, #312]	@ (80083ac <USBD_SetConfig+0x150>)
 8008272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008274:	4b4d      	ldr	r3, [pc, #308]	@ (80083ac <USBD_SetConfig+0x150>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d905      	bls.n	8008288 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f985 	bl	800858e <USBD_CtlError>
    return USBD_FAIL;
 8008284:	2303      	movs	r3, #3
 8008286:	e08c      	b.n	80083a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d002      	beq.n	800829a <USBD_SetConfig+0x3e>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d029      	beq.n	80082ec <USBD_SetConfig+0x90>
 8008298:	e075      	b.n	8008386 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800829a:	4b44      	ldr	r3, [pc, #272]	@ (80083ac <USBD_SetConfig+0x150>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d020      	beq.n	80082e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80082a2:	4b42      	ldr	r3, [pc, #264]	@ (80083ac <USBD_SetConfig+0x150>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80082ac:	4b3f      	ldr	r3, [pc, #252]	@ (80083ac <USBD_SetConfig+0x150>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fe ffcd 	bl	8007252 <USBD_SetClassConfig>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d008      	beq.n	80082d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f962 	bl	800858e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2202      	movs	r2, #2
 80082ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082d2:	e065      	b.n	80083a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fa38 	bl	800874a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2203      	movs	r2, #3
 80082de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80082e2:	e05d      	b.n	80083a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa30 	bl	800874a <USBD_CtlSendStatus>
      break;
 80082ea:	e059      	b.n	80083a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082ec:	4b2f      	ldr	r3, [pc, #188]	@ (80083ac <USBD_SetConfig+0x150>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d112      	bne.n	800831a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80082fc:	4b2b      	ldr	r3, [pc, #172]	@ (80083ac <USBD_SetConfig+0x150>)
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008306:	4b29      	ldr	r3, [pc, #164]	@ (80083ac <USBD_SetConfig+0x150>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7fe ffbc 	bl	800728a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa19 	bl	800874a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008318:	e042      	b.n	80083a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800831a:	4b24      	ldr	r3, [pc, #144]	@ (80083ac <USBD_SetConfig+0x150>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d02a      	beq.n	800837e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7fe ffaa 	bl	800728a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008336:	4b1d      	ldr	r3, [pc, #116]	@ (80083ac <USBD_SetConfig+0x150>)
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008340:	4b1a      	ldr	r3, [pc, #104]	@ (80083ac <USBD_SetConfig+0x150>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fe ff83 	bl	8007252 <USBD_SetClassConfig>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00f      	beq.n	8008376 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f918 	bl	800858e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7fe ff8f 	bl	800728a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008374:	e014      	b.n	80083a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f9e7 	bl	800874a <USBD_CtlSendStatus>
      break;
 800837c:	e010      	b.n	80083a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9e3 	bl	800874a <USBD_CtlSendStatus>
      break;
 8008384:	e00c      	b.n	80083a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f900 	bl	800858e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800838e:	4b07      	ldr	r3, [pc, #28]	@ (80083ac <USBD_SetConfig+0x150>)
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7fe ff78 	bl	800728a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800839a:	2303      	movs	r3, #3
 800839c:	73fb      	strb	r3, [r7, #15]
      break;
 800839e:	bf00      	nop
  }

  return ret;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	200003a4 	.word	0x200003a4

080083b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d004      	beq.n	80083cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f8e2 	bl	800858e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80083ca:	e023      	b.n	8008414 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	dc02      	bgt.n	80083de <USBD_GetConfig+0x2e>
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dc03      	bgt.n	80083e4 <USBD_GetConfig+0x34>
 80083dc:	e015      	b.n	800840a <USBD_GetConfig+0x5a>
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d00b      	beq.n	80083fa <USBD_GetConfig+0x4a>
 80083e2:	e012      	b.n	800840a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3308      	adds	r3, #8
 80083ee:	2201      	movs	r2, #1
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f948 	bl	8008688 <USBD_CtlSendData>
        break;
 80083f8:	e00c      	b.n	8008414 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3304      	adds	r3, #4
 80083fe:	2201      	movs	r2, #1
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f940 	bl	8008688 <USBD_CtlSendData>
        break;
 8008408:	e004      	b.n	8008414 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f8be 	bl	800858e <USBD_CtlError>
        break;
 8008412:	bf00      	nop
}
 8008414:	bf00      	nop
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800842c:	b2db      	uxtb	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	2b02      	cmp	r3, #2
 8008432:	d81e      	bhi.n	8008472 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	88db      	ldrh	r3, [r3, #6]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d004      	beq.n	8008446 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8a5 	bl	800858e <USBD_CtlError>
        break;
 8008444:	e01a      	b.n	800847c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d005      	beq.n	8008462 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f043 0202 	orr.w	r2, r3, #2
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	330c      	adds	r3, #12
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f90c 	bl	8008688 <USBD_CtlSendData>
      break;
 8008470:	e004      	b.n	800847c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f88a 	bl	800858e <USBD_CtlError>
      break;
 800847a:	bf00      	nop
  }
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	885b      	ldrh	r3, [r3, #2]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d107      	bne.n	80084a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f953 	bl	800874a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80084a4:	e013      	b.n	80084ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	885b      	ldrh	r3, [r3, #2]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d10b      	bne.n	80084c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	889b      	ldrh	r3, [r3, #4]
 80084b2:	0a1b      	lsrs	r3, r3, #8
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f943 	bl	800874a <USBD_CtlSendStatus>
}
 80084c4:	e003      	b.n	80084ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f860 	bl	800858e <USBD_CtlError>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d80b      	bhi.n	8008506 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d10c      	bne.n	8008510 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f923 	bl	800874a <USBD_CtlSendStatus>
      }
      break;
 8008504:	e004      	b.n	8008510 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f840 	bl	800858e <USBD_CtlError>
      break;
 800850e:	e000      	b.n	8008512 <USBD_ClrFeature+0x3c>
      break;
 8008510:	bf00      	nop
  }
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	781a      	ldrb	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	781a      	ldrb	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	3301      	adds	r3, #1
 8008542:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7ff fa3d 	bl	80079c4 <SWAPBYTE>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3301      	adds	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fa30 	bl	80079c4 <SWAPBYTE>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff fa23 	bl	80079c4 <SWAPBYTE>
 800857e:	4603      	mov	r3, r0
 8008580:	461a      	mov	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	80da      	strh	r2, [r3, #6]
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b082      	sub	sp, #8
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008598:	2180      	movs	r1, #128	@ 0x80
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fd56 	bl	800904c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80085a0:	2100      	movs	r1, #0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fd52 	bl	800904c <USBD_LL_StallEP>
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d042      	beq.n	800864c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80085ca:	6938      	ldr	r0, [r7, #16]
 80085cc:	f000 f842 	bl	8008654 <USBD_GetLen>
 80085d0:	4603      	mov	r3, r0
 80085d2:	3301      	adds	r3, #1
 80085d4:	005b      	lsls	r3, r3, #1
 80085d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085da:	d808      	bhi.n	80085ee <USBD_GetString+0x3e>
 80085dc:	6938      	ldr	r0, [r7, #16]
 80085de:	f000 f839 	bl	8008654 <USBD_GetLen>
 80085e2:	4603      	mov	r3, r0
 80085e4:	3301      	adds	r3, #1
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	e001      	b.n	80085f2 <USBD_GetString+0x42>
 80085ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	4413      	add	r3, r2
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7812      	ldrb	r2, [r2, #0]
 8008600:	701a      	strb	r2, [r3, #0]
  idx++;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	3301      	adds	r3, #1
 8008606:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	4413      	add	r3, r2
 800860e:	2203      	movs	r2, #3
 8008610:	701a      	strb	r2, [r3, #0]
  idx++;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	3301      	adds	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008618:	e013      	b.n	8008642 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	4413      	add	r3, r2
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	7812      	ldrb	r2, [r2, #0]
 8008624:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	3301      	adds	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
    idx++;
 800862c:	7dfb      	ldrb	r3, [r7, #23]
 800862e:	3301      	adds	r3, #1
 8008630:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	4413      	add	r3, r2
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
    idx++;
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	3301      	adds	r3, #1
 8008640:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e7      	bne.n	800861a <USBD_GetString+0x6a>
 800864a:	e000      	b.n	800864e <USBD_GetString+0x9e>
    return;
 800864c:	bf00      	nop
  }
}
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008664:	e005      	b.n	8008672 <USBD_GetLen+0x1e>
  {
    len++;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	3301      	adds	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3301      	adds	r3, #1
 8008670:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1f5      	bne.n	8008666 <USBD_GetLen+0x12>
  }

  return len;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2202      	movs	r2, #2
 8008698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	2100      	movs	r1, #0
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 fd52 	bl	800915e <USBD_LL_Transmit>

  return USBD_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	2100      	movs	r1, #0
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f000 fd41 	bl	800915e <USBD_LL_Transmit>

  return USBD_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	60b9      	str	r1, [r7, #8]
 80086f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2203      	movs	r2, #3
 80086f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	2100      	movs	r1, #0
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 fd41 	bl	80091a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	2100      	movs	r1, #0
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 fd30 	bl	80091a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2204      	movs	r2, #4
 8008756:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800875a:	2300      	movs	r3, #0
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fcfc 	bl	800915e <USBD_LL_Transmit>

  return USBD_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2205      	movs	r2, #5
 800877c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008780:	2300      	movs	r3, #0
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fd0a 	bl	80091a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800879c:	2200      	movs	r2, #0
 800879e:	4912      	ldr	r1, [pc, #72]	@ (80087e8 <MX_USB_DEVICE_Init+0x50>)
 80087a0:	4812      	ldr	r0, [pc, #72]	@ (80087ec <MX_USB_DEVICE_Init+0x54>)
 80087a2:	f7fe fcd9 	bl	8007158 <USBD_Init>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087ac:	f7f8 f9fe 	bl	8000bac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087b0:	490f      	ldr	r1, [pc, #60]	@ (80087f0 <MX_USB_DEVICE_Init+0x58>)
 80087b2:	480e      	ldr	r0, [pc, #56]	@ (80087ec <MX_USB_DEVICE_Init+0x54>)
 80087b4:	f7fe fd00 	bl	80071b8 <USBD_RegisterClass>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087be:	f7f8 f9f5 	bl	8000bac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087c2:	490c      	ldr	r1, [pc, #48]	@ (80087f4 <MX_USB_DEVICE_Init+0x5c>)
 80087c4:	4809      	ldr	r0, [pc, #36]	@ (80087ec <MX_USB_DEVICE_Init+0x54>)
 80087c6:	f7fe fbf7 	bl	8006fb8 <USBD_CDC_RegisterInterface>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80087d0:	f7f8 f9ec 	bl	8000bac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80087d4:	4805      	ldr	r0, [pc, #20]	@ (80087ec <MX_USB_DEVICE_Init+0x54>)
 80087d6:	f7fe fd25 	bl	8007224 <USBD_Start>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80087e0:	f7f8 f9e4 	bl	8000bac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80087e4:	bf00      	nop
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	200000b4 	.word	0x200000b4
 80087ec:	200003a8 	.word	0x200003a8
 80087f0:	20000018 	.word	0x20000018
 80087f4:	200000a0 	.word	0x200000a0

080087f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80087fc:	2200      	movs	r2, #0
 80087fe:	4905      	ldr	r1, [pc, #20]	@ (8008814 <CDC_Init_FS+0x1c>)
 8008800:	4805      	ldr	r0, [pc, #20]	@ (8008818 <CDC_Init_FS+0x20>)
 8008802:	f7fe fbf3 	bl	8006fec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008806:	4905      	ldr	r1, [pc, #20]	@ (800881c <CDC_Init_FS+0x24>)
 8008808:	4803      	ldr	r0, [pc, #12]	@ (8008818 <CDC_Init_FS+0x20>)
 800880a:	f7fe fc11 	bl	8007030 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800880e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008810:	4618      	mov	r0, r3
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20000884 	.word	0x20000884
 8008818:	200003a8 	.word	0x200003a8
 800881c:	20000684 	.word	0x20000684

08008820 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008820:	b480      	push	{r7}
 8008822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008824:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008826:	4618      	mov	r0, r3
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
 800883c:	4613      	mov	r3, r2
 800883e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	2b23      	cmp	r3, #35	@ 0x23
 8008844:	f200 8098 	bhi.w	8008978 <CDC_Control_FS+0x148>
 8008848:	a201      	add	r2, pc, #4	@ (adr r2, 8008850 <CDC_Control_FS+0x20>)
 800884a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884e:	bf00      	nop
 8008850:	08008979 	.word	0x08008979
 8008854:	08008979 	.word	0x08008979
 8008858:	08008979 	.word	0x08008979
 800885c:	08008979 	.word	0x08008979
 8008860:	08008979 	.word	0x08008979
 8008864:	08008979 	.word	0x08008979
 8008868:	08008979 	.word	0x08008979
 800886c:	08008979 	.word	0x08008979
 8008870:	08008979 	.word	0x08008979
 8008874:	08008979 	.word	0x08008979
 8008878:	08008979 	.word	0x08008979
 800887c:	08008979 	.word	0x08008979
 8008880:	08008979 	.word	0x08008979
 8008884:	08008979 	.word	0x08008979
 8008888:	08008979 	.word	0x08008979
 800888c:	08008979 	.word	0x08008979
 8008890:	08008979 	.word	0x08008979
 8008894:	08008979 	.word	0x08008979
 8008898:	08008979 	.word	0x08008979
 800889c:	08008979 	.word	0x08008979
 80088a0:	08008979 	.word	0x08008979
 80088a4:	08008979 	.word	0x08008979
 80088a8:	08008979 	.word	0x08008979
 80088ac:	08008979 	.word	0x08008979
 80088b0:	08008979 	.word	0x08008979
 80088b4:	08008979 	.word	0x08008979
 80088b8:	08008979 	.word	0x08008979
 80088bc:	08008979 	.word	0x08008979
 80088c0:	08008979 	.word	0x08008979
 80088c4:	08008979 	.word	0x08008979
 80088c8:	08008979 	.word	0x08008979
 80088cc:	08008979 	.word	0x08008979
 80088d0:	080088e1 	.word	0x080088e1
 80088d4:	08008925 	.word	0x08008925
 80088d8:	08008979 	.word	0x08008979
 80088dc:	08008979 	.word	0x08008979
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	3301      	adds	r3, #1
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	431a      	orrs	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	3302      	adds	r3, #2
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	431a      	orrs	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	3303      	adds	r3, #3
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	061b      	lsls	r3, r3, #24
 8008902:	4313      	orrs	r3, r2
 8008904:	461a      	mov	r2, r3
 8008906:	4b20      	ldr	r3, [pc, #128]	@ (8008988 <CDC_Control_FS+0x158>)
 8008908:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	791a      	ldrb	r2, [r3, #4]
 800890e:	4b1e      	ldr	r3, [pc, #120]	@ (8008988 <CDC_Control_FS+0x158>)
 8008910:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	795a      	ldrb	r2, [r3, #5]
 8008916:	4b1c      	ldr	r3, [pc, #112]	@ (8008988 <CDC_Control_FS+0x158>)
 8008918:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	799a      	ldrb	r2, [r3, #6]
 800891e:	4b1a      	ldr	r3, [pc, #104]	@ (8008988 <CDC_Control_FS+0x158>)
 8008920:	719a      	strb	r2, [r3, #6]
    break;
 8008922:	e02a      	b.n	800897a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008924:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <CDC_Control_FS+0x158>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	b2da      	uxtb	r2, r3
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800892e:	4b16      	ldr	r3, [pc, #88]	@ (8008988 <CDC_Control_FS+0x158>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	0a1a      	lsrs	r2, r3, #8
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	b2d2      	uxtb	r2, r2
 800893a:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800893c:	4b12      	ldr	r3, [pc, #72]	@ (8008988 <CDC_Control_FS+0x158>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	0c1a      	lsrs	r2, r3, #16
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	3302      	adds	r3, #2
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800894a:	4b0f      	ldr	r3, [pc, #60]	@ (8008988 <CDC_Control_FS+0x158>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	0e1a      	lsrs	r2, r3, #24
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	3303      	adds	r3, #3
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	3304      	adds	r3, #4
 800895c:	4a0a      	ldr	r2, [pc, #40]	@ (8008988 <CDC_Control_FS+0x158>)
 800895e:	7912      	ldrb	r2, [r2, #4]
 8008960:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	3305      	adds	r3, #5
 8008966:	4a08      	ldr	r2, [pc, #32]	@ (8008988 <CDC_Control_FS+0x158>)
 8008968:	7952      	ldrb	r2, [r2, #5]
 800896a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	3306      	adds	r3, #6
 8008970:	4a05      	ldr	r2, [pc, #20]	@ (8008988 <CDC_Control_FS+0x158>)
 8008972:	7992      	ldrb	r2, [r2, #6]
 8008974:	701a      	strb	r2, [r3, #0]
    break;
 8008976:	e000      	b.n	800897a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008978:	bf00      	nop
  }

  return (USBD_OK);
 800897a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	20000098 	.word	0x20000098

0800898c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if(MyPtrRx != NULL)
 8008996:	4b0b      	ldr	r3, [pc, #44]	@ (80089c4 <CDC_Receive_FS+0x38>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d006      	beq.n	80089ac <CDC_Receive_FS+0x20>
	{
		MyPtrRx(Buf,*Len);
 800899e:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <CDC_Receive_FS+0x38>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	6812      	ldr	r2, [r2, #0]
 80089a6:	4611      	mov	r1, r2
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
	}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4806      	ldr	r0, [pc, #24]	@ (80089c8 <CDC_Receive_FS+0x3c>)
 80089b0:	f7fe fb3e 	bl	8007030 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089b4:	4804      	ldr	r0, [pc, #16]	@ (80089c8 <CDC_Receive_FS+0x3c>)
 80089b6:	f7fe fb99 	bl	80070ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000a84 	.word	0x20000a84
 80089c8:	200003a8 	.word	0x200003a8

080089cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008a14 <CDC_Transmit_FS+0x48>)
 80089de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e00b      	b.n	8008a0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089f2:	887b      	ldrh	r3, [r7, #2]
 80089f4:	461a      	mov	r2, r3
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4806      	ldr	r0, [pc, #24]	@ (8008a14 <CDC_Transmit_FS+0x48>)
 80089fa:	f7fe faf7 	bl	8006fec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089fe:	4805      	ldr	r0, [pc, #20]	@ (8008a14 <CDC_Transmit_FS+0x48>)
 8008a00:	f7fe fb34 	bl	800706c <USBD_CDC_TransmitPacket>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	200003a8 	.word	0x200003a8

08008a18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a26:	2300      	movs	r3, #0
 8008a28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	371c      	adds	r7, #28
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
	...

08008a3c <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008a44:	4a04      	ldr	r2, [pc, #16]	@ (8008a58 <CDC_Attach_Rx+0x1c>)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6013      	str	r3, [r2, #0]
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000a84 	.word	0x20000a84

08008a5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2212      	movs	r2, #18
 8008a6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a6e:	4b03      	ldr	r3, [pc, #12]	@ (8008a7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	200000d0 	.word	0x200000d0

08008a80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	4603      	mov	r3, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2204      	movs	r2, #4
 8008a90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a92:	4b03      	ldr	r3, [pc, #12]	@ (8008aa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	200000e4 	.word	0x200000e4

08008aa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d105      	bne.n	8008ac2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	4907      	ldr	r1, [pc, #28]	@ (8008ad8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008aba:	4808      	ldr	r0, [pc, #32]	@ (8008adc <USBD_FS_ProductStrDescriptor+0x38>)
 8008abc:	f7ff fd78 	bl	80085b0 <USBD_GetString>
 8008ac0:	e004      	b.n	8008acc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	4904      	ldr	r1, [pc, #16]	@ (8008ad8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ac6:	4805      	ldr	r0, [pc, #20]	@ (8008adc <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac8:	f7ff fd72 	bl	80085b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008acc:	4b02      	ldr	r3, [pc, #8]	@ (8008ad8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000a88 	.word	0x20000a88
 8008adc:	08009300 	.word	0x08009300

08008ae0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	4904      	ldr	r1, [pc, #16]	@ (8008b00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008af0:	4804      	ldr	r0, [pc, #16]	@ (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008af2:	f7ff fd5d 	bl	80085b0 <USBD_GetString>
  return USBD_StrDesc;
 8008af6:	4b02      	ldr	r3, [pc, #8]	@ (8008b00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000a88 	.word	0x20000a88
 8008b04:	08009318 	.word	0x08009318

08008b08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	221a      	movs	r2, #26
 8008b18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b1a:	f000 f843 	bl	8008ba4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b1e:	4b02      	ldr	r3, [pc, #8]	@ (8008b28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	200000e8 	.word	0x200000e8

08008b2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	6039      	str	r1, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d105      	bne.n	8008b4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4907      	ldr	r1, [pc, #28]	@ (8008b60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b42:	4808      	ldr	r0, [pc, #32]	@ (8008b64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b44:	f7ff fd34 	bl	80085b0 <USBD_GetString>
 8008b48:	e004      	b.n	8008b54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	4904      	ldr	r1, [pc, #16]	@ (8008b60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b4e:	4805      	ldr	r0, [pc, #20]	@ (8008b64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b50:	f7ff fd2e 	bl	80085b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b54:	4b02      	ldr	r3, [pc, #8]	@ (8008b60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000a88 	.word	0x20000a88
 8008b64:	0800932c 	.word	0x0800932c

08008b68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	4907      	ldr	r1, [pc, #28]	@ (8008b9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b7e:	4808      	ldr	r0, [pc, #32]	@ (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b80:	f7ff fd16 	bl	80085b0 <USBD_GetString>
 8008b84:	e004      	b.n	8008b90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4904      	ldr	r1, [pc, #16]	@ (8008b9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b8a:	4805      	ldr	r0, [pc, #20]	@ (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b8c:	f7ff fd10 	bl	80085b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b90:	4b02      	ldr	r3, [pc, #8]	@ (8008b9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20000a88 	.word	0x20000a88
 8008ba0:	08009338 	.word	0x08009338

08008ba4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008baa:	4b0f      	ldr	r3, [pc, #60]	@ (8008be8 <Get_SerialNum+0x44>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8008bec <Get_SerialNum+0x48>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf0 <Get_SerialNum+0x4c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bca:	2208      	movs	r2, #8
 8008bcc:	4909      	ldr	r1, [pc, #36]	@ (8008bf4 <Get_SerialNum+0x50>)
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f814 	bl	8008bfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bd4:	2204      	movs	r2, #4
 8008bd6:	4908      	ldr	r1, [pc, #32]	@ (8008bf8 <Get_SerialNum+0x54>)
 8008bd8:	68b8      	ldr	r0, [r7, #8]
 8008bda:	f000 f80f 	bl	8008bfc <IntToUnicode>
  }
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	1fff7a10 	.word	0x1fff7a10
 8008bec:	1fff7a14 	.word	0x1fff7a14
 8008bf0:	1fff7a18 	.word	0x1fff7a18
 8008bf4:	200000ea 	.word	0x200000ea
 8008bf8:	200000fa 	.word	0x200000fa

08008bfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c0e:	2300      	movs	r3, #0
 8008c10:	75fb      	strb	r3, [r7, #23]
 8008c12:	e027      	b.n	8008c64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	0f1b      	lsrs	r3, r3, #28
 8008c18:	2b09      	cmp	r3, #9
 8008c1a:	d80b      	bhi.n	8008c34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	0f1b      	lsrs	r3, r3, #28
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	4619      	mov	r1, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	440b      	add	r3, r1
 8008c2c:	3230      	adds	r2, #48	@ 0x30
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	e00a      	b.n	8008c4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	0f1b      	lsrs	r3, r3, #28
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	440b      	add	r3, r1
 8008c44:	3237      	adds	r2, #55	@ 0x37
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c50:	7dfb      	ldrb	r3, [r7, #23]
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	3301      	adds	r3, #1
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	4413      	add	r3, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	3301      	adds	r3, #1
 8008c62:	75fb      	strb	r3, [r7, #23]
 8008c64:	7dfa      	ldrb	r2, [r7, #23]
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d3d3      	bcc.n	8008c14 <IntToUnicode+0x18>
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
	...

08008c7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	@ 0x28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c84:	f107 0314 	add.w	r3, r7, #20
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	605a      	str	r2, [r3, #4]
 8008c8e:	609a      	str	r2, [r3, #8]
 8008c90:	60da      	str	r2, [r3, #12]
 8008c92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c9c:	d13a      	bne.n	8008d14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	613b      	str	r3, [r7, #16]
 8008ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008ca8:	f043 0301 	orr.w	r3, r3, #1
 8008cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8008cae:	4b1b      	ldr	r3, [pc, #108]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008cba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ccc:	230a      	movs	r3, #10
 8008cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cd0:	f107 0314 	add.w	r3, r7, #20
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4812      	ldr	r0, [pc, #72]	@ (8008d20 <HAL_PCD_MspInit+0xa4>)
 8008cd8:	f7f9 fb86 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ce6:	6353      	str	r3, [r2, #52]	@ 0x34
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	4b0b      	ldr	r3, [pc, #44]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cf6:	6453      	str	r3, [r2, #68]	@ 0x44
 8008cf8:	4b08      	ldr	r3, [pc, #32]	@ (8008d1c <HAL_PCD_MspInit+0xa0>)
 8008cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	2043      	movs	r0, #67	@ 0x43
 8008d0a:	f7f8 ffc6 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d0e:	2043      	movs	r0, #67	@ 0x43
 8008d10:	f7f8 ffdf 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d14:	bf00      	nop
 8008d16:	3728      	adds	r7, #40	@ 0x28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	40020000 	.word	0x40020000

08008d24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe fabf 	bl	80072be <USBD_LL_SetupStage>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	4619      	mov	r1, r3
 8008d72:	f7fe faf9 	bl	8007368 <USBD_LL_DataOutStage>
}
 8008d76:	bf00      	nop
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3320      	adds	r3, #32
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	4619      	mov	r1, r3
 8008da6:	f7fe fb9b 	bl	80074e0 <USBD_LL_DataInStage>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b082      	sub	sp, #8
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe fcdf 	bl	8007784 <USBD_LL_SOF>
}
 8008dc6:	bf00      	nop
 8008dc8:	3708      	adds	r7, #8
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	79db      	ldrb	r3, [r3, #7]
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d001      	beq.n	8008de6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008de2:	f7f7 fee3 	bl	8000bac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dec:	7bfa      	ldrb	r2, [r7, #15]
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fc83 	bl	80076fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe fc2a 	bl	8007656 <USBD_LL_Reset>
}
 8008e02:	bf00      	nop
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
	...

08008e0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fe fc7e 	bl	800771c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6812      	ldr	r2, [r2, #0]
 8008e2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e32:	f043 0301 	orr.w	r3, r3, #1
 8008e36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	7adb      	ldrb	r3, [r3, #11]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e40:	4b04      	ldr	r3, [pc, #16]	@ (8008e54 <HAL_PCD_SuspendCallback+0x48>)
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	4a03      	ldr	r2, [pc, #12]	@ (8008e54 <HAL_PCD_SuspendCallback+0x48>)
 8008e46:	f043 0306 	orr.w	r3, r3, #6
 8008e4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	e000ed00 	.word	0xe000ed00

08008e58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fc74 	bl	8007754 <USBD_LL_Resume>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fccc 	bl	8007828 <USBD_LL_IsoOUTIncomplete>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eaa:	78fa      	ldrb	r2, [r7, #3]
 8008eac:	4611      	mov	r1, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7fe fc88 	bl	80077c4 <USBD_LL_IsoINIncomplete>
}
 8008eb4:	bf00      	nop
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fcde 	bl	800788c <USBD_LL_DevConnected>
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fcdb 	bl	80078a2 <USBD_LL_DevDisconnected>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d13c      	bne.n	8008f7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f04:	4a20      	ldr	r2, [pc, #128]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f14:	4b1c      	ldr	r3, [pc, #112]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f1e:	2204      	movs	r2, #4
 8008f20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f22:	4b19      	ldr	r3, [pc, #100]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f24:	2202      	movs	r2, #2
 8008f26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f28:	4b17      	ldr	r3, [pc, #92]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f2e:	4b16      	ldr	r3, [pc, #88]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f30:	2202      	movs	r2, #2
 8008f32:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f34:	4b14      	ldr	r3, [pc, #80]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f40:	4b11      	ldr	r3, [pc, #68]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f46:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f52:	480d      	ldr	r0, [pc, #52]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f54:	f7f9 fd44 	bl	80029e0 <HAL_PCD_Init>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f5e:	f7f7 fe25 	bl	8000bac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f62:	2180      	movs	r1, #128	@ 0x80
 8008f64:	4808      	ldr	r0, [pc, #32]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f66:	f7fa ff70 	bl	8003e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f6a:	2240      	movs	r2, #64	@ 0x40
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4806      	ldr	r0, [pc, #24]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f70:	f7fa ff24 	bl	8003dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f74:	2280      	movs	r2, #128	@ 0x80
 8008f76:	2101      	movs	r1, #1
 8008f78:	4803      	ldr	r0, [pc, #12]	@ (8008f88 <USBD_LL_Init+0x94>)
 8008f7a:	f7fa ff1f 	bl	8003dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	20000c88 	.word	0x20000c88

08008f8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 fe2b 	bl	8002bfe <HAL_PCD_Start>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f942 	bl	8009238 <USBD_Get_USB_Status>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	4608      	mov	r0, r1
 8008fcc:	4611      	mov	r1, r2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	70fb      	strb	r3, [r7, #3]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70bb      	strb	r3, [r7, #2]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fea:	78bb      	ldrb	r3, [r7, #2]
 8008fec:	883a      	ldrh	r2, [r7, #0]
 8008fee:	78f9      	ldrb	r1, [r7, #3]
 8008ff0:	f7fa faff 	bl	80035f2 <HAL_PCD_EP_Open>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 f91c 	bl	8009238 <USBD_Get_USB_Status>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009004:	7bbb      	ldrb	r3, [r7, #14]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	4611      	mov	r1, r2
 800902c:	4618      	mov	r0, r3
 800902e:	f7fa fb4a 	bl	80036c6 <HAL_PCD_EP_Close>
 8009032:	4603      	mov	r3, r0
 8009034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009036:	7bfb      	ldrb	r3, [r7, #15]
 8009038:	4618      	mov	r0, r3
 800903a:	f000 f8fd 	bl	8009238 <USBD_Get_USB_Status>
 800903e:	4603      	mov	r3, r0
 8009040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009042:	7bbb      	ldrb	r3, [r7, #14]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009066:	78fa      	ldrb	r2, [r7, #3]
 8009068:	4611      	mov	r1, r2
 800906a:	4618      	mov	r0, r3
 800906c:	f7fa fc02 	bl	8003874 <HAL_PCD_EP_SetStall>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 f8de 	bl	8009238 <USBD_Get_USB_Status>
 800907c:	4603      	mov	r3, r0
 800907e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009080:	7bbb      	ldrb	r3, [r7, #14]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	460b      	mov	r3, r1
 8009094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090a4:	78fa      	ldrb	r2, [r7, #3]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fa fc46 	bl	800393a <HAL_PCD_EP_ClrStall>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f8bf 	bl	8009238 <USBD_Get_USB_Status>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090be:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da0b      	bge.n	80090fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	4613      	mov	r3, r2
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	3316      	adds	r3, #22
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	e00b      	b.n	8009114 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009102:	68f9      	ldr	r1, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	00db      	lsls	r3, r3, #3
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009112:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800913a:	78fa      	ldrb	r2, [r7, #3]
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f7fa fa33 	bl	80035aa <HAL_PCD_SetAddress>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f874 	bl	8009238 <USBD_Get_USB_Status>
 8009150:	4603      	mov	r3, r0
 8009152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009154:	7bbb      	ldrb	r3, [r7, #14]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	603b      	str	r3, [r7, #0]
 800916a:	460b      	mov	r3, r1
 800916c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009172:	2300      	movs	r3, #0
 8009174:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800917c:	7af9      	ldrb	r1, [r7, #11]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	f7fa fb3d 	bl	8003800 <HAL_PCD_EP_Transmit>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800918a:	7dfb      	ldrb	r3, [r7, #23]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f853 	bl	8009238 <USBD_Get_USB_Status>
 8009192:	4603      	mov	r3, r0
 8009194:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009196:	7dbb      	ldrb	r3, [r7, #22]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3718      	adds	r7, #24
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	460b      	mov	r3, r1
 80091ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091be:	7af9      	ldrb	r1, [r7, #11]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	f7fa fac9 	bl	800375a <HAL_PCD_EP_Receive>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f832 	bl	8009238 <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fa fae9 	bl	80037d0 <HAL_PCD_EP_GetRxCount>
 80091fe:	4603      	mov	r3, r0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009210:	4b03      	ldr	r3, [pc, #12]	@ (8009220 <USBD_static_malloc+0x18>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	2000116c 	.word	0x2000116c

08009224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d817      	bhi.n	800927c <USBD_Get_USB_Status+0x44>
 800924c:	a201      	add	r2, pc, #4	@ (adr r2, 8009254 <USBD_Get_USB_Status+0x1c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	0800926b 	.word	0x0800926b
 800925c:	08009271 	.word	0x08009271
 8009260:	08009277 	.word	0x08009277
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	e00b      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800926a:	2303      	movs	r3, #3
 800926c:	73fb      	strb	r3, [r7, #15]
    break;
 800926e:	e008      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e005      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009276:	2303      	movs	r3, #3
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e002      	b.n	8009282 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	bf00      	nop
  }
  return usb_status;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <memset>:
 8009290:	4402      	add	r2, r0
 8009292:	4603      	mov	r3, r0
 8009294:	4293      	cmp	r3, r2
 8009296:	d100      	bne.n	800929a <memset+0xa>
 8009298:	4770      	bx	lr
 800929a:	f803 1b01 	strb.w	r1, [r3], #1
 800929e:	e7f9      	b.n	8009294 <memset+0x4>

080092a0 <__libc_init_array>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4d0d      	ldr	r5, [pc, #52]	@ (80092d8 <__libc_init_array+0x38>)
 80092a4:	4c0d      	ldr	r4, [pc, #52]	@ (80092dc <__libc_init_array+0x3c>)
 80092a6:	1b64      	subs	r4, r4, r5
 80092a8:	10a4      	asrs	r4, r4, #2
 80092aa:	2600      	movs	r6, #0
 80092ac:	42a6      	cmp	r6, r4
 80092ae:	d109      	bne.n	80092c4 <__libc_init_array+0x24>
 80092b0:	4d0b      	ldr	r5, [pc, #44]	@ (80092e0 <__libc_init_array+0x40>)
 80092b2:	4c0c      	ldr	r4, [pc, #48]	@ (80092e4 <__libc_init_array+0x44>)
 80092b4:	f000 f818 	bl	80092e8 <_init>
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	10a4      	asrs	r4, r4, #2
 80092bc:	2600      	movs	r6, #0
 80092be:	42a6      	cmp	r6, r4
 80092c0:	d105      	bne.n	80092ce <__libc_init_array+0x2e>
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c8:	4798      	blx	r3
 80092ca:	3601      	adds	r6, #1
 80092cc:	e7ee      	b.n	80092ac <__libc_init_array+0xc>
 80092ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d2:	4798      	blx	r3
 80092d4:	3601      	adds	r6, #1
 80092d6:	e7f2      	b.n	80092be <__libc_init_array+0x1e>
 80092d8:	08009370 	.word	0x08009370
 80092dc:	08009370 	.word	0x08009370
 80092e0:	08009370 	.word	0x08009370
 80092e4:	08009374 	.word	0x08009374

080092e8 <_init>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr

080092f4 <_fini>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr
