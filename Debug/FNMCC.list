
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c518  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800c6b0  0800c6b0  0000d6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4a8  0800d4a8  0000f13c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d4a8  0800d4a8  0000e4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4b0  0800d4b0  0000f13c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4b0  0800d4b0  0000e4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4b4  0800d4b4  0000e4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  0800d4b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  2000013c  0800d5f4  0000f13c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  0800d5f4  0000f990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a13a  00000000  00000000  0000f16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004138  00000000  00000000  000292a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0002d3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001231  00000000  00000000  0002eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5d7  00000000  00000000  0002fda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9ad  00000000  00000000  0004b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee6a  00000000  00000000  00069d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000631c  00000000  00000000  00108bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010eef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000013c 	.word	0x2000013c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c698 	.word	0x0800c698

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000140 	.word	0x20000140
 80001d4:	0800c698 	.word	0x0800c698

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000360 	.word	0x20000360
 8000540:	20000370 	.word	0x20000370

08000544 <HAL_I2C_MemTxCpltCallback>:
//void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//Control del final de operaciones
    //if (hi2c->Instance == hi2c1.Instance) {
        SSD1306_TxCplt = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
    //}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000599 	.word	0x20000599

08000564 <HAL_TIM_PeriodElapsedCallback>:
//}
//void HAL_I2C_ER_IRQHandler(){
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d116      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000580:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b28      	cmp	r3, #40	@ 0x28
 8000588:	d107      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800059a:	2208      	movs	r2, #8
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005a0:	f001 fd9e 	bl	80020e0 <HAL_ADC_Start_DMA>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010000 	.word	0x40010000
 80005b0:	2000035c 	.word	0x2000035c
 80005b4:	20000598 	.word	0x20000598
 80005b8:	20000360 	.word	0x20000360
 80005bc:	20000158 	.word	0x20000158

080005c0 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e018      	b.n	8000602 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	441a      	add	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <USBRxData+0x58>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <USBRxData+0x58>)
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	b2c4      	uxtb	r4, r0
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <USBRxData+0x58>)
 80005e4:	7144      	strb	r4, [r0, #5]
 80005e6:	440b      	add	r3, r1
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <USBRxData+0x58>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <USBRxData+0x58>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <USBRxData+0x58>)
 80005fa:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d8e2      	bhi.n	80005d0 <USBRxData+0x10>
	}

}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bc90      	pop	{r4, r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	2000038c 	.word	0x2000038c

0800061c <USBTask>:

void USBTask() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b0c2      	sub	sp, #264	@ 0x108
 8000620:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <USBTask+0x90>)
 8000624:	791a      	ldrb	r2, [r3, #4]
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <USBTask+0x90>)
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	429a      	cmp	r2, r3
 800062c:	d039      	beq.n	80006a2 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <USBTask+0x90>)
 8000630:	f000 fcc4 	bl	8000fbc <decodeHeader>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800063a:	491d      	ldr	r1, [pc, #116]	@ (80006b0 <USBTask+0x94>)
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <USBTask+0x90>)
 800063e:	f000 f839 	bl	80006b4 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000648:	e01d      	b.n	8000686 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <USBTask+0x94>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <USBTask+0x94>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	b2c8      	uxtb	r0, r1
 8000656:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <USBTask+0x94>)
 8000658:	7208      	strb	r0, [r1, #8]
 800065a:	441a      	add	r2, r3
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800066a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <USBTask+0x94>)
 800066e:	7a1a      	ldrb	r2, [r3, #8]
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <USBTask+0x94>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	4013      	ands	r3, r2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <USBTask+0x94>)
 800067a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800067c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <USBTask+0x94>)
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800068e:	429a      	cmp	r2, r3
 8000690:	d3db      	bcc.n	800064a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <USBTask+0x94>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f00b fb6d 	bl	800bd7c <CDC_Transmit_FS>
	}

}
 80006a2:	bf00      	nop
 80006a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000038c 	.word	0x2000038c
 80006b0:	20000380 	.word	0x20000380

080006b4 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7a12      	ldrb	r2, [r2, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80006cc:	d002      	beq.n	80006d4 <decodeCommand+0x20>
 80006ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80006d0:	d010      	beq.n	80006f4 <decodeCommand+0x40>
 80006d2:	e01f      	b.n	8000714 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 80006d4:	2202      	movs	r2, #2
 80006d6:	21f0      	movs	r1, #240	@ 0xf0
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f000 fb4d 	bl	8000d78 <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 80006de:	210d      	movs	r1, #13
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 fbf8 	bl	8000ed6 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f000 fbf2 	bl	8000ed6 <putByteOnTx>
		break;
 80006f2:	e025      	b.n	8000740 <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 80006f4:	220d      	movs	r2, #13
 80006f6:	21f1      	movs	r1, #241	@ 0xf1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f000 fb3d 	bl	8000d78 <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 80006fe:	4912      	ldr	r1, [pc, #72]	@ (8000748 <decodeCommand+0x94>)
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f000 fc16 	bl	8000f32 <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7a5b      	ldrb	r3, [r3, #9]
 800070a:	4619      	mov	r1, r3
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fbe2 	bl	8000ed6 <putByteOnTx>
		break;
 8000712:	e015      	b.n	8000740 <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7a12      	ldrb	r2, [r2, #8]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2202      	movs	r2, #2
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 fb27 	bl	8000d78 <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 800072a:	21ff      	movs	r1, #255	@ 0xff
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f000 fbd2 	bl	8000ed6 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	4619      	mov	r1, r3
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 fbcc 	bl	8000ed6 <putByteOnTx>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800d478 	.word	0x0800d478

0800074c <do10ms>:

void do10ms() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <do10ms+0x48>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <do10ms+0x42>
		IS10MS=FALSE;
 800075e:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <do10ms+0x48>)
 8000760:	7813      	ldrb	r3, [r2, #0]
 8000762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000766:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <do10ms+0x4c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <do10ms+0x4c>)
 8000770:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <do10ms+0x4c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <do10ms+0x42>
			tmo100ms = 10;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <do10ms+0x4c>)
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <do10ms+0x48>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000788:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800078a:	f000 f807 	bl	800079c <heartBeatTask>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000598 	.word	0x20000598
 8000798:	20000030 	.word	0x20000030

0800079c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <heartBeatTask+0x44>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <heartBeatTask+0x48>)
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <heartBeatTask+0x4c>)
 80007bc:	f002 feb7 	bl	800352e <HAL_GPIO_TogglePin>

	times++;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <heartBeatTask+0x48>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <heartBeatTask+0x48>)
 80007ca:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <heartBeatTask+0x48>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 031f 	and.w	r3, r3, #31
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <heartBeatTask+0x48>)
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	2000059a 	.word	0x2000059a
 80007e8:	40020800 	.word	0x40020800

080007ec <SSD1306Data>:

void SSD1306Data(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	//if(IS100MS){
	//	IS100MS=FALSE;
		SSD1306_GotoXY(10, 0);
 80007f0:	2100      	movs	r1, #0
 80007f2:	200a      	movs	r0, #10
 80007f4:	f000 feb6 	bl	8001564 <SSD1306_GotoXY>
		SSD1306_Puts("CONEXION", &Font_11x18, WHITE);
 80007f8:	2201      	movs	r2, #1
 80007fa:	490c      	ldr	r1, [pc, #48]	@ (800082c <SSD1306Data+0x40>)
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <SSD1306Data+0x44>)
 80007fe:	f000 ff45 	bl	800168c <SSD1306_Puts>
		SSD1306_GotoXY(10, 20);
 8000802:	2114      	movs	r1, #20
 8000804:	200a      	movs	r0, #10
 8000806:	f000 fead 	bl	8001564 <SSD1306_GotoXY>
		SSD1306_Puts("OLED I2C", &Font_11x18, WHITE);
 800080a:	2201      	movs	r2, #1
 800080c:	4907      	ldr	r1, [pc, #28]	@ (800082c <SSD1306Data+0x40>)
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <SSD1306Data+0x48>)
 8000810:	f000 ff3c 	bl	800168c <SSD1306_Puts>
		SSD1306_GotoXY(10, 40);
 8000814:	2128      	movs	r1, #40	@ 0x28
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fea4 	bl	8001564 <SSD1306_GotoXY>
		SSD1306_Puts("BLACK PILL", &Font_11x18, WHITE);
 800081c:	2201      	movs	r2, #1
 800081e:	4903      	ldr	r1, [pc, #12]	@ (800082c <SSD1306Data+0x40>)
 8000820:	4805      	ldr	r0, [pc, #20]	@ (8000838 <SSD1306Data+0x4c>)
 8000822:	f000 ff33 	bl	800168c <SSD1306_Puts>
	//}
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000000 	.word	0x20000000
 8000830:	0800c6b0 	.word	0x0800c6b0
 8000834:	0800c6bc 	.word	0x0800c6bc
 8000838:	0800c6c8 	.word	0x0800c6c8

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f001 fa64 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f844 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 fa30 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 800084c:	f000 f9f0 	bl	8000c30 <MX_DMA_Init>
  MX_ADC1_Init();
 8000850:	f000 f8a6 	bl	80009a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000854:	f000 f958 	bl	8000b08 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000858:	f000 f984 	bl	8000b64 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800085c:	f00b f974 	bl	800bb48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000860:	4812      	ldr	r0, [pc, #72]	@ (80008ac <main+0x70>)
 8000862:	f00b fac3 	bl	800bdec <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8000866:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <main+0x74>)
 8000868:	f007 f978 	bl	8007b5c <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000872:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <main+0x78>)
 8000874:	f002 fe42 	bl	80034fc <HAL_GPIO_WritePin>

	//Display
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000878:	2201      	movs	r2, #1
 800087a:	2102      	movs	r1, #2
 800087c:	480e      	ldr	r0, [pc, #56]	@ (80008b8 <main+0x7c>)
 800087e:	f002 fe3d 	bl	80034fc <HAL_GPIO_WritePin>

	SSD1306_Init();
 8000882:	f000 fcd1 	bl	8001228 <SSD1306_Init>

	//Inicializacion de protocolo
	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000886:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <main+0x80>)
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <main+0x84>)
 800088a:	490e      	ldr	r1, [pc, #56]	@ (80008c4 <main+0x88>)
 800088c:	480e      	ldr	r0, [pc, #56]	@ (80008c8 <main+0x8c>)
 800088e:	f000 fc93 	bl	80011b8 <initComm>

	//Variables
	ALLFLAGS = RESET;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <main+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 8000898:	f7ff ff58 	bl	800074c <do10ms>
		USBTask();
 800089c:	f7ff febe 	bl	800061c <USBTask>
		SSD1306Data();
 80008a0:	f7ff ffa4 	bl	80007ec <SSD1306Data>
		SSD1306_UpdateScreen();
 80008a4:	f000 fd84 	bl	80013b0 <SSD1306_UpdateScreen>
	  	do10ms();
 80008a8:	bf00      	nop
 80008aa:	e7f5      	b.n	8000898 <main+0x5c>
 80008ac:	080005c1 	.word	0x080005c1
 80008b0:	20000314 	.word	0x20000314
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	20000398 	.word	0x20000398
 80008c0:	20000498 	.word	0x20000498
 80008c4:	20000380 	.word	0x20000380
 80008c8:	2000038c 	.word	0x2000038c
 80008cc:	20000598 	.word	0x20000598

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	@ 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b feae 	bl	800c640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a26      	ldr	r2, [pc, #152]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <SystemClock_Config+0xc8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a20      	ldr	r2, [pc, #128]	@ (800099c <SystemClock_Config+0xcc>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <SystemClock_Config+0xcc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000940:	2319      	movs	r3, #25
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000944:	23c0      	movs	r3, #192	@ 0xc0
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f006 fc6d 	bl	8007234 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000960:	f000 fa04 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2103      	movs	r1, #3
 8000980:	4618      	mov	r0, r3
 8000982:	f006 fecf 	bl	8007724 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800098c:	f000 f9ee 	bl	8000d6c <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3750      	adds	r7, #80	@ 0x50
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009b2:	4b52      	ldr	r3, [pc, #328]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009b4:	4a52      	ldr	r2, [pc, #328]	@ (8000b00 <MX_ADC1_Init+0x160>)
 80009b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b8:	4b50      	ldr	r3, [pc, #320]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c0:	4b4e      	ldr	r3, [pc, #312]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009cc:	4b4b      	ldr	r3, [pc, #300]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d2:	4b4a      	ldr	r3, [pc, #296]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009da:	4b48      	ldr	r3, [pc, #288]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e0:	4b46      	ldr	r3, [pc, #280]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009e2:	4a48      	ldr	r2, [pc, #288]	@ (8000b04 <MX_ADC1_Init+0x164>)
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e6:	4b45      	ldr	r3, [pc, #276]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80009ec:	4b43      	ldr	r3, [pc, #268]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009f2:	4b42      	ldr	r3, [pc, #264]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fa:	4b40      	ldr	r3, [pc, #256]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a00:	483e      	ldr	r0, [pc, #248]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a02:	f001 fa19 	bl	8001e38 <HAL_ADC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a0c:	f000 f9ae 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4836      	ldr	r0, [pc, #216]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a22:	f001 fc6f 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a2c:	f000 f99e 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482f      	ldr	r0, [pc, #188]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a3e:	f001 fc61 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a48:	f000 f990 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a50:	2303      	movs	r3, #3
 8000a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4828      	ldr	r0, [pc, #160]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a5a:	f001 fc53 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a64:	f000 f982 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a76:	f001 fc45 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a80:	f000 f974 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481a      	ldr	r0, [pc, #104]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a92:	f001 fc37 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a9c:	f000 f966 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000aae:	f001 fc29 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000ab8:	f000 f958 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000abc:	2306      	movs	r3, #6
 8000abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000aca:	f001 fc1b 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ad4:	f000 f94a 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000adc:	2308      	movs	r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000ae6:	f001 fc0d 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000af0:	f000 f93c 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000158 	.word	0x20000158
 8000b00:	40012000 	.word	0x40012000
 8000b04:	0f000001 	.word	0x0f000001

08000b08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b0e:	4a13      	ldr	r2, [pc, #76]	@ (8000b5c <MX_I2C1_Init+0x54>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b14:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <MX_I2C1_Init+0x58>)
 8000b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b46:	f002 fd0d 	bl	8003564 <HAL_I2C_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b50:	f000 f90c 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000200 	.word	0x20000200
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	00061a80 	.word	0x00061a80

08000b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <MX_TIM1_Init+0xc8>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b96:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000b98:	225f      	movs	r2, #95	@ 0x5f
 8000b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000ba4:	22f9      	movs	r2, #249	@ 0xf9
 8000ba6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bba:	481b      	ldr	r0, [pc, #108]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bbc:	f006 ff7e 	bl	8007abc <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000bc6:	f000 f8d1 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4814      	ldr	r0, [pc, #80]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bd8:	f007 f912 	bl	8007e00 <HAL_TIM_ConfigClockSource>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000be2:	f000 f8c3 	bl	8000d6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bf6:	f007 f9ca 	bl	8007f8e <HAL_TIM_SlaveConfigSynchro>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000c00:	f000 f8b4 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000c12:	f007 fbd9 	bl	80083c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000c1c:	f000 f8a6 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	@ 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000314 	.word	0x20000314
 8000c2c:	40010000 	.word	0x40010000

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	200b      	movs	r0, #11
 8000c74:	f001 fedb 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c78:	200b      	movs	r0, #11
 8000c7a:	f001 fef4 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	200c      	movs	r0, #12
 8000c84:	f001 fed3 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c88:	200c      	movs	r0, #12
 8000c8a:	f001 feec 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2038      	movs	r0, #56	@ 0x38
 8000c94:	f001 fecb 	bl	8002a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c98:	2038      	movs	r0, #56	@ 0x38
 8000c9a:	f001 fee4 	bl	8002a66 <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a26      	ldr	r2, [pc, #152]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a11      	ldr	r2, [pc, #68]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <MX_GPIO_Init+0xbc>)
 8000d3a:	f002 fbdf 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_GPIO_Init+0xbc>)
 8000d58:	f002 fa4c 	bl	80031f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020800 	.word	0x40020800

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
 8000d84:	4613      	mov	r3, r2
 8000d86:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000d88:	78bb      	ldrb	r3, [r7, #2]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	795a      	ldrb	r2, [r3, #5]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	1c59      	adds	r1, r3, #1
 8000da6:	b2c8      	uxtb	r0, r1
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	7148      	strb	r0, [r1, #5]
 8000dac:	4413      	add	r3, r2
 8000dae:	2255      	movs	r2, #85	@ 0x55
 8000db0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795a      	ldrb	r2, [r3, #5]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	1c59      	adds	r1, r3, #1
 8000dcc:	b2c8      	uxtb	r0, r1
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	7148      	strb	r0, [r1, #5]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	224e      	movs	r2, #78	@ 0x4e
 8000dd6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	795a      	ldrb	r2, [r3, #5]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	799b      	ldrb	r3, [r3, #6]
 8000de0:	4013      	ands	r3, r2
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	1c59      	adds	r1, r3, #1
 8000df2:	b2c8      	uxtb	r0, r1
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	7148      	strb	r0, [r1, #5]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2245      	movs	r2, #69	@ 0x45
 8000dfc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	795a      	ldrb	r2, [r3, #5]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	799b      	ldrb	r3, [r3, #6]
 8000e06:	4013      	ands	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795b      	ldrb	r3, [r3, #5]
 8000e16:	1c59      	adds	r1, r3, #1
 8000e18:	b2c8      	uxtb	r0, r1
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	7148      	strb	r0, [r1, #5]
 8000e1e:	4413      	add	r3, r2
 8000e20:	2252      	movs	r2, #82	@ 0x52
 8000e22:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	795a      	ldrb	r2, [r3, #5]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	799b      	ldrb	r3, [r3, #6]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	795b      	ldrb	r3, [r3, #5]
 8000e3c:	1c59      	adds	r1, r3, #1
 8000e3e:	b2c8      	uxtb	r0, r1
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	7148      	strb	r0, [r1, #5]
 8000e44:	4413      	add	r3, r2
 8000e46:	78ba      	ldrb	r2, [r7, #2]
 8000e48:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	795a      	ldrb	r2, [r3, #5]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	4013      	ands	r3, r2
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	1c59      	adds	r1, r3, #1
 8000e64:	b2c8      	uxtb	r0, r1
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	7148      	strb	r0, [r1, #5]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	223a      	movs	r2, #58	@ 0x3a
 8000e6e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	795a      	ldrb	r2, [r3, #5]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	799b      	ldrb	r3, [r3, #6]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	795b      	ldrb	r3, [r3, #5]
 8000e88:	1c59      	adds	r1, r3, #1
 8000e8a:	b2c8      	uxtb	r0, r1
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	7148      	strb	r0, [r1, #5]
 8000e90:	4413      	add	r3, r2
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795a      	ldrb	r2, [r3, #5]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	799b      	ldrb	r3, [r3, #6]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7a5a      	ldrb	r2, [r3, #9]
 8000eb0:	78b9      	ldrb	r1, [r7, #2]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	404b      	eors	r3, r1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4053      	eors	r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	79db      	ldrb	r3, [r3, #7]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	795b      	ldrb	r3, [r3, #5]
 8000ef6:	1c59      	adds	r1, r3, #1
 8000ef8:	b2c8      	uxtb	r0, r1
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	7148      	strb	r0, [r1, #5]
 8000efe:	4413      	add	r3, r2
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	795a      	ldrb	r2, [r3, #5]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	799b      	ldrb	r3, [r3, #6]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7a5a      	ldrb	r2, [r3, #9]
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	4053      	eors	r3, r2
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7a5b      	ldrb	r3, [r3, #9]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000f32:	b490      	push	{r4, r7}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000f40:	e02c      	b.n	8000f9c <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	79db      	ldrb	r3, [r3, #7]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	441a      	add	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	1c58      	adds	r0, r3, #1
 8000f62:	b2c4      	uxtb	r4, r0
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	7144      	strb	r4, [r0, #5]
 8000f68:	440b      	add	r3, r1
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	795a      	ldrb	r2, [r3, #5]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	799b      	ldrb	r3, [r3, #6]
 8000f76:	4013      	ands	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	73fa      	strb	r2, [r7, #15]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a5b      	ldrb	r3, [r3, #9]
 8000f94:	4053      	eors	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ca      	bne.n	8000f42 <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7a5b      	ldrb	r3, [r3, #9]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc90      	pop	{r4, r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	795b      	ldrb	r3, [r3, #5]
 8000fcc:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000fce:	e0e4      	b.n	800119a <decodeHeader+0x1de>
        switch(header)
 8000fd0:	4b78      	ldr	r3, [pc, #480]	@ (80011b4 <decodeHeader+0x1f8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	f200 80c9 	bhi.w	800116c <decodeHeader+0x1b0>
 8000fda:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe0 <decodeHeader+0x24>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08001001 	.word	0x08001001
 8000fe4:	0800101b 	.word	0x0800101b
 8000fe8:	08001059 	.word	0x08001059
 8000fec:	08001085 	.word	0x08001085
 8000ff0:	080010b1 	.word	0x080010b1
 8000ff4:	080010c7 	.word	0x080010c7
 8000ff8:	0800116d 	.word	0x0800116d
 8000ffc:	08001129 	.word	0x08001129
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7912      	ldrb	r2, [r2, #4]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b55      	cmp	r3, #85	@ 0x55
 800100e:	f040 80b1 	bne.w	8001174 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8001012:	4b68      	ldr	r3, [pc, #416]	@ (80011b4 <decodeHeader+0x1f8>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
                }
            break;
 8001018:	e0ac      	b.n	8001174 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	7912      	ldrb	r2, [r2, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b4e      	cmp	r3, #78	@ 0x4e
 8001028:	d103      	bne.n	8001032 <decodeHeader+0x76>
                    header = HEADER_E;
 800102a:	4b62      	ldr	r3, [pc, #392]	@ (80011b4 <decodeHeader+0x1f8>)
 800102c:	2202      	movs	r2, #2
 800102e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8001030:	e0a2      	b.n	8001178 <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	7912      	ldrb	r2, [r2, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b55      	cmp	r3, #85	@ 0x55
 8001040:	f000 809a 	beq.w	8001178 <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <decodeHeader+0x1f8>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	711a      	strb	r2, [r3, #4]
            break;
 8001056:	e08f      	b.n	8001178 <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	7912      	ldrb	r2, [r2, #4]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b45      	cmp	r3, #69	@ 0x45
 8001066:	d103      	bne.n	8001070 <decodeHeader+0xb4>
                    header = HEADER_R;
 8001068:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <decodeHeader+0x1f8>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800106e:	e086      	b.n	800117e <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001070:	4b50      	ldr	r3, [pc, #320]	@ (80011b4 <decodeHeader+0x1f8>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	711a      	strb	r2, [r3, #4]
            break;
 8001082:	e07c      	b.n	800117e <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	7912      	ldrb	r2, [r2, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b52      	cmp	r3, #82	@ 0x52
 8001092:	d103      	bne.n	800109c <decodeHeader+0xe0>
                    header = NBYTES;
 8001094:	4b47      	ldr	r3, [pc, #284]	@ (80011b4 <decodeHeader+0x1f8>)
 8001096:	2204      	movs	r2, #4
 8001098:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800109a:	e070      	b.n	800117e <decodeHeader+0x1c2>
                    header = HEADER_U;
 800109c:	4b45      	ldr	r3, [pc, #276]	@ (80011b4 <decodeHeader+0x1f8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	791b      	ldrb	r3, [r3, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	711a      	strb	r2, [r3, #4]
            break;
 80010ae:	e066      	b.n	800117e <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	7912      	ldrb	r2, [r2, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80010be:	4b3d      	ldr	r3, [pc, #244]	@ (80011b4 <decodeHeader+0x1f8>)
 80010c0:	2205      	movs	r2, #5
 80010c2:	701a      	strb	r2, [r3, #0]
            break;
 80010c4:	e05b      	b.n	800117e <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	7912      	ldrb	r2, [r2, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80010d4:	d11e      	bne.n	8001114 <decodeHeader+0x158>
                    header = PAYLOAD;
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <decodeHeader+0x1f8>)
 80010d8:	2207      	movs	r2, #7
 80010da:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a1a      	ldrb	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	799b      	ldrb	r3, [r3, #6]
 80010f0:	4013      	ands	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a5a      	ldrb	r2, [r3, #9]
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4053      	eors	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800110c:	b2da      	uxtb	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001112:	e034      	b.n	800117e <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <decodeHeader+0x1f8>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	711a      	strb	r2, [r3, #4]
            break;
 8001126:	e02a      	b.n	800117e <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3b01      	subs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00c      	beq.n	800114e <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7a5a      	ldrb	r2, [r3, #9]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	7909      	ldrb	r1, [r1, #4]
 8001140:	440b      	add	r3, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4053      	eors	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 800114c:	e016      	b.n	800117c <decodeHeader+0x1c0>
                    header = HEADER_U;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <decodeHeader+0x1f8>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	7912      	ldrb	r2, [r2, #4]
 800115c:	4413      	add	r3, r2
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7a5b      	ldrb	r3, [r3, #9]
 8001164:	429a      	cmp	r2, r3
 8001166:	d109      	bne.n	800117c <decodeHeader+0x1c0>
                        return TRUE;
 8001168:	2301      	movs	r3, #1
 800116a:	e01d      	b.n	80011a8 <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <decodeHeader+0x1f8>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
            break;
 8001172:	e004      	b.n	800117e <decodeHeader+0x1c2>
            break;
 8001174:	bf00      	nop
 8001176:	e002      	b.n	800117e <decodeHeader+0x1c2>
            break;
 8001178:	bf00      	nop
 800117a:	e000      	b.n	800117e <decodeHeader+0x1c2>
            break;
 800117c:	bf00      	nop
        }
        dataRx->indexR++;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	791a      	ldrb	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	799b      	ldrb	r3, [r3, #6]
 8001192:	4013      	ands	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f47f af15 	bne.w	8000fd0 <decodeHeader+0x14>
    }
    return FALSE;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	2000059b 	.word	0x2000059b

080011b8 <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2200      	movs	r2, #0
 80011fa:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2200      	movs	r2, #0
 8001200:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2200      	movs	r2, #0
 8001206:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2200      	movs	r2, #0
 800120c:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	22ff      	movs	r2, #255	@ 0xff
 8001212:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2200      	movs	r2, #0
 8001218:	725a      	strb	r2, [r3, #9]

}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 800122e:	f000 fa53 	bl	80016d8 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8001232:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001236:	2201      	movs	r2, #1
 8001238:	2178      	movs	r1, #120	@ 0x78
 800123a:	485b      	ldr	r0, [pc, #364]	@ (80013a8 <SSD1306_Init+0x180>)
 800123c:	f002 fc4a 	bl	8003ad4 <HAL_I2C_IsDeviceReady>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SSD1306_Init+0x22>
		return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e0a9      	b.n	800139e <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 800124a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800124e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001250:	e002      	b.n	8001258 <SSD1306_Init+0x30>
		p--;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3b01      	subs	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f9      	bne.n	8001252 <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 800125e:	22ae      	movs	r2, #174	@ 0xae
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	@ 0x78
 8001264:	f000 fab6 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001268:	2220      	movs	r2, #32
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	@ 0x78
 800126e:	f000 fab1 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001272:	2210      	movs	r2, #16
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	@ 0x78
 8001278:	f000 faac 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 800127c:	22b0      	movs	r2, #176	@ 0xb0
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	@ 0x78
 8001282:	f000 faa7 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001286:	22c8      	movs	r2, #200	@ 0xc8
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	@ 0x78
 800128c:	f000 faa2 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2078      	movs	r0, #120	@ 0x78
 8001296:	f000 fa9d 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 800129a:	2210      	movs	r2, #16
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	@ 0x78
 80012a0:	f000 fa98 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80012a4:	2240      	movs	r2, #64	@ 0x40
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	@ 0x78
 80012aa:	f000 fa93 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80012ae:	2281      	movs	r2, #129	@ 0x81
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	@ 0x78
 80012b4:	f000 fa8e 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012b8:	22ff      	movs	r2, #255	@ 0xff
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	@ 0x78
 80012be:	f000 fa89 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80012c2:	22a1      	movs	r2, #161	@ 0xa1
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	@ 0x78
 80012c8:	f000 fa84 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80012cc:	22a6      	movs	r2, #166	@ 0xa6
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f000 fa7f 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 80012d6:	22a8      	movs	r2, #168	@ 0xa8
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	@ 0x78
 80012dc:	f000 fa7a 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80012e0:	223f      	movs	r2, #63	@ 0x3f
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	@ 0x78
 80012e6:	f000 fa75 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80012ea:	22a4      	movs	r2, #164	@ 0xa4
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	@ 0x78
 80012f0:	f000 fa70 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80012f4:	22d3      	movs	r2, #211	@ 0xd3
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	@ 0x78
 80012fa:	f000 fa6b 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	@ 0x78
 8001304:	f000 fa66 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8001308:	22d5      	movs	r2, #213	@ 0xd5
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	@ 0x78
 800130e:	f000 fa61 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001312:	22f0      	movs	r2, #240	@ 0xf0
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	@ 0x78
 8001318:	f000 fa5c 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 800131c:	22d9      	movs	r2, #217	@ 0xd9
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	@ 0x78
 8001322:	f000 fa57 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001326:	2222      	movs	r2, #34	@ 0x22
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	@ 0x78
 800132c:	f000 fa52 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001330:	22da      	movs	r2, #218	@ 0xda
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	@ 0x78
 8001336:	f000 fa4d 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800133a:	2212      	movs	r2, #18
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	@ 0x78
 8001340:	f000 fa48 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001344:	22db      	movs	r2, #219	@ 0xdb
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	@ 0x78
 800134a:	f000 fa43 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800134e:	2220      	movs	r2, #32
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	@ 0x78
 8001354:	f000 fa3e 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001358:	228d      	movs	r2, #141	@ 0x8d
 800135a:	2100      	movs	r1, #0
 800135c:	2078      	movs	r0, #120	@ 0x78
 800135e:	f000 fa39 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001362:	2214      	movs	r2, #20
 8001364:	2100      	movs	r1, #0
 8001366:	2078      	movs	r0, #120	@ 0x78
 8001368:	f000 fa34 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800136c:	22af      	movs	r2, #175	@ 0xaf
 800136e:	2100      	movs	r1, #0
 8001370:	2078      	movs	r0, #120	@ 0x78
 8001372:	f000 fa2f 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001376:	222e      	movs	r2, #46	@ 0x2e
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	@ 0x78
 800137c:	f000 fa2a 	bl	80017d4 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f877 	bl	8001474 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001386:	f000 f813 	bl	80013b0 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <SSD1306_Init+0x184>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SSD1306_Init+0x184>)
 8001392:	2200      	movs	r2, #0
 8001394:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SSD1306_Init+0x184>)
 8001398:	2201      	movs	r2, #1
 800139a:	715a      	strb	r2, [r3, #5]
	return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000200 	.word	0x20000200
 80013ac:	2000099c 	.word	0x2000099c

080013b0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction
	if (SSD1306_TxCplt || state == 1) {
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <SSD1306_UpdateScreen+0xb4>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d103      	bne.n	80013c6 <SSD1306_UpdateScreen+0x16>
 80013be:	4b2a      	ldr	r3, [pc, #168]	@ (8001468 <SSD1306_UpdateScreen+0xb8>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d14c      	bne.n	8001460 <SSD1306_UpdateScreen+0xb0>
		SSD1306_TxCplt = 0;  // Reset completion flag
 80013c6:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <SSD1306_UpdateScreen+0xb4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

		switch (state) {
 80013cc:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <SSD1306_UpdateScreen+0xb8>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d844      	bhi.n	8001460 <SSD1306_UpdateScreen+0xb0>
 80013d6:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <SSD1306_UpdateScreen+0x2c>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	080013ed 	.word	0x080013ed
 80013e0:	08001407 	.word	0x08001407
 80013e4:	08001419 	.word	0x08001419
 80013e8:	0800142b 	.word	0x0800142b
		case 1:  // Set page address
			SSD1306_WRITECOMMAND(0xB0 + current_page);
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <SSD1306_UpdateScreen+0xbc>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3b50      	subs	r3, #80	@ 0x50
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	2078      	movs	r0, #120	@ 0x78
 80013fa:	f000 f9eb 	bl	80017d4 <SSD1306_I2C_Write>
			state = 2;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <SSD1306_UpdateScreen+0xb8>)
 8001400:	2202      	movs	r2, #2
 8001402:	701a      	strb	r2, [r3, #0]
			break;
 8001404:	e02c      	b.n	8001460 <SSD1306_UpdateScreen+0xb0>
		case 2:  // Set column address low nibble
			SSD1306_WRITECOMMAND(0x00);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	2078      	movs	r0, #120	@ 0x78
 800140c:	f000 f9e2 	bl	80017d4 <SSD1306_I2C_Write>
			state = 3;
 8001410:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <SSD1306_UpdateScreen+0xb8>)
 8001412:	2203      	movs	r2, #3
 8001414:	701a      	strb	r2, [r3, #0]
			break;
 8001416:	e023      	b.n	8001460 <SSD1306_UpdateScreen+0xb0>
		case 3:  // Set column address high nibble
			SSD1306_WRITECOMMAND(0x10);
 8001418:	2210      	movs	r2, #16
 800141a:	2100      	movs	r1, #0
 800141c:	2078      	movs	r0, #120	@ 0x78
 800141e:	f000 f9d9 	bl	80017d4 <SSD1306_I2C_Write>
			state = 4;
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <SSD1306_UpdateScreen+0xb8>)
 8001424:	2204      	movs	r2, #4
 8001426:	701a      	strb	r2, [r3, #0]
			break;
 8001428:	e01a      	b.n	8001460 <SSD1306_UpdateScreen+0xb0>
		case 4:  // Write page data
			SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
					&SSD1306_Buffer[SSD1306_WIDTH * current_page],
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <SSD1306_UpdateScreen+0xbc>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	01db      	lsls	r3, r3, #7
			SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 8001430:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <SSD1306_UpdateScreen+0xc0>)
 8001432:	441a      	add	r2, r3
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	2140      	movs	r1, #64	@ 0x40
 8001438:	2078      	movs	r0, #120	@ 0x78
 800143a:	f000 f963 	bl	8001704 <SSD1306_I2C_WriteMulti>
					SSD1306_WIDTH);
			current_page++;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <SSD1306_UpdateScreen+0xbc>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <SSD1306_UpdateScreen+0xbc>)
 8001448:	701a      	strb	r2, [r3, #0]
			if (current_page >= 8) {
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <SSD1306_UpdateScreen+0xbc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b07      	cmp	r3, #7
 8001450:	d902      	bls.n	8001458 <SSD1306_UpdateScreen+0xa8>
				current_page = 0;
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <SSD1306_UpdateScreen+0xbc>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
			}
			state = 1;  // Start over with next page
 8001458:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <SSD1306_UpdateScreen+0xb8>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
			break;
 800145e:	bf00      	nop
		}
	}
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000599 	.word	0x20000599
 8001468:	20000034 	.word	0x20000034
 800146c:	200009a2 	.word	0x200009a2
 8001470:	2000059c 	.word	0x2000059c

08001474 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <SSD1306_Fill+0x14>
 8001484:	2300      	movs	r3, #0
 8001486:	e000      	b.n	800148a <SSD1306_Fill+0x16>
 8001488:	23ff      	movs	r3, #255	@ 0xff
 800148a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800148e:	4619      	mov	r1, r3
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <SSD1306_Fill+0x2c>)
 8001492:	f00b f8d5 	bl	800c640 <memset>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000059c 	.word	0x2000059c

080014a4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
 80014ae:	460b      	mov	r3, r1
 80014b0:	80bb      	strh	r3, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ba:	d848      	bhi.n	800154e <SSD1306_DrawPixel+0xaa>
 80014bc:	88bb      	ldrh	r3, [r7, #4]
 80014be:	2b3f      	cmp	r3, #63	@ 0x3f
 80014c0:	d845      	bhi.n	800154e <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <SSD1306_DrawPixel+0xb8>)
 80014c4:	791b      	ldrb	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d11a      	bne.n	8001514 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014de:	88fa      	ldrh	r2, [r7, #6]
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	08db      	lsrs	r3, r3, #3
 80014e4:	b298      	uxth	r0, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	4413      	add	r3, r2
 80014ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <SSD1306_DrawPixel+0xbc>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b259      	sxtb	r1, r3
 8001504:	88fa      	ldrh	r2, [r7, #6]
 8001506:	4603      	mov	r3, r0
 8001508:	01db      	lsls	r3, r3, #7
 800150a:	4413      	add	r3, r2
 800150c:	b2c9      	uxtb	r1, r1
 800150e:	4a14      	ldr	r2, [pc, #80]	@ (8001560 <SSD1306_DrawPixel+0xbc>)
 8001510:	54d1      	strb	r1, [r2, r3]
 8001512:	e01d      	b.n	8001550 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	88bb      	ldrh	r3, [r7, #4]
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	b298      	uxth	r0, r3
 800151c:	4603      	mov	r3, r0
 800151e:	01db      	lsls	r3, r3, #7
 8001520:	4413      	add	r3, r2
 8001522:	4a0f      	ldr	r2, [pc, #60]	@ (8001560 <SSD1306_DrawPixel+0xbc>)
 8001524:	5cd3      	ldrb	r3, [r2, r3]
 8001526:	b25a      	sxtb	r2, r3
 8001528:	88bb      	ldrh	r3, [r7, #4]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f303 	lsl.w	r3, r1, r3
 8001534:	b25b      	sxtb	r3, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	b25b      	sxtb	r3, r3
 800153a:	4013      	ands	r3, r2
 800153c:	b259      	sxtb	r1, r3
 800153e:	88fa      	ldrh	r2, [r7, #6]
 8001540:	4603      	mov	r3, r0
 8001542:	01db      	lsls	r3, r3, #7
 8001544:	4413      	add	r3, r2
 8001546:	b2c9      	uxtb	r1, r1
 8001548:	4a05      	ldr	r2, [pc, #20]	@ (8001560 <SSD1306_DrawPixel+0xbc>)
 800154a:	54d1      	strb	r1, [r2, r3]
 800154c:	e000      	b.n	8001550 <SSD1306_DrawPixel+0xac>
		return;
 800154e:	bf00      	nop
	}
}
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000099c 	.word	0x2000099c
 8001560:	2000059c 	.word	0x2000059c

08001564 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	460a      	mov	r2, r1
 800156e:	80fb      	strh	r3, [r7, #6]
 8001570:	4613      	mov	r3, r2
 8001572:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8001574:	4a05      	ldr	r2, [pc, #20]	@ (800158c <SSD1306_GotoXY+0x28>)
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800157a:	4a04      	ldr	r2, [pc, #16]	@ (800158c <SSD1306_GotoXY+0x28>)
 800157c:	88bb      	ldrh	r3, [r7, #4]
 800157e:	8053      	strh	r3, [r2, #2]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	2000099c 	.word	0x2000099c

08001590 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	4613      	mov	r3, r2
 800159e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <SSD1306_Putc+0xf8>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80015ae:	dc07      	bgt.n	80015c0 <SSD1306_Putc+0x30>
 80015b0:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <SSD1306_Putc+0xf8>)
 80015b2:	885b      	ldrh	r3, [r3, #2]
 80015b4:	461a      	mov	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	4413      	add	r3, r2
 80015bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80015be:	dd01      	ble.n	80015c4 <SSD1306_Putc+0x34>
		return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e05d      	b.n	8001680 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e04b      	b.n	8001662 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	3b20      	subs	r3, #32
 80015d2:	6839      	ldr	r1, [r7, #0]
 80015d4:	7849      	ldrb	r1, [r1, #1]
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	440b      	add	r3, r1
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	e030      	b.n	8001650 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015fe:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <SSD1306_Putc+0xf8>)
 8001600:	881a      	ldrh	r2, [r3, #0]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b298      	uxth	r0, r3
 800160a:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <SSD1306_Putc+0xf8>)
 800160c:	885a      	ldrh	r2, [r3, #2]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	79ba      	ldrb	r2, [r7, #6]
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff ff43 	bl	80014a4 <SSD1306_DrawPixel>
 800161e:	e014      	b.n	800164a <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001620:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <SSD1306_Putc+0xf8>)
 8001622:	881a      	ldrh	r2, [r3, #0]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	b298      	uxth	r0, r3
 800162c:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <SSD1306_Putc+0xf8>)
 800162e:	885a      	ldrh	r2, [r3, #2]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4413      	add	r3, r2
 8001636:	b299      	uxth	r1, r3
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	f7ff ff2d 	bl	80014a4 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	3301      	adds	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4293      	cmp	r3, r2
 800165a:	d3c8      	bcc.n	80015ee <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3301      	adds	r3, #1
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	461a      	mov	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	4293      	cmp	r3, r2
 800166c:	d3ad      	bcc.n	80015ca <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <SSD1306_Putc+0xf8>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	4413      	add	r3, r2
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b03      	ldr	r3, [pc, #12]	@ (8001688 <SSD1306_Putc+0xf8>)
 800167c:	801a      	strh	r2, [r3, #0]
	return ch;
 800167e:	79fb      	ldrb	r3, [r7, #7]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000099c 	.word	0x2000099c

0800168c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	4613      	mov	r3, r2
 8001698:	71fb      	strb	r3, [r7, #7]
	while(*str)
 800169a:	e012      	b.n	80016c2 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff73 	bl	8001590 <SSD1306_Putc>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d002      	beq.n	80016bc <SSD1306_Puts+0x30>
			return *str;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	e008      	b.n	80016ce <SSD1306_Puts+0x42>
		}
		str++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
	while(*str)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1e8      	bne.n	800169c <SSD1306_Puts+0x10>
	}
	return *str;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	781b      	ldrb	r3, [r3, #0]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <SSD1306_I2C_Init+0x28>)
 80016e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016e2:	e002      	b.n	80016ea <SSD1306_I2C_Init+0x12>
		p--;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <SSD1306_I2C_Init+0xc>
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	0003d090 	.word	0x0003d090

08001704 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b0c7      	sub	sp, #284	@ 0x11c
 8001708:	af02      	add	r7, sp, #8
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001712:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001716:	600a      	str	r2, [r1, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800171e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001722:	4622      	mov	r2, r4
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800172a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800172e:	4602      	mov	r2, r0
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001736:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800173a:	460a      	mov	r2, r1
 800173c:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 800173e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001746:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800174a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001758:	e015      	b.n	8001786 <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800175a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800175e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001762:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	441a      	add	r2, r3
 800176a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800176e:	3301      	adds	r3, #1
 8001770:	7811      	ldrb	r1, [r2, #0]
 8001772:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001776:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800177a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 800177c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001780:	3301      	adds	r3, #1
 8001782:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001786:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800178a:	b29b      	uxth	r3, r3
 800178c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001790:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d8df      	bhi.n	800175a <SSD1306_I2C_WriteMulti+0x56>
	//HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
	HAL_I2C_Mem_Write_DMA(&hi2c1, address, 0x40, 1, dt, count+1);
 800179a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800179e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b299      	uxth	r1, r3
 80017a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	2240      	movs	r2, #64	@ 0x40
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <SSD1306_I2C_WriteMulti+0xcc>)
 80017c2:	f002 f829 	bl	8003818 <HAL_I2C_Mem_Write_DMA>
}
 80017c6:	bf00      	nop
 80017c8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	20000200 	.word	0x20000200

080017d4 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	460b      	mov	r3, r1
 80017e0:	71bb      	strb	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80017ea:	797b      	ldrb	r3, [r7, #5]
 80017ec:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
//	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
	HAL_I2C_Mem_Write_DMA(&hi2c1, address, 0x40, 1, dt, 2);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	b299      	uxth	r1, r3
 80017f2:	2302      	movs	r3, #2
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2301      	movs	r3, #1
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <SSD1306_I2C_Write+0x3c>)
 8001802:	f002 f809 	bl	8003818 <HAL_I2C_Mem_Write_DMA>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000200 	.word	0x20000200

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	@ (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001828:	6453      	str	r3, [r2, #68]	@ 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	@ 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	@ 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a32      	ldr	r2, [pc, #200]	@ (800194c <HAL_ADC_MspInit+0xe8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d15e      	bne.n	8001944 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <HAL_ADC_MspInit+0xec>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4a30      	ldr	r2, [pc, #192]	@ (8001950 <HAL_ADC_MspInit+0xec>)
 8001890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001894:	6453      	str	r3, [r2, #68]	@ 0x44
 8001896:	4b2e      	ldr	r3, [pc, #184]	@ (8001950 <HAL_ADC_MspInit+0xec>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <HAL_ADC_MspInit+0xec>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a29      	ldr	r2, [pc, #164]	@ (8001950 <HAL_ADC_MspInit+0xec>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <HAL_ADC_MspInit+0xec>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018be:	23ff      	movs	r3, #255	@ 0xff
 80018c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4820      	ldr	r0, [pc, #128]	@ (8001954 <HAL_ADC_MspInit+0xf0>)
 80018d2:	f001 fc8f 	bl	80031f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 80018d8:	4a20      	ldr	r2, [pc, #128]	@ (800195c <HAL_ADC_MspInit+0xf8>)
 80018da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 80018de:	2200      	movs	r2, #0
 80018e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 80018f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018f6:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 80018f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 8001900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001904:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001918:	480f      	ldr	r0, [pc, #60]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 800191a:	f001 f8bf 	bl	8002a9c <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001924:	f7ff fa22 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a0b      	ldr	r2, [pc, #44]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 800192c:	639a      	str	r2, [r3, #56]	@ 0x38
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_ADC_MspInit+0xf4>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2012      	movs	r0, #18
 800193a:	f001 f878 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800193e:	2012      	movs	r0, #18
 8001940:	f001 f891 	bl	8002a66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40012000 	.word	0x40012000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000
 8001958:	200001a0 	.word	0x200001a0
 800195c:	40026410 	.word	0x40026410

08001960 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	@ 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a4f      	ldr	r2, [pc, #316]	@ (8001abc <HAL_I2C_MspInit+0x15c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	f040 8097 	bne.w	8001ab2 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <HAL_I2C_MspInit+0x160>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac0 <HAL_I2C_MspInit+0x160>)
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	6313      	str	r3, [r2, #48]	@ 0x30
 8001994:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac0 <HAL_I2C_MspInit+0x160>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019a0:	23c0      	movs	r3, #192	@ 0xc0
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a4:	2312      	movs	r3, #18
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b0:	2304      	movs	r3, #4
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	4842      	ldr	r0, [pc, #264]	@ (8001ac4 <HAL_I2C_MspInit+0x164>)
 80019bc:	f001 fc1a 	bl	80031f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac0 <HAL_I2C_MspInit+0x160>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac0 <HAL_I2C_MspInit+0x160>)
 80019ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <HAL_I2C_MspInit+0x160>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80019dc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 80019de:	4a3b      	ldr	r2, [pc, #236]	@ (8001acc <HAL_I2C_MspInit+0x16c>)
 80019e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019e2:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 80019e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ea:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b35      	ldr	r3, [pc, #212]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fe:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a04:	4b30      	ldr	r3, [pc, #192]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a10:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a1c:	482a      	ldr	r0, [pc, #168]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a1e:	f001 f83d 	bl	8002a9c <HAL_DMA_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001a28:	f7ff f9a0 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a32:	4a25      	ldr	r2, [pc, #148]	@ (8001ac8 <HAL_I2C_MspInit+0x168>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a3a:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_I2C_MspInit+0x174>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001a3e:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a44:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a46:	2240      	movs	r2, #64	@ 0x40
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a56:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a70:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a76:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a78:	f001 f810 	bl	8002a9c <HAL_DMA_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001a82:	f7ff f973 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8c:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <HAL_I2C_MspInit+0x170>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	201f      	movs	r0, #31
 8001a98:	f000 ffc9 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a9c:	201f      	movs	r0, #31
 8001a9e:	f000 ffe2 	bl	8002a66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	f000 ffc1 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001aac:	2020      	movs	r0, #32
 8001aae:	f000 ffda 	bl	8002a66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3728      	adds	r7, #40	@ 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	20000254 	.word	0x20000254
 8001acc:	40026010 	.word	0x40026010
 8001ad0:	200002b4 	.word	0x200002b4
 8001ad4:	40026028 	.word	0x40026028

08001ad8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8001b50 <HAL_TIM_Base_MspInit+0x78>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12d      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_TIM_Base_MspInit+0x7c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_TIM_Base_MspInit+0x7c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afa:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_TIM_Base_MspInit+0x7c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2018      	movs	r0, #24
 8001b0c:	f000 ff8f 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001b10:	2018      	movs	r0, #24
 8001b12:	f000 ffa8 	bl	8002a66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2019      	movs	r0, #25
 8001b1c:	f000 ff87 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b20:	2019      	movs	r0, #25
 8001b22:	f000 ffa0 	bl	8002a66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	201a      	movs	r0, #26
 8001b2c:	f000 ff7f 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b30:	201a      	movs	r0, #26
 8001b32:	f000 ff98 	bl	8002a66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	201b      	movs	r0, #27
 8001b3c:	f000 ff77 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b40:	201b      	movs	r0, #27
 8001b42:	f000 ff90 	bl	8002a66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010000 	.word	0x40010000
 8001b54:	40023800 	.word	0x40023800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <NMI_Handler+0x4>

08001b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <MemManage_Handler+0x4>

08001b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <BusFault_Handler+0x4>

08001b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <UsageFault_Handler+0x4>

08001b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bae:	f000 f8ff 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <DMA1_Stream0_IRQHandler+0x10>)
 8001bbe:	f001 f895 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000254 	.word	0x20000254

08001bcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <DMA1_Stream1_IRQHandler+0x10>)
 8001bd2:	f001 f88b 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002b4 	.word	0x200002b4

08001be0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <ADC_IRQHandler+0x10>)
 8001be6:	f000 f96a 	bl	8001ebe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000158 	.word	0x20000158

08001bf4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bfa:	f006 f811 	bl	8007c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000314 	.word	0x20000314

08001c08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c0e:	f006 f807 	bl	8007c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000314 	.word	0x20000314

08001c1c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c22:	f005 fffd 	bl	8007c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000314 	.word	0x20000314

08001c30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <TIM1_CC_IRQHandler+0x10>)
 8001c36:	f005 fff3 	bl	8007c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000314 	.word	0x20000314

08001c44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c48:	4802      	ldr	r0, [pc, #8]	@ (8001c54 <I2C1_EV_IRQHandler+0x10>)
 8001c4a:	f002 f871 	bl	8003d30 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000200 	.word	0x20000200

08001c58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	@ (8001c68 <I2C1_ER_IRQHandler+0x10>)
 8001c5e:	f002 f9d8 	bl	8004012 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000200 	.word	0x20000200

08001c6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c70:	4802      	ldr	r0, [pc, #8]	@ (8001c7c <DMA2_Stream0_IRQHandler+0x10>)
 8001c72:	f001 f83b 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200001a0 	.word	0x200001a0

08001c80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <OTG_FS_IRQHandler+0x10>)
 8001c86:	f004 f9c7 	bl	8006018 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000128c 	.word	0x2000128c

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cbc:	f7ff ffea 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f00a fcb3 	bl	800c650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7fe fda7 	bl	800083c <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001cfc:	0800d4b8 	.word	0x0800d4b8
  ldr r2, =_sbss
 8001d00:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001d04:	20001990 	.word	0x20001990

08001d08 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <DMA1_Stream2_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fe6f 	bl	8002a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	200f      	movs	r0, #15
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fd68 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fe87 	bl	8002a82 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fe4f 	bl	8002a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000038 	.word	0x20000038
 8001da8:	20000040 	.word	0x20000040
 8001dac:	2000003c 	.word	0x2000003c

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000040 	.word	0x20000040
 8001dd4:	200009a4 	.word	0x200009a4

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	200009a4 	.word	0x200009a4

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000040 	.word	0x20000040

08001e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e033      	b.n	8001eb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fd04 	bl	8001864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e7e:	f023 0302 	bic.w	r3, r3, #2
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fb6c 	bl	8002568 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f023 0303 	bic.w	r3, r3, #3
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ea6:	e001      	b.n	8001eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d049      	beq.n	8001f88 <HAL_ADC_IRQHandler+0xca>
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d046      	beq.n	8001f88 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12b      	bne.n	8001f78 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d127      	bne.n	8001f78 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d006      	beq.n	8001f44 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d119      	bne.n	8001f78 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0220 	bic.w	r2, r2, #32
 8001f52:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fac3 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 0212 	mvn.w	r2, #18
 8001f86:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f96:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d057      	beq.n	800204e <HAL_ADC_IRQHandler+0x190>
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d054      	beq.n	800204e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d139      	bne.n	800203e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d12b      	bne.n	800203e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d124      	bne.n	800203e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d11d      	bne.n	800203e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d119      	bne.n	800203e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002018:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fc10 	bl	8002864 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 020c 	mvn.w	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d017      	beq.n	8002094 <HAL_ADC_IRQHandler+0x1d6>
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10d      	bne.n	8002094 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f929 	bl	80022dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f06f 0201 	mvn.w	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020a2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d015      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x218>
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	f043 0202 	orr.w	r2, r3, #2
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0220 	mvn.w	r2, #32
 80020c4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f912 	bl	80022f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	601a      	str	r2, [r3, #0]
  }
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_Start_DMA+0x22>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0d0      	b.n	80022a4 <HAL_ADC_Start_DMA+0x1c4>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d018      	beq.n	800214a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002128:	4b60      	ldr	r3, [pc, #384]	@ (80022ac <HAL_ADC_Start_DMA+0x1cc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a60      	ldr	r2, [pc, #384]	@ (80022b0 <HAL_ADC_Start_DMA+0x1d0>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0c9a      	lsrs	r2, r3, #18
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800213c:	e002      	b.n	8002144 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3b01      	subs	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002158:	d107      	bne.n	800216a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002168:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	f040 8088 	bne.w	800228a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002182:	f023 0301 	bic.w	r3, r3, #1
 8002186:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f023 0206 	bic.w	r2, r3, #6
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80021c6:	e002      	b.n	80021ce <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_ADC_Start_DMA+0x1d4>)
 80021d8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	4a36      	ldr	r2, [pc, #216]	@ (80022b8 <HAL_ADC_Start_DMA+0x1d8>)
 80021e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e6:	4a35      	ldr	r2, [pc, #212]	@ (80022bc <HAL_ADC_Start_DMA+0x1dc>)
 80021e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ee:	4a34      	ldr	r2, [pc, #208]	@ (80022c0 <HAL_ADC_Start_DMA+0x1e0>)
 80021f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800220a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800221a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	334c      	adds	r3, #76	@ 0x4c
 8002226:	4619      	mov	r1, r3
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f000 fce4 	bl	8002bf8 <HAL_DMA_Start_IT>
 8002230:	4603      	mov	r3, r0
 8002232:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d129      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	e020      	b.n	80022a2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a17      	ldr	r2, [pc, #92]	@ (80022c4 <HAL_ADC_Start_DMA+0x1e4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d11b      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1c2>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d114      	bne.n	80022a2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	e00b      	b.n	80022a2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000038 	.word	0x20000038
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	40012300 	.word	0x40012300
 80022b8:	08002761 	.word	0x08002761
 80022bc:	0800281b 	.word	0x0800281b
 80022c0:	08002837 	.word	0x08002837
 80022c4:	40012000 	.word	0x40012000

080022c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x1c>
 800231c:	2302      	movs	r3, #2
 800231e:	e113      	b.n	8002548 <HAL_ADC_ConfigChannel+0x244>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b09      	cmp	r3, #9
 800232e:	d925      	bls.n	800237c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68d9      	ldr	r1, [r3, #12]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	3b1e      	subs	r3, #30
 8002346:	2207      	movs	r2, #7
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43da      	mvns	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	400a      	ands	r2, r1
 8002354:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68d9      	ldr	r1, [r3, #12]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	4618      	mov	r0, r3
 8002368:	4603      	mov	r3, r0
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4403      	add	r3, r0
 800236e:	3b1e      	subs	r3, #30
 8002370:	409a      	lsls	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	e022      	b.n	80023c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6919      	ldr	r1, [r3, #16]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	2207      	movs	r2, #7
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	400a      	ands	r2, r1
 800239e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6919      	ldr	r1, [r3, #16]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	4603      	mov	r3, r0
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4403      	add	r3, r0
 80023b8:	409a      	lsls	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d824      	bhi.n	8002414 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b05      	subs	r3, #5
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	400a      	ands	r2, r1
 80023ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	3b05      	subs	r3, #5
 8002406:	fa00 f203 	lsl.w	r2, r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34
 8002412:	e04c      	b.n	80024ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b0c      	cmp	r3, #12
 800241a:	d824      	bhi.n	8002466 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	3b23      	subs	r3, #35	@ 0x23
 800242e:	221f      	movs	r2, #31
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43da      	mvns	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	400a      	ands	r2, r1
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	4618      	mov	r0, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b23      	subs	r3, #35	@ 0x23
 8002458:	fa00 f203 	lsl.w	r2, r0, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
 8002464:	e023      	b.n	80024ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	3b41      	subs	r3, #65	@ 0x41
 8002478:	221f      	movs	r2, #31
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	400a      	ands	r2, r1
 8002486:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	3b41      	subs	r3, #65	@ 0x41
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ae:	4b29      	ldr	r3, [pc, #164]	@ (8002554 <HAL_ADC_ConfigChannel+0x250>)
 80024b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a28      	ldr	r2, [pc, #160]	@ (8002558 <HAL_ADC_ConfigChannel+0x254>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10f      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1d8>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	d10b      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002558 <HAL_ADC_ConfigChannel+0x254>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d12b      	bne.n	800253e <HAL_ADC_ConfigChannel+0x23a>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a1c      	ldr	r2, [pc, #112]	@ (800255c <HAL_ADC_ConfigChannel+0x258>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d003      	beq.n	80024f8 <HAL_ADC_ConfigChannel+0x1f4>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b11      	cmp	r3, #17
 80024f6:	d122      	bne.n	800253e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a11      	ldr	r2, [pc, #68]	@ (800255c <HAL_ADC_ConfigChannel+0x258>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d111      	bne.n	800253e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_ADC_ConfigChannel+0x25c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a11      	ldr	r2, [pc, #68]	@ (8002564 <HAL_ADC_ConfigChannel+0x260>)
 8002520:	fba2 2303 	umull	r2, r3, r2, r3
 8002524:	0c9a      	lsrs	r2, r3, #18
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002530:	e002      	b.n	8002538 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	3b01      	subs	r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f9      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40012300 	.word	0x40012300
 8002558:	40012000 	.word	0x40012000
 800255c:	10000012 	.word	0x10000012
 8002560:	20000038 	.word	0x20000038
 8002564:	431bde83 	.word	0x431bde83

08002568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002570:	4b79      	ldr	r3, [pc, #484]	@ (8002758 <ADC_Init+0x1f0>)
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800259c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	4a58      	ldr	r2, [pc, #352]	@ (800275c <ADC_Init+0x1f4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800260e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	e00f      	b.n	8002666 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002664:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0202 	bic.w	r2, r2, #2
 8002674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7e1b      	ldrb	r3, [r3, #24]
 8002680:	005a      	lsls	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	3b01      	subs	r3, #1
 80026c0:	035a      	lsls	r2, r3, #13
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	e007      	b.n	80026dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	051a      	lsls	r2, r3, #20
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6899      	ldr	r1, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800271e:	025a      	lsls	r2, r3, #9
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	029a      	lsls	r2, r3, #10
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012300 	.word	0x40012300
 800275c:	0f000001 	.word	0x0f000001

08002760 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002776:	2b00      	cmp	r3, #0
 8002778:	d13c      	bne.n	80027f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d12b      	bne.n	80027ec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002798:	2b00      	cmp	r3, #0
 800279a:	d127      	bne.n	80027ec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d119      	bne.n	80027ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0220 	bic.w	r2, r2, #32
 80027c6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0201 	orr.w	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7fd fe89 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027f2:	e00e      	b.n	8002812 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff fd75 	bl	80022f0 <HAL_ADC_ErrorCallback>
}
 8002806:	e004      	b.n	8002812 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f7ff fd4d 	bl	80022c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f043 0204 	orr.w	r2, r3, #4
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fd4a 	bl	80022f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <__NVIC_SetPriorityGrouping+0x44>)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60d3      	str	r3, [r2, #12]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028c4:	4b04      	ldr	r3, [pc, #16]	@ (80028d8 <__NVIC_GetPriorityGrouping+0x18>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	f003 0307 	and.w	r3, r3, #7
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	db0b      	blt.n	8002906 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	4907      	ldr	r1, [pc, #28]	@ (8002914 <__NVIC_EnableIRQ+0x38>)
 80028f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	2001      	movs	r0, #1
 80028fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000e100 	.word	0xe000e100

08002918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	6039      	str	r1, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	2b00      	cmp	r3, #0
 800292a:	db0a      	blt.n	8002942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	490c      	ldr	r1, [pc, #48]	@ (8002964 <__NVIC_SetPriority+0x4c>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	0112      	lsls	r2, r2, #4
 8002938:	b2d2      	uxtb	r2, r2
 800293a:	440b      	add	r3, r1
 800293c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002940:	e00a      	b.n	8002958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4908      	ldr	r1, [pc, #32]	@ (8002968 <__NVIC_SetPriority+0x50>)
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3b04      	subs	r3, #4
 8002950:	0112      	lsls	r2, r2, #4
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	440b      	add	r3, r1
 8002956:	761a      	strb	r2, [r3, #24]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f1c3 0307 	rsb	r3, r3, #7
 8002986:	2b04      	cmp	r3, #4
 8002988:	bf28      	it	cs
 800298a:	2304      	movcs	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3304      	adds	r3, #4
 8002992:	2b06      	cmp	r3, #6
 8002994:	d902      	bls.n	800299c <NVIC_EncodePriority+0x30>
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3b03      	subs	r3, #3
 800299a:	e000      	b.n	800299e <NVIC_EncodePriority+0x32>
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a0:	f04f 32ff 	mov.w	r2, #4294967295
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43da      	mvns	r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	401a      	ands	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b4:	f04f 31ff 	mov.w	r1, #4294967295
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	43d9      	mvns	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c4:	4313      	orrs	r3, r2
         );
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	@ 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029e4:	d301      	bcc.n	80029ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00f      	b.n	8002a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <SysTick_Config+0x40>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029f2:	210f      	movs	r1, #15
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	f7ff ff8e 	bl	8002918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <SysTick_Config+0x40>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a02:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <SysTick_Config+0x40>)
 8002a04:	2207      	movs	r2, #7
 8002a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000e010 	.word	0xe000e010

08002a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff29 	bl	8002878 <__NVIC_SetPriorityGrouping>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a40:	f7ff ff3e 	bl	80028c0 <__NVIC_GetPriorityGrouping>
 8002a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	6978      	ldr	r0, [r7, #20]
 8002a4c:	f7ff ff8e 	bl	800296c <NVIC_EncodePriority>
 8002a50:	4602      	mov	r2, r0
 8002a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff5d 	bl	8002918 <__NVIC_SetPriority>
}
 8002a5e:	bf00      	nop
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff ff31 	bl	80028dc <__NVIC_EnableIRQ>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ffa2 	bl	80029d4 <SysTick_Config>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff f996 	bl	8001dd8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e099      	b.n	8002bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad8:	e00f      	b.n	8002afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ada:	f7ff f97d 	bl	8001dd8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d908      	bls.n	8002afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e078      	b.n	8002bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e8      	bne.n	8002ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <HAL_DMA_Init+0x158>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d117      	bne.n	8002bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 faab 	bl	80030fc <DMA_CheckFifoParam>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2240      	movs	r2, #64	@ 0x40
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e016      	b.n	8002bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa62 	bl	8003090 <DMA_CalcBaseAndBitshift>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	223f      	movs	r2, #63	@ 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	f010803f 	.word	0xf010803f

08002bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_DMA_Start_IT+0x26>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e040      	b.n	8002ca0 <HAL_DMA_Start_IT+0xa8>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d12f      	bne.n	8002c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f9f4 	bl	8003034 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0216 	orr.w	r2, r2, #22
 8002c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2280      	movs	r2, #128	@ 0x80
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00c      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2205      	movs	r2, #5
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8002f34 <HAL_DMA_IRQHandler+0x248>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a8e      	ldr	r2, [pc, #568]	@ (8002f38 <HAL_DMA_IRQHandler+0x24c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de6:	2210      	movs	r2, #16
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e01f      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	2220      	movs	r2, #32
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8087 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	2220      	movs	r2, #32
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d136      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x1da>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	223f      	movs	r2, #63	@ 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07e      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
        }
        return;
 8002f02:	e079      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e02c      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
 8002f32:	bf00      	nop
 8002f34:	20000038 	.word	0x20000038
 8002f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e01e      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d307      	bcc.n	8002fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x2cc>
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800300e:	b2db      	uxtb	r3, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003050:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b40      	cmp	r3, #64	@ 0x40
 8003060:	d108      	bne.n	8003074 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003072:	e007      	b.n	8003084 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
}
 8003084:	bf00      	nop
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	3b10      	subs	r3, #16
 80030a0:	4a14      	ldr	r2, [pc, #80]	@ (80030f4 <DMA_CalcBaseAndBitshift+0x64>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030aa:	4a13      	ldr	r2, [pc, #76]	@ (80030f8 <DMA_CalcBaseAndBitshift+0x68>)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d909      	bls.n	80030d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	1d1a      	adds	r2, r3, #4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80030d0:	e007      	b.n	80030e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	aaaaaaab 	.word	0xaaaaaaab
 80030f8:	0800d4a0 	.word	0x0800d4a0

080030fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d11f      	bne.n	8003156 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d856      	bhi.n	80031ca <DMA_CheckFifoParam+0xce>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <DMA_CheckFifoParam+0x28>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003135 	.word	0x08003135
 8003128:	08003147 	.word	0x08003147
 800312c:	08003135 	.word	0x08003135
 8003130:	080031cb 	.word	0x080031cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d046      	beq.n	80031ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003144:	e043      	b.n	80031ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800314e:	d140      	bne.n	80031d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003154:	e03d      	b.n	80031d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800315e:	d121      	bne.n	80031a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d837      	bhi.n	80031d6 <DMA_CheckFifoParam+0xda>
 8003166:	a201      	add	r2, pc, #4	@ (adr r2, 800316c <DMA_CheckFifoParam+0x70>)
 8003168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316c:	0800317d 	.word	0x0800317d
 8003170:	08003183 	.word	0x08003183
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003195 	.word	0x08003195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      break;
 8003180:	e030      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d025      	beq.n	80031da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e022      	b.n	80031da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800319c:	d11f      	bne.n	80031de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031a2:	e01c      	b.n	80031de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d903      	bls.n	80031b2 <DMA_CheckFifoParam+0xb6>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d003      	beq.n	80031b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031b0:	e018      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
      break;
 80031b6:	e015      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00e      	beq.n	80031e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e00b      	b.n	80031e2 <DMA_CheckFifoParam+0xe6>
      break;
 80031ca:	bf00      	nop
 80031cc:	e00a      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ce:	bf00      	nop
 80031d0:	e008      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031d2:	bf00      	nop
 80031d4:	e006      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
 80031d8:	e004      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031da:	bf00      	nop
 80031dc:	e002      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <DMA_CheckFifoParam+0xe8>
      break;
 80031e2:	bf00      	nop
    }
  } 
  
  return status; 
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop

080031f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	e159      	b.n	80034c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003210:	2201      	movs	r2, #1
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	f040 8148 	bne.w	80034be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d005      	beq.n	8003246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003242:	2b02      	cmp	r3, #2
 8003244:	d130      	bne.n	80032a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800327c:	2201      	movs	r2, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 0201 	and.w	r2, r3, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d017      	beq.n	80032e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	2203      	movs	r2, #3
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d123      	bne.n	8003338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	08da      	lsrs	r2, r3, #3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3208      	adds	r2, #8
 80032f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	220f      	movs	r2, #15
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	08da      	lsrs	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3208      	adds	r2, #8
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	2203      	movs	r2, #3
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0203 	and.w	r2, r3, #3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a2 	beq.w	80034be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b57      	ldr	r3, [pc, #348]	@ (80034dc <HAL_GPIO_Init+0x2e8>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	4a56      	ldr	r2, [pc, #344]	@ (80034dc <HAL_GPIO_Init+0x2e8>)
 8003384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003388:	6453      	str	r3, [r2, #68]	@ 0x44
 800338a:	4b54      	ldr	r3, [pc, #336]	@ (80034dc <HAL_GPIO_Init+0x2e8>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003396:	4a52      	ldr	r2, [pc, #328]	@ (80034e0 <HAL_GPIO_Init+0x2ec>)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a49      	ldr	r2, [pc, #292]	@ (80034e4 <HAL_GPIO_Init+0x2f0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d019      	beq.n	80033f6 <HAL_GPIO_Init+0x202>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a48      	ldr	r2, [pc, #288]	@ (80034e8 <HAL_GPIO_Init+0x2f4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_GPIO_Init+0x1fe>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a47      	ldr	r2, [pc, #284]	@ (80034ec <HAL_GPIO_Init+0x2f8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00d      	beq.n	80033ee <HAL_GPIO_Init+0x1fa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a46      	ldr	r2, [pc, #280]	@ (80034f0 <HAL_GPIO_Init+0x2fc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <HAL_GPIO_Init+0x1f6>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a45      	ldr	r2, [pc, #276]	@ (80034f4 <HAL_GPIO_Init+0x300>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_GPIO_Init+0x1f2>
 80033e2:	2304      	movs	r3, #4
 80033e4:	e008      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033e6:	2307      	movs	r3, #7
 80033e8:	e006      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033ea:	2303      	movs	r3, #3
 80033ec:	e004      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e002      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_GPIO_Init+0x204>
 80033f6:	2300      	movs	r3, #0
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	f002 0203 	and.w	r2, r2, #3
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4093      	lsls	r3, r2
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003408:	4935      	ldr	r1, [pc, #212]	@ (80034e0 <HAL_GPIO_Init+0x2ec>)
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	3302      	adds	r3, #2
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003416:	4b38      	ldr	r3, [pc, #224]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	43db      	mvns	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4013      	ands	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800343a:	4a2f      	ldr	r2, [pc, #188]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003440:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003464:	4a24      	ldr	r2, [pc, #144]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800346a:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800348e:	4a1a      	ldr	r2, [pc, #104]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003494:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b8:	4a0f      	ldr	r2, [pc, #60]	@ (80034f8 <HAL_GPIO_Init+0x304>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3301      	adds	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	f67f aea2 	bls.w	8003210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3724      	adds	r7, #36	@ 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40013800 	.word	0x40013800
 80034e4:	40020000 	.word	0x40020000
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003518:	e003      	b.n	8003522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	619a      	str	r2, [r3, #24]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003540:	887a      	ldrh	r2, [r7, #2]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4013      	ands	r3, r2
 8003546:	041a      	lsls	r2, r3, #16
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	43d9      	mvns	r1, r3
 800354c:	887b      	ldrh	r3, [r7, #2]
 800354e:	400b      	ands	r3, r1
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e12b      	b.n	80037ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe f9e8 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	@ 0x24
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c8:	f004 fa64 	bl	8007a94 <HAL_RCC_GetPCLK1Freq>
 80035cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a81      	ldr	r2, [pc, #516]	@ (80037d8 <HAL_I2C_Init+0x274>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d807      	bhi.n	80035e8 <HAL_I2C_Init+0x84>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a80      	ldr	r2, [pc, #512]	@ (80037dc <HAL_I2C_Init+0x278>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	bf94      	ite	ls
 80035e0:	2301      	movls	r3, #1
 80035e2:	2300      	movhi	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e006      	b.n	80035f6 <HAL_I2C_Init+0x92>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a7d      	ldr	r2, [pc, #500]	@ (80037e0 <HAL_I2C_Init+0x27c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0e7      	b.n	80037ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4a78      	ldr	r2, [pc, #480]	@ (80037e4 <HAL_I2C_Init+0x280>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0c9b      	lsrs	r3, r3, #18
 8003608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	4a6a      	ldr	r2, [pc, #424]	@ (80037d8 <HAL_I2C_Init+0x274>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d802      	bhi.n	8003638 <HAL_I2C_Init+0xd4>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3301      	adds	r3, #1
 8003636:	e009      	b.n	800364c <HAL_I2C_Init+0xe8>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	4a69      	ldr	r2, [pc, #420]	@ (80037e8 <HAL_I2C_Init+0x284>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	099b      	lsrs	r3, r3, #6
 800364a:	3301      	adds	r3, #1
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	430b      	orrs	r3, r1
 8003652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800365e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	495c      	ldr	r1, [pc, #368]	@ (80037d8 <HAL_I2C_Init+0x274>)
 8003668:	428b      	cmp	r3, r1
 800366a:	d819      	bhi.n	80036a0 <HAL_I2C_Init+0x13c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e59      	subs	r1, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fbb1 f3f3 	udiv	r3, r1, r3
 800367a:	1c59      	adds	r1, r3, #1
 800367c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003680:	400b      	ands	r3, r1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_I2C_Init+0x138>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e59      	subs	r1, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fbb1 f3f3 	udiv	r3, r1, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369a:	e051      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 800369c:	2304      	movs	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x168>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x18e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x196>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1dc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fe:	2b80      	cmp	r3, #128	@ 0x80
 8003800:	d103      	bne.n	800380a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
  }
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	@ 0x28
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4603      	mov	r3, r0
 8003828:	817b      	strh	r3, [r7, #10]
 800382a:	460b      	mov	r3, r1
 800382c:	813b      	strh	r3, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7fe facf 	bl	8001dd8 <HAL_GetTick>
 800383a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b20      	cmp	r3, #32
 8003846:	f040 8136 	bne.w	8003ab6 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800384a:	4b9d      	ldr	r3, [pc, #628]	@ (8003ac0 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	08db      	lsrs	r3, r3, #3
 8003850:	4a9c      	ldr	r2, [pc, #624]	@ (8003ac4 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0a1a      	lsrs	r2, r3, #8
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3b01      	subs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d112      	bne.n	8003896 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	e110      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d0df      	beq.n	8003864 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2C_Mem_Write_DMA+0x9a>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e102      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d007      	beq.n	80038d8 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f042 0201 	orr.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2221      	movs	r2, #33	@ 0x21
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	@ 0x40
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003908:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a6c      	ldr	r2, [pc, #432]	@ (8003ac8 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800391a:	897a      	ldrh	r2, [r7, #10]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003920:	893a      	ldrh	r2, [r7, #8]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a9 	beq.w	8003a8e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02a      	beq.n	800399a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003948:	4a60      	ldr	r2, [pc, #384]	@ (8003acc <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad0 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8003952:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003960:	2200      	movs	r2, #0
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003968:	2200      	movs	r2, #0
 800396a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003970:	2200      	movs	r2, #0
 8003972:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	4619      	mov	r1, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3310      	adds	r3, #16
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398a:	f7ff f935 	bl	8002bf8 <HAL_DMA_Start_IT>
 800398e:	4603      	mov	r3, r0
 8003990:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003992:	7efb      	ldrb	r3, [r7, #27]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d166      	bne.n	8003a66 <HAL_I2C_Mem_Write_DMA+0x24e>
 8003998:	e013      	b.n	80039c2 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07a      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80039c2:	88f8      	ldrh	r0, [r7, #6]
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	8979      	ldrh	r1, [r7, #10]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	2323      	movs	r3, #35	@ 0x23
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4603      	mov	r3, r0
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f001 fda4 	bl	8005520 <I2C_RequestMemoryWrite>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d022      	beq.n	8003a24 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff f960 	bl	8002ca8 <HAL_DMA_Abort_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f0:	2200      	movs	r2, #0
 80039f2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a02:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e049      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a50:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a60:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e028      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f043 0210 	orr.w	r2, r3, #16
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e014      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003ab6:	2302      	movs	r3, #2
  }
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000038 	.word	0x20000038
 8003ac4:	14f8b589 	.word	0x14f8b589
 8003ac8:	ffff0000 	.word	0xffff0000
 8003acc:	0800564d 	.word	0x0800564d
 8003ad0:	0800580b 	.word	0x0800580b

08003ad4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	@ 0x28
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ae4:	f7fe f978 	bl	8001dd8 <HAL_GetTick>
 8003ae8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	f040 8111 	bne.w	8003d1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2319      	movs	r3, #25
 8003b02:	2201      	movs	r2, #1
 8003b04:	4988      	ldr	r1, [pc, #544]	@ (8003d28 <HAL_I2C_IsDeviceReady+0x254>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f001 ff64 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	e104      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2C_IsDeviceReady+0x50>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0fd      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d007      	beq.n	8003b4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2224      	movs	r2, #36	@ 0x24
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a70      	ldr	r2, [pc, #448]	@ (8003d2c <HAL_I2C_IsDeviceReady+0x258>)
 8003b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f001 ff22 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba4:	d103      	bne.n	8003bae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0b6      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe f909 	bl	8001dd8 <HAL_GetTick>
 8003bc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bf6:	e025      	b.n	8003c44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf8:	f7fe f8ee 	bl	8001dd8 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <HAL_I2C_IsDeviceReady+0x13a>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	22a0      	movs	r2, #160	@ 0xa0
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c4e:	d005      	beq.n	8003c5c <HAL_I2C_IsDeviceReady+0x188>
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <HAL_I2C_IsDeviceReady+0x188>
 8003c56:	7dbb      	ldrb	r3, [r7, #22]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0cd      	beq.n	8003bf8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d129      	bne.n	8003cc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2319      	movs	r3, #25
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4921      	ldr	r1, [pc, #132]	@ (8003d28 <HAL_I2C_IsDeviceReady+0x254>)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f001 fe96 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e036      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e02c      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	2319      	movs	r3, #25
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	490f      	ldr	r1, [pc, #60]	@ (8003d28 <HAL_I2C_IsDeviceReady+0x254>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f001 fe72 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e012      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	f4ff af32 	bcc.w	8003b6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d1e:	2302      	movs	r3, #2
  }
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	00100002 	.word	0x00100002
 8003d2c:	ffff0000 	.word	0xffff0000

08003d30 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d48:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d58:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b10      	cmp	r3, #16
 8003d5e:	d003      	beq.n	8003d68 <HAL_I2C_EV_IRQHandler+0x38>
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b40      	cmp	r3, #64	@ 0x40
 8003d64:	f040 80c1 	bne.w	8003eea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <HAL_I2C_EV_IRQHandler+0x6e>
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003d88:	d003      	beq.n	8003d92 <HAL_I2C_EV_IRQHandler+0x62>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_EV_IRQHandler+0x66>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x68>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f000 8132 	beq.w	8004002 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x92>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	0a5b      	lsrs	r3, r3, #9
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d006      	beq.n	8003dc2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 ffd0 	bl	8005d5a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fd91 	bl	80048e2 <I2C_Master_SB>
 8003dc0:	e092      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	08db      	lsrs	r3, r3, #3
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0xb2>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	0a5b      	lsrs	r3, r3, #9
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fe07 	bl	80049ee <I2C_Master_ADD10>
 8003de0:	e082      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	085b      	lsrs	r3, r3, #1
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_I2C_EV_IRQHandler+0xd2>
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0a5b      	lsrs	r3, r3, #9
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fe21 	bl	8004a42 <I2C_Master_ADDR>
 8003e00:	e072      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d03b      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e1c:	f000 80f3 	beq.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	09db      	lsrs	r3, r3, #7
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00f      	beq.n	8003e4c <HAL_I2C_EV_IRQHandler+0x11c>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HAL_I2C_EV_IRQHandler+0x11c>
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	089b      	lsrs	r3, r3, #2
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d103      	bne.n	8003e4c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9e9 	bl	800421c <I2C_MasterTransmit_TXE>
 8003e4a:	e04d      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80d6 	beq.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80cf 	beq.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e68:	7bbb      	ldrb	r3, [r7, #14]
 8003e6a:	2b21      	cmp	r3, #33	@ 0x21
 8003e6c:	d103      	bne.n	8003e76 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fa70 	bl	8004354 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	e0c7      	b.n	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	f040 80c4 	bne.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fade 	bl	8004440 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e84:	e0bf      	b.n	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e94:	f000 80b7 	beq.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	099b      	lsrs	r3, r3, #6
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x194>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x194>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fb57 	bl	8004570 <I2C_MasterReceive_RXNE>
 8003ec2:	e011      	b.n	8003ee8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	089b      	lsrs	r3, r3, #2
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 809a 	beq.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	0a5b      	lsrs	r3, r3, #9
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8093 	beq.w	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fc0d 	bl	8004700 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ee6:	e08e      	b.n	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ee8:	e08d      	b.n	8004006 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	61fb      	str	r3, [r7, #28]
 8003efa:	e007      	b.n	8003f0c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d012      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x20e>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	0a5b      	lsrs	r3, r3, #9
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00c      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 ffd2 	bl	8004ee0 <I2C_Slave_ADDR>
 8003f3c:	e066      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x22e>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	0a5b      	lsrs	r3, r3, #9
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f001 f80c 	bl	8004f74 <I2C_Slave_STOPF>
 8003f5c:	e056      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	2b21      	cmp	r3, #33	@ 0x21
 8003f62:	d002      	beq.n	8003f6a <HAL_I2C_EV_IRQHandler+0x23a>
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	2b29      	cmp	r3, #41	@ 0x29
 8003f68:	d125      	bne.n	8003fb6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	09db      	lsrs	r3, r3, #7
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00f      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x266>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	0a9b      	lsrs	r3, r3, #10
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_I2C_EV_IRQHandler+0x266>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	089b      	lsrs	r3, r3, #2
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fee8 	bl	8004d64 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f94:	e039      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d033      	beq.n	800400a <HAL_I2C_EV_IRQHandler+0x2da>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	0a5b      	lsrs	r3, r3, #9
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02d      	beq.n	800400a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 ff15 	bl	8004dde <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb4:	e029      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	0a9b      	lsrs	r3, r3, #10
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d103      	bne.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 ff20 	bl	8004e20 <I2C_SlaveReceive_RXNE>
 8003fe0:	e014      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	0a5b      	lsrs	r3, r3, #9
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d008      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 ff4e 	bl	8004e9c <I2C_SlaveReceive_BTF>
 8004000:	e004      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004002:	bf00      	nop
 8004004:	e002      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004006:	bf00      	nop
 8004008:	e000      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800400a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08a      	sub	sp, #40	@ 0x28
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004034:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00e      	beq.n	8004060 <HAL_I2C_ER_IRQHandler+0x4e>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800405e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	0a5b      	lsrs	r3, r3, #9
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00e      	beq.n	800408a <HAL_I2C_ER_IRQHandler+0x78>
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004088:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	0a9b      	lsrs	r3, r3, #10
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d03f      	beq.n	8004116 <HAL_I2C_ER_IRQHandler+0x104>
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d039      	beq.n	8004116 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80040a2:	7efb      	ldrb	r3, [r7, #27]
 80040a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80040bc:	7ebb      	ldrb	r3, [r7, #26]
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d112      	bne.n	80040e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10f      	bne.n	80040e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b21      	cmp	r3, #33	@ 0x21
 80040cc:	d008      	beq.n	80040e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b29      	cmp	r3, #41	@ 0x29
 80040d2:	d005      	beq.n	80040e0 <HAL_I2C_ER_IRQHandler+0xce>
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b28      	cmp	r3, #40	@ 0x28
 80040d8:	d106      	bne.n	80040e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b21      	cmp	r3, #33	@ 0x21
 80040de:	d103      	bne.n	80040e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f001 f877 	bl	80051d4 <I2C_Slave_AF>
 80040e6:	e016      	b.n	8004116 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040fa:	7efb      	ldrb	r3, [r7, #27]
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d002      	beq.n	8004106 <HAL_I2C_ER_IRQHandler+0xf4>
 8004100:	7efb      	ldrb	r3, [r7, #27]
 8004102:	2b40      	cmp	r3, #64	@ 0x40
 8004104:	d107      	bne.n	8004116 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004114:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	0adb      	lsrs	r3, r3, #11
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00e      	beq.n	8004140 <HAL_I2C_ER_IRQHandler+0x12e>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	f043 0308 	orr.w	r3, r3, #8
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800413e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 f8b2 	bl	80052bc <I2C_ITError>
  }
}
 8004158:	bf00      	nop
 800415a:	3728      	adds	r7, #40	@ 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
 80041bc:	4613      	mov	r3, r2
 80041be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004232:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d150      	bne.n	80042e4 <I2C_MasterTransmit_TXE+0xc8>
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b21      	cmp	r3, #33	@ 0x21
 8004246:	d14d      	bne.n	80042e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b08      	cmp	r3, #8
 800424c:	d01d      	beq.n	800428a <I2C_MasterTransmit_TXE+0x6e>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b20      	cmp	r3, #32
 8004252:	d01a      	beq.n	800428a <I2C_MasterTransmit_TXE+0x6e>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800425a:	d016      	beq.n	800428a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800426a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2211      	movs	r2, #17
 8004270:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ff6c 	bl	8004160 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004288:	e060      	b.n	800434c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004298:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b40      	cmp	r3, #64	@ 0x40
 80042c2:	d107      	bne.n	80042d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fc f939 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042d2:	e03b      	b.n	800434c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff3f 	bl	8004160 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042e2:	e033      	b.n	800434c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b21      	cmp	r3, #33	@ 0x21
 80042e8:	d005      	beq.n	80042f6 <I2C_MasterTransmit_TXE+0xda>
 80042ea:	7bbb      	ldrb	r3, [r7, #14]
 80042ec:	2b40      	cmp	r3, #64	@ 0x40
 80042ee:	d12d      	bne.n	800434c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b22      	cmp	r3, #34	@ 0x22
 80042f4:	d12a      	bne.n	800434c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800430e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004310:	e01c      	b.n	800434c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d103      	bne.n	8004326 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f88e 	bl	8004440 <I2C_MemoryTransmit_TXE_BTF>
}
 8004324:	e012      	b.n	800434c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	781a      	ldrb	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800434a:	e7ff      	b.n	800434c <I2C_MasterTransmit_TXE+0x130>
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b21      	cmp	r3, #33	@ 0x21
 800436c:	d164      	bne.n	8004438 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	781a      	ldrb	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800439c:	e04c      	b.n	8004438 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d01d      	beq.n	80043e0 <I2C_MasterTransmit_BTF+0x8c>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	d01a      	beq.n	80043e0 <I2C_MasterTransmit_BTF+0x8c>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043b0:	d016      	beq.n	80043e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2211      	movs	r2, #17
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fec1 	bl	8004160 <HAL_I2C_MasterTxCpltCallback>
}
 80043de:	e02b      	b.n	8004438 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b40      	cmp	r3, #64	@ 0x40
 8004418:	d107      	bne.n	800442a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc f88e 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 8004428:	e006      	b.n	8004438 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff fe94 	bl	8004160 <HAL_I2C_MasterTxCpltCallback>
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11d      	bne.n	8004494 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10b      	bne.n	8004478 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004464:	b2da      	uxtb	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004470:	1c9a      	adds	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004476:	e077      	b.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447c:	b29b      	uxth	r3, r3
 800447e:	121b      	asrs	r3, r3, #8
 8004480:	b2da      	uxtb	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004492:	e069      	b.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10b      	bne.n	80044b4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044b2:	e059      	b.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d152      	bne.n	8004562 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b22      	cmp	r3, #34	@ 0x22
 80044c0:	d10d      	bne.n	80044de <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044dc:	e044      	b.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b21      	cmp	r3, #33	@ 0x21
 80044ec:	d112      	bne.n	8004514 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004512:	e029      	b.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d124      	bne.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	2b21      	cmp	r3, #33	@ 0x21
 8004522:	d121      	bne.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004532:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004542:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fb fff2 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 8004560:	e002      	b.n	8004568 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff f942 	bl	80037ec <I2C_Flush_DR>
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b22      	cmp	r3, #34	@ 0x22
 8004582:	f040 80b9 	bne.w	80046f8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d921      	bls.n	80045de <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	f040 8096 	bne.w	80046f8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045da:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80045dc:	e08c      	b.n	80046f8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d07f      	beq.n	80046e6 <I2C_MasterReceive_RXNE+0x176>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d002      	beq.n	80045f2 <I2C_MasterReceive_RXNE+0x82>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d179      	bne.n	80046e6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f001 fb50 	bl	8005c98 <I2C_WaitOnSTOPRequestThroughIT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d14c      	bne.n	8004698 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800461c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b40      	cmp	r3, #64	@ 0x40
 8004656:	d10a      	bne.n	800466e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fdba 	bl	80041e0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800466c:	e044      	b.n	80046f8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d002      	beq.n	8004682 <I2C_MasterReceive_RXNE+0x112>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b20      	cmp	r3, #32
 8004680:	d103      	bne.n	800468a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
 8004688:	e002      	b.n	8004690 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2212      	movs	r2, #18
 800468e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff fd6f 	bl	8004174 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004696:	e02f      	b.n	80046f8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fd88 	bl	80041f4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80046e4:	e008      	b.n	80046f8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f4:	605a      	str	r2, [r3, #4]
}
 80046f6:	e7ff      	b.n	80046f8 <I2C_MasterReceive_RXNE+0x188>
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b04      	cmp	r3, #4
 8004716:	d11b      	bne.n	8004750 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004726:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800474e:	e0c4      	b.n	80048da <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d129      	bne.n	80047ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004768:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d00a      	beq.n	8004786 <I2C_MasterReceive_BTF+0x86>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d007      	beq.n	8004786 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004784:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047ac:	e095      	b.n	80048da <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d17d      	bne.n	80048b4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d002      	beq.n	80047c4 <I2C_MasterReceive_BTF+0xc4>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d108      	bne.n	80047d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e016      	b.n	8004804 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d002      	beq.n	80047e2 <I2C_MasterReceive_BTF+0xe2>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d108      	bne.n	80047f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004802:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800485e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b40      	cmp	r3, #64	@ 0x40
 8004872:	d10a      	bne.n	800488a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fcac 	bl	80041e0 <HAL_I2C_MemRxCpltCallback>
}
 8004888:	e027      	b.n	80048da <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d002      	beq.n	800489e <I2C_MasterReceive_BTF+0x19e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b20      	cmp	r3, #32
 800489c:	d103      	bne.n	80048a6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048a4:	e002      	b.n	80048ac <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2212      	movs	r2, #18
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fc61 	bl	8004174 <HAL_I2C_MasterRxCpltCallback>
}
 80048b2:	e012      	b.n	80048da <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b40      	cmp	r3, #64	@ 0x40
 80048f4:	d117      	bne.n	8004926 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800490e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004910:	e067      	b.n	80049e2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	b2da      	uxtb	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	611a      	str	r2, [r3, #16]
}
 8004924:	e05d      	b.n	80049e2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492e:	d133      	bne.n	8004998 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b21      	cmp	r3, #33	@ 0x21
 800493a:	d109      	bne.n	8004950 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800494c:	611a      	str	r2, [r3, #16]
 800494e:	e008      	b.n	8004962 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004966:	2b00      	cmp	r3, #0
 8004968:	d004      	beq.n	8004974 <I2C_Master_SB+0x92>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d108      	bne.n	8004986 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004978:	2b00      	cmp	r3, #0
 800497a:	d032      	beq.n	80049e2 <I2C_Master_SB+0x100>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02d      	beq.n	80049e2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004994:	605a      	str	r2, [r3, #4]
}
 8004996:	e024      	b.n	80049e2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	11db      	asrs	r3, r3, #7
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0306 	and.w	r3, r3, #6
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f063 030f 	orn	r3, r3, #15
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	611a      	str	r2, [r3, #16]
}
 80049bc:	e011      	b.n	80049e2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d10d      	bne.n	80049e2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	11db      	asrs	r3, r3, #7
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	f003 0306 	and.w	r3, r3, #6
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f063 030e 	orn	r3, r3, #14
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <I2C_Master_ADD10+0x26>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d108      	bne.n	8004a26 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <I2C_Master_ADD10+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a34:	605a      	str	r2, [r3, #4]
  }
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b091      	sub	sp, #68	@ 0x44
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a50:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b22      	cmp	r3, #34	@ 0x22
 8004a6a:	f040 8169 	bne.w	8004d40 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <I2C_Master_ADDR+0x54>
 8004a76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d10b      	bne.n	8004a96 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7e:	2300      	movs	r3, #0
 8004a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	e160      	b.n	8004d58 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d11d      	bne.n	8004ada <I2C_Master_ADDR+0x98>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004aa6:	d118      	bne.n	8004ada <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004acc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ad8:	e13e      	b.n	8004d58 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d113      	bne.n	8004b0c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e115      	b.n	8004d38 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 808a 	bne.w	8004c2c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b1e:	d137      	bne.n	8004b90 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b3e:	d113      	bne.n	8004b68 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b4e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	e0e7      	b.n	8004d38 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e0d3      	b.n	8004d38 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d02e      	beq.n	8004bf4 <I2C_Master_ADDR+0x1b2>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d02b      	beq.n	8004bf4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	2b12      	cmp	r3, #18
 8004ba0:	d102      	bne.n	8004ba8 <I2C_Master_ADDR+0x166>
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d125      	bne.n	8004bf4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d00e      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d00b      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d008      	beq.n	8004bcc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e007      	b.n	8004bdc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bda:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bdc:	2300      	movs	r3, #0
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	e0a1      	b.n	8004d38 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c02:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e085      	b.n	8004d38 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d14d      	bne.n	8004cd2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d016      	beq.n	8004c6a <I2C_Master_ADDR+0x228>
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d013      	beq.n	8004c6a <I2C_Master_ADDR+0x228>
 8004c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d010      	beq.n	8004c6a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c56:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e007      	b.n	8004c7a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c78:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c88:	d117      	bne.n	8004cba <I2C_Master_ADDR+0x278>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c90:	d00b      	beq.n	8004caa <I2C_Master_ADDR+0x268>
 8004c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d008      	beq.n	8004caa <I2C_Master_ADDR+0x268>
 8004c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d005      	beq.n	8004caa <I2C_Master_ADDR+0x268>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca0:	2b10      	cmp	r3, #16
 8004ca2:	d002      	beq.n	8004caa <I2C_Master_ADDR+0x268>
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d107      	bne.n	8004cba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004cb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	e032      	b.n	8004d38 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ce0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf0:	d117      	bne.n	8004d22 <I2C_Master_ADDR+0x2e0>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cf8:	d00b      	beq.n	8004d12 <I2C_Master_ADDR+0x2d0>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d008      	beq.n	8004d12 <I2C_Master_ADDR+0x2d0>
 8004d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d005      	beq.n	8004d12 <I2C_Master_ADDR+0x2d0>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d002      	beq.n	8004d12 <I2C_Master_ADDR+0x2d0>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d107      	bne.n	8004d22 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d20:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	613b      	str	r3, [r7, #16]
 8004d36:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d3e:	e00b      	b.n	8004d58 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
}
 8004d56:	e7ff      	b.n	8004d58 <I2C_Master_ADDR+0x316>
 8004d58:	bf00      	nop
 8004d5a:	3744      	adds	r7, #68	@ 0x44
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d72:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d02b      	beq.n	8004dd6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	781a      	ldrb	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	1c5a      	adds	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d114      	bne.n	8004dd6 <I2C_SlaveTransmit_TXE+0x72>
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b29      	cmp	r3, #41	@ 0x29
 8004db0:	d111      	bne.n	8004dd6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2221      	movs	r2, #33	@ 0x21
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2228      	movs	r2, #40	@ 0x28
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff f9d9 	bl	8004188 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d011      	beq.n	8004e14 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d02c      	beq.n	8004e94 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d114      	bne.n	8004e94 <I2C_SlaveReceive_RXNE+0x74>
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e6e:	d111      	bne.n	8004e94 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2222      	movs	r2, #34	@ 0x22
 8004e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2228      	movs	r2, #40	@ 0x28
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff f984 	bl	800419c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004efa:	2b28      	cmp	r3, #40	@ 0x28
 8004efc:	d127      	bne.n	8004f4e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	089b      	lsrs	r3, r3, #2
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	09db      	lsrs	r3, r3, #7
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	81bb      	strh	r3, [r7, #12]
 8004f30:	e002      	b.n	8004f38 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f40:	89ba      	ldrh	r2, [r7, #12]
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff f932 	bl	80041b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f4c:	e00e      	b.n	8004f6c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f82:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f92:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f94:	2300      	movs	r3, #0
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fd0:	d172      	bne.n	80050b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b22      	cmp	r3, #34	@ 0x22
 8004fd6:	d002      	beq.n	8004fde <I2C_Slave_STOPF+0x6a>
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fdc:	d135      	bne.n	800504a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005010:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd fff2 	bl	8003000 <HAL_DMA_GetState>
 800501c:	4603      	mov	r3, r0
 800501e:	2b01      	cmp	r3, #1
 8005020:	d049      	beq.n	80050b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005026:	4a69      	ldr	r2, [pc, #420]	@ (80051cc <I2C_Slave_STOPF+0x258>)
 8005028:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	4618      	mov	r0, r3
 8005030:	f7fd fe3a 	bl	8002ca8 <HAL_DMA_Abort_IT>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d03d      	beq.n	80050b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005044:	4610      	mov	r0, r2
 8005046:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005048:	e035      	b.n	80050b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f043 0204 	orr.w	r2, r3, #4
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800507c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	4618      	mov	r0, r3
 8005084:	f7fd ffbc 	bl	8003000 <HAL_DMA_GetState>
 8005088:	4603      	mov	r3, r0
 800508a:	2b01      	cmp	r3, #1
 800508c:	d014      	beq.n	80050b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005092:	4a4e      	ldr	r2, [pc, #312]	@ (80051cc <I2C_Slave_STOPF+0x258>)
 8005094:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd fe04 	bl	8002ca8 <HAL_DMA_Abort_IT>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80050b0:	4610      	mov	r0, r2
 80050b2:	4798      	blx	r3
 80050b4:	e000      	b.n	80050b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d03e      	beq.n	8005140 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d112      	bne.n	80050f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005100:	2b40      	cmp	r3, #64	@ 0x40
 8005102:	d112      	bne.n	800512a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	f043 0204 	orr.w	r2, r3, #4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8b7 	bl	80052bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800514e:	e039      	b.n	80051c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b2a      	cmp	r3, #42	@ 0x2a
 8005154:	d109      	bne.n	800516a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2228      	movs	r2, #40	@ 0x28
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff f819 	bl	800419c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b28      	cmp	r3, #40	@ 0x28
 8005174:	d111      	bne.n	800519a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a15      	ldr	r2, [pc, #84]	@ (80051d0 <I2C_Slave_STOPF+0x25c>)
 800517a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff f81a 	bl	80041cc <HAL_I2C_ListenCpltCallback>
}
 8005198:	e014      	b.n	80051c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519e:	2b22      	cmp	r3, #34	@ 0x22
 80051a0:	d002      	beq.n	80051a8 <I2C_Slave_STOPF+0x234>
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	2b22      	cmp	r3, #34	@ 0x22
 80051a6:	d10d      	bne.n	80051c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fe ffec 	bl	800419c <HAL_I2C_SlaveRxCpltCallback>
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	08005885 	.word	0x08005885
 80051d0:	ffff0000 	.word	0xffff0000

080051d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d002      	beq.n	80051f6 <I2C_Slave_AF+0x22>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d129      	bne.n	800524a <I2C_Slave_AF+0x76>
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b28      	cmp	r3, #40	@ 0x28
 80051fa:	d126      	bne.n	800524a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a2e      	ldr	r2, [pc, #184]	@ (80052b8 <I2C_Slave_AF+0xe4>)
 8005200:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005210:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800521a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fe ffc2 	bl	80041cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005248:	e031      	b.n	80052ae <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b21      	cmp	r3, #33	@ 0x21
 800524e:	d129      	bne.n	80052a4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <I2C_Slave_AF+0xe4>)
 8005254:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2221      	movs	r2, #33	@ 0x21
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800527a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005284:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fe faa8 	bl	80037ec <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fe ff73 	bl	8004188 <HAL_I2C_SlaveTxCpltCallback>
}
 80052a2:	e004      	b.n	80052ae <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052ac:	615a      	str	r2, [r3, #20]
}
 80052ae:	bf00      	nop
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	ffff0000 	.word	0xffff0000

080052bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d002      	beq.n	80052e0 <I2C_ITError+0x24>
 80052da:	7bbb      	ldrb	r3, [r7, #14]
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d10a      	bne.n	80052f6 <I2C_ITError+0x3a>
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b22      	cmp	r3, #34	@ 0x22
 80052e4:	d107      	bne.n	80052f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80052fc:	2b28      	cmp	r3, #40	@ 0x28
 80052fe:	d107      	bne.n	8005310 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2228      	movs	r2, #40	@ 0x28
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800530e:	e015      	b.n	800533c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800531a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800531e:	d00a      	beq.n	8005336 <I2C_ITError+0x7a>
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	2b60      	cmp	r3, #96	@ 0x60
 8005324:	d007      	beq.n	8005336 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800534a:	d162      	bne.n	8005412 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800535a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b01      	cmp	r3, #1
 8005368:	d020      	beq.n	80053ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536e:	4a6a      	ldr	r2, [pc, #424]	@ (8005518 <I2C_ITError+0x25c>)
 8005370:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005376:	4618      	mov	r0, r3
 8005378:	f7fd fc96 	bl	8002ca8 <HAL_DMA_Abort_IT>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8089 	beq.w	8005496 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053a6:	4610      	mov	r0, r2
 80053a8:	4798      	blx	r3
 80053aa:	e074      	b.n	8005496 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	4a59      	ldr	r2, [pc, #356]	@ (8005518 <I2C_ITError+0x25c>)
 80053b2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fd fc75 	bl	8002ca8 <HAL_DMA_Abort_IT>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d068      	beq.n	8005496 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ce:	2b40      	cmp	r3, #64	@ 0x40
 80053d0:	d10b      	bne.n	80053ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800540c:	4610      	mov	r0, r2
 800540e:	4798      	blx	r3
 8005410:	e041      	b.n	8005496 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b60      	cmp	r3, #96	@ 0x60
 800541c:	d125      	bne.n	800546a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005436:	2b40      	cmp	r3, #64	@ 0x40
 8005438:	d10b      	bne.n	8005452 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fe fed0 	bl	8004208 <HAL_I2C_AbortCpltCallback>
 8005468:	e015      	b.n	8005496 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b40      	cmp	r3, #64	@ 0x40
 8005476:	d10b      	bne.n	8005490 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fe feaf 	bl	80041f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10e      	bne.n	80054c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d113      	bne.n	8005510 <I2C_ITError+0x254>
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b28      	cmp	r3, #40	@ 0x28
 80054ec:	d110      	bne.n	8005510 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <I2C_ITError+0x260>)
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fe fe5e 	bl	80041cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	08005885 	.word	0x08005885
 800551c:	ffff0000 	.word	0xffff0000

08005520 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	817b      	strh	r3, [r7, #10]
 8005532:	460b      	mov	r3, r1
 8005534:	813b      	strh	r3, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005548:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	2200      	movs	r2, #0
 8005552:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa3c 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00d      	beq.n	800557e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005570:	d103      	bne.n	800557a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005578:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e05f      	b.n	800563e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800557e:	897b      	ldrh	r3, [r7, #10]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800558c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	492d      	ldr	r1, [pc, #180]	@ (8005648 <I2C_RequestMemoryWrite+0x128>)
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fa97 	bl	8005ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e04c      	b.n	800563e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a4:	2300      	movs	r3, #0
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055bc:	6a39      	ldr	r1, [r7, #32]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fb22 	bl	8005c08 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00d      	beq.n	80055e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d107      	bne.n	80055e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e02b      	b.n	800563e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ec:	893b      	ldrh	r3, [r7, #8]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	e021      	b.n	800563c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055f8:	893b      	ldrh	r3, [r7, #8]
 80055fa:	0a1b      	lsrs	r3, r3, #8
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005608:	6a39      	ldr	r1, [r7, #32]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 fafc 	bl	8005c08 <I2C_WaitOnTXEFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	2b04      	cmp	r3, #4
 800561c:	d107      	bne.n	800562e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800562c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e005      	b.n	800563e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005632:	893b      	ldrh	r3, [r7, #8]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	00010002 	.word	0x00010002

0800564c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005658:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005660:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005668:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800567e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568c:	2200      	movs	r2, #0
 800568e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	2200      	movs	r2, #0
 800569e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80056a6:	2b21      	cmp	r3, #33	@ 0x21
 80056a8:	d007      	beq.n	80056ba <I2C_DMAXferCplt+0x6e>
 80056aa:	7cfb      	ldrb	r3, [r7, #19]
 80056ac:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80056b0:	2b22      	cmp	r3, #34	@ 0x22
 80056b2:	d131      	bne.n	8005718 <I2C_DMAXferCplt+0xcc>
 80056b4:	7cbb      	ldrb	r3, [r7, #18]
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d12e      	bne.n	8005718 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80056d0:	7cfb      	ldrb	r3, [r7, #19]
 80056d2:	2b29      	cmp	r3, #41	@ 0x29
 80056d4:	d10a      	bne.n	80056ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2221      	movs	r2, #33	@ 0x21
 80056da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2228      	movs	r2, #40	@ 0x28
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056e4:	6978      	ldr	r0, [r7, #20]
 80056e6:	f7fe fd4f 	bl	8004188 <HAL_I2C_SlaveTxCpltCallback>
 80056ea:	e00c      	b.n	8005706 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80056f0:	d109      	bne.n	8005706 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2222      	movs	r2, #34	@ 0x22
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2228      	movs	r2, #40	@ 0x28
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005700:	6978      	ldr	r0, [r7, #20]
 8005702:	f7fe fd4b 	bl	800419c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005714:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005716:	e074      	b.n	8005802 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d06e      	beq.n	8005802 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800573c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800574c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005754:	d009      	beq.n	800576a <I2C_DMAXferCplt+0x11e>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d006      	beq.n	800576a <I2C_DMAXferCplt+0x11e>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005762:	d002      	beq.n	800576a <I2C_DMAXferCplt+0x11e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b20      	cmp	r3, #32
 8005768:	d107      	bne.n	800577a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005778:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005788:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005798:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80057a8:	6978      	ldr	r0, [r7, #20]
 80057aa:	f7fe fd23 	bl	80041f4 <HAL_I2C_ErrorCallback>
}
 80057ae:	e028      	b.n	8005802 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b40      	cmp	r3, #64	@ 0x40
 80057c2:	d10a      	bne.n	80057da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80057d2:	6978      	ldr	r0, [r7, #20]
 80057d4:	f7fe fd04 	bl	80041e0 <HAL_I2C_MemRxCpltCallback>
}
 80057d8:	e013      	b.n	8005802 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d002      	beq.n	80057ee <I2C_DMAXferCplt+0x1a2>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d103      	bne.n	80057f6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80057f4:	e002      	b.n	80057fc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2212      	movs	r2, #18
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80057fc:	6978      	ldr	r0, [r7, #20]
 80057fe:	f7fe fcb9 	bl	8004174 <HAL_I2C_MasterRxCpltCallback>
}
 8005802:	bf00      	nop
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005824:	2200      	movs	r2, #0
 8005826:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005834:	2200      	movs	r2, #0
 8005836:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fd fbef 	bl	800301c <HAL_DMA_GetError>
 800583e:	4603      	mov	r3, r0
 8005840:	2b02      	cmp	r3, #2
 8005842:	d01b      	beq.n	800587c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005852:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f043 0210 	orr.w	r2, r3, #16
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7fe fcbc 	bl	80041f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005894:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800589e:	4b4b      	ldr	r3, [pc, #300]	@ (80059cc <I2C_DMAAbort+0x148>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	08db      	lsrs	r3, r3, #3
 80058a4:	4a4a      	ldr	r2, [pc, #296]	@ (80059d0 <I2C_DMAAbort+0x14c>)
 80058a6:	fba2 2303 	umull	r2, r3, r2, r3
 80058aa:	0a1a      	lsrs	r2, r3, #8
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	00da      	lsls	r2, r3, #3
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	f043 0220 	orr.w	r2, r3, #32
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80058ca:	e00a      	b.n	80058e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e0:	d0ea      	beq.n	80058b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ee:	2200      	movs	r2, #0
 80058f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	2200      	movs	r2, #0
 8005900:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005910:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005924:	2200      	movs	r2, #0
 8005926:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	2200      	movs	r2, #0
 8005936:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b60      	cmp	r3, #96	@ 0x60
 8005952:	d10e      	bne.n	8005972 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2200      	movs	r2, #0
 8005968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7fe fc4c 	bl	8004208 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005970:	e027      	b.n	80059c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005978:	2b28      	cmp	r3, #40	@ 0x28
 800597a:	d117      	bne.n	80059ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800599a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2200      	movs	r2, #0
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2228      	movs	r2, #40	@ 0x28
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059aa:	e007      	b.n	80059bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059bc:	6978      	ldr	r0, [r7, #20]
 80059be:	f7fe fc19 	bl	80041f4 <HAL_I2C_ErrorCallback>
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000038 	.word	0x20000038
 80059d0:	14f8b589 	.word	0x14f8b589

080059d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059e4:	e048      	b.n	8005a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d044      	beq.n	8005a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ee:	f7fc f9f3 	bl	8001dd8 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d302      	bcc.n	8005a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d139      	bne.n	8005a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	0c1b      	lsrs	r3, r3, #16
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d10d      	bne.n	8005a2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	43da      	mvns	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	e00c      	b.n	8005a44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	43da      	mvns	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d116      	bne.n	8005a78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e023      	b.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	0c1b      	lsrs	r3, r3, #16
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10d      	bne.n	8005a9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	e00c      	b.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	43da      	mvns	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d093      	beq.n	80059e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ad6:	e071      	b.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae6:	d123      	bne.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1c:	f043 0204 	orr.w	r2, r3, #4
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e067      	b.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d041      	beq.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b38:	f7fc f94e 	bl	8001dd8 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d136      	bne.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	0c1b      	lsrs	r3, r3, #16
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10c      	bne.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	43da      	mvns	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bf14      	ite	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	2300      	moveq	r3, #0
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	e00b      	b.n	8005b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	43da      	mvns	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	f043 0220 	orr.w	r2, r3, #32
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e021      	b.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d10c      	bne.n	8005be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	bf14      	ite	ne
 8005bd8:	2301      	movne	r3, #1
 8005bda:	2300      	moveq	r3, #0
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	e00b      	b.n	8005bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	43da      	mvns	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4013      	ands	r3, r2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f47f af6d 	bne.w	8005ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c14:	e034      	b.n	8005c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f870 	bl	8005cfc <I2C_IsAcknowledgeFailed>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e034      	b.n	8005c90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d028      	beq.n	8005c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2e:	f7fc f8d3 	bl	8001dd8 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d302      	bcc.n	8005c44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11d      	bne.n	8005c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4e:	2b80      	cmp	r3, #128	@ 0x80
 8005c50:	d016      	beq.n	8005c80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	f043 0220 	orr.w	r2, r3, #32
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e007      	b.n	8005c90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8a:	2b80      	cmp	r3, #128	@ 0x80
 8005c8c:	d1c3      	bne.n	8005c16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ca4:	4b13      	ldr	r3, [pc, #76]	@ (8005cf4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	08db      	lsrs	r3, r3, #3
 8005caa:	4a13      	ldr	r2, [pc, #76]	@ (8005cf8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	0a1a      	lsrs	r2, r3, #8
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d107      	bne.n	8005cd6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e008      	b.n	8005ce8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce4:	d0e9      	beq.n	8005cba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000038 	.word	0x20000038
 8005cf8:	14f8b589 	.word	0x14f8b589

08005cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d12:	d11b      	bne.n	8005d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	f043 0204 	orr.w	r2, r3, #4
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005d6a:	d103      	bne.n	8005d74 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d72:	e007      	b.n	8005d84 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005d7c:	d102      	bne.n	8005d84 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2208      	movs	r2, #8
 8005d82:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e101      	b.n	8005fa6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f006 f935 	bl	800c02c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dd0:	d102      	bne.n	8005dd8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f002 fc8c 	bl	80086fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	7c1a      	ldrb	r2, [r3, #16]
 8005dea:	f88d 2000 	strb.w	r2, [sp]
 8005dee:	3304      	adds	r3, #4
 8005df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005df2:	f002 fb6b 	bl	80084cc <USB_CoreInit>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0ce      	b.n	8005fa6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f002 fc84 	bl	800871c <USB_SetCurrentMode>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e0bf      	b.n	8005fa6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e26:	2300      	movs	r3, #0
 8005e28:	73fb      	strb	r3, [r7, #15]
 8005e2a:	e04a      	b.n	8005ec2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e2c:	7bfa      	ldrb	r2, [r7, #15]
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	3315      	adds	r3, #21
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e40:	7bfa      	ldrb	r2, [r7, #15]
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3314      	adds	r3, #20
 8005e50:	7bfa      	ldrb	r2, [r7, #15]
 8005e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e54:	7bfa      	ldrb	r2, [r7, #15]
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	b298      	uxth	r0, r3
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	332e      	adds	r3, #46	@ 0x2e
 8005e68:	4602      	mov	r2, r0
 8005e6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e80:	7bfa      	ldrb	r2, [r7, #15]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	331c      	adds	r3, #28
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e94:	7bfa      	ldrb	r2, [r7, #15]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3320      	adds	r3, #32
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ea8:	7bfa      	ldrb	r2, [r7, #15]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	3324      	adds	r3, #36	@ 0x24
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	791b      	ldrb	r3, [r3, #4]
 8005ec6:	7bfa      	ldrb	r2, [r7, #15]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d3af      	bcc.n	8005e2c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]
 8005ed0:	e044      	b.n	8005f5c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ed2:	7bfa      	ldrb	r2, [r7, #15]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ee8:	7bfa      	ldrb	r2, [r7, #15]
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	4613      	mov	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	440b      	add	r3, r1
 8005ef6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005efa:	7bfa      	ldrb	r2, [r7, #15]
 8005efc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005efe:	7bfa      	ldrb	r2, [r7, #15]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f40:	7bfa      	ldrb	r2, [r7, #15]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	791b      	ldrb	r3, [r3, #4]
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d3b5      	bcc.n	8005ed2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	7c1a      	ldrb	r2, [r3, #16]
 8005f6e:	f88d 2000 	strb.w	r2, [sp]
 8005f72:	3304      	adds	r3, #4
 8005f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f76:	f002 fc1d 	bl	80087b4 <USB_DevInit>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e00c      	b.n	8005fa6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f003 fc67 	bl	8009872 <USB_DevDisconnect>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_PCD_Start+0x1c>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e022      	b.n	8006010 <HAL_PCD_Start+0x62>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d009      	beq.n	8005ff2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d105      	bne.n	8005ff2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 fb6e 	bl	80086d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f003 fc15 	bl	8009830 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b08d      	sub	sp, #52	@ 0x34
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f003 fcd3 	bl	80099da <USB_GetMode>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	f040 848c 	bne.w	8006954 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f003 fc37 	bl	80098b4 <USB_ReadInterrupts>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8482 	beq.w	8006952 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f003 fc24 	bl	80098b4 <USB_ReadInterrupts>
 800606c:	4603      	mov	r3, r0
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b02      	cmp	r3, #2
 8006074:	d107      	bne.n	8006086 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f002 0202 	and.w	r2, r2, #2
 8006084:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f003 fc12 	bl	80098b4 <USB_ReadInterrupts>
 8006090:	4603      	mov	r3, r0
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b10      	cmp	r3, #16
 8006098:	d161      	bne.n	800615e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0210 	bic.w	r2, r2, #16
 80060a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4413      	add	r3, r2
 80060c6:	3304      	adds	r3, #4
 80060c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80060d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060d4:	d124      	bne.n	8006120 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d035      	beq.n	800614e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	091b      	lsrs	r3, r3, #4
 80060ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80060ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	461a      	mov	r2, r3
 80060f4:	6a38      	ldr	r0, [r7, #32]
 80060f6:	f003 fa49 	bl	800958c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006106:	441a      	add	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006118:	441a      	add	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	615a      	str	r2, [r3, #20]
 800611e:	e016      	b.n	800614e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006126:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800612a:	d110      	bne.n	800614e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006132:	2208      	movs	r2, #8
 8006134:	4619      	mov	r1, r3
 8006136:	6a38      	ldr	r0, [r7, #32]
 8006138:	f003 fa28 	bl	800958c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006148:	441a      	add	r2, r3
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699a      	ldr	r2, [r3, #24]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0210 	orr.w	r2, r2, #16
 800615c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f003 fba6 	bl	80098b4 <USB_ReadInterrupts>
 8006168:	4603      	mov	r3, r0
 800616a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800616e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006172:	f040 80a7 	bne.w	80062c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4618      	mov	r0, r3
 8006180:	f003 fbab 	bl	80098da <USB_ReadDevAllOutEpInterrupt>
 8006184:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006186:	e099      	b.n	80062bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 808e 	beq.w	80062b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f003 fbcf 	bl	8009942 <USB_ReadDevOutEPInterrupt>
 80061a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	2301      	movs	r3, #1
 80061c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80061c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fea3 	bl	8006f10 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2308      	movs	r3, #8
 80061e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80061e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 ff79 	bl	80070e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	2310      	movs	r3, #16
 8006208:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d030      	beq.n	8006276 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621c:	2b80      	cmp	r3, #128	@ 0x80
 800621e:	d109      	bne.n	8006234 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006232:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006236:	4613      	mov	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4413      	add	r3, r2
 8006246:	3304      	adds	r3, #4
 8006248:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	78db      	ldrb	r3, [r3, #3]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d108      	bne.n	8006264 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f005 ffe0 	bl	800c224 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006270:	461a      	mov	r2, r3
 8006272:	2302      	movs	r3, #2
 8006274:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	461a      	mov	r2, r3
 800628e:	2320      	movs	r3, #32
 8006290:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d009      	beq.n	80062b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a8:	461a      	mov	r2, r3
 80062aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80062ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b2:	3301      	adds	r3, #1
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af62 	bne.w	8006188 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f003 faf3 	bl	80098b4 <USB_ReadInterrupts>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062d8:	f040 80db 	bne.w	8006492 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f003 fb14 	bl	800990e <USB_ReadDevAllInEpInterrupt>
 80062e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80062ec:	e0cd      	b.n	800648a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80c2 	beq.w	800647e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f003 fb3a 	bl	800997e <USB_ReadDevInEPInterrupt>
 800630a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d057      	beq.n	80063c6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	2201      	movs	r2, #1
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	43db      	mvns	r3, r3
 8006330:	69f9      	ldr	r1, [r7, #28]
 8006332:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006336:	4013      	ands	r3, r2
 8006338:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006346:	461a      	mov	r2, r3
 8006348:	2301      	movs	r3, #1
 800634a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	799b      	ldrb	r3, [r3, #6]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d132      	bne.n	80063ba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	3320      	adds	r3, #32
 8006364:	6819      	ldr	r1, [r3, #0]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4403      	add	r3, r0
 8006374:	331c      	adds	r3, #28
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4419      	add	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637e:	4613      	mov	r3, r2
 8006380:	00db      	lsls	r3, r3, #3
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4403      	add	r3, r0
 8006388:	3320      	adds	r3, #32
 800638a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d113      	bne.n	80063ba <HAL_PCD_IRQHandler+0x3a2>
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	3324      	adds	r3, #36	@ 0x24
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d108      	bne.n	80063ba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80063b2:	461a      	mov	r2, r3
 80063b4:	2101      	movs	r1, #1
 80063b6:	f003 fb41 	bl	8009a3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f005 feb4 	bl	800c12e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	461a      	mov	r2, r3
 80063de:	2308      	movs	r3, #8
 80063e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f8:	461a      	mov	r2, r3
 80063fa:	2310      	movs	r3, #16
 80063fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006414:	461a      	mov	r2, r3
 8006416:	2340      	movs	r3, #64	@ 0x40
 8006418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d023      	beq.n	800646c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006424:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006426:	6a38      	ldr	r0, [r7, #32]
 8006428:	f002 fb28 	bl	8008a7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	3310      	adds	r3, #16
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	3304      	adds	r3, #4
 800643e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	78db      	ldrb	r3, [r3, #3]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d108      	bne.n	800645a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f005 fef7 	bl	800c248 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006466:	461a      	mov	r2, r3
 8006468:	2302      	movs	r3, #2
 800646a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006476:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fcbd 	bl	8006df8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	3301      	adds	r3, #1
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	2b00      	cmp	r3, #0
 800648e:	f47f af2e 	bne.w	80062ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f003 fa0c 	bl	80098b4 <USB_ReadInterrupts>
 800649c:	4603      	mov	r3, r0
 800649e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a6:	d122      	bne.n	80064ee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d108      	bne.n	80064d8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fea3 	bl	800721c <HAL_PCDEx_LPM_Callback>
 80064d6:	e002      	b.n	80064de <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f005 fe95 	bl	800c208 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80064ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f003 f9de 	bl	80098b4 <USB_ReadInterrupts>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006502:	d112      	bne.n	800652a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d102      	bne.n	800651a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f005 fe51 	bl	800c1bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006528:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4618      	mov	r0, r3
 8006530:	f003 f9c0 	bl	80098b4 <USB_ReadInterrupts>
 8006534:	4603      	mov	r3, r0
 8006536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800653a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653e:	f040 80b7 	bne.w	80066b0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2110      	movs	r1, #16
 800655c:	4618      	mov	r0, r3
 800655e:	f002 fa8d 	bl	8008a7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006562:	2300      	movs	r3, #0
 8006564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006566:	e046      	b.n	80065f6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	015a      	lsls	r2, r3, #5
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4413      	add	r3, r2
 8006570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006574:	461a      	mov	r2, r3
 8006576:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800657a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800657c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800659a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800659c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a8:	461a      	mov	r2, r3
 80065aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	69fa      	ldr	r2, [r7, #28]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f2:	3301      	adds	r3, #1
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	791b      	ldrb	r3, [r3, #4]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	4293      	cmp	r3, r2
 8006600:	d3b2      	bcc.n	8006568 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006610:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006614:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	7bdb      	ldrb	r3, [r3, #15]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800662e:	f043 030b 	orr.w	r3, r3, #11
 8006632:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	69fa      	ldr	r2, [r7, #28]
 8006640:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006644:	f043 030b 	orr.w	r3, r3, #11
 8006648:	6453      	str	r3, [r2, #68]	@ 0x44
 800664a:	e015      	b.n	8006678 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800665e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006662:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006672:	f043 030b 	orr.w	r3, r3, #11
 8006676:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006686:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800668a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800669a:	461a      	mov	r2, r3
 800669c:	f003 f9ce 	bl	8009a3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80066ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f003 f8fd 	bl	80098b4 <USB_ReadInterrupts>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c4:	d123      	bne.n	800670e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f003 f993 	bl	80099f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f002 fa4a 	bl	8008b6e <USB_GetDevSpeed>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681c      	ldr	r4, [r3, #0]
 80066e6:	f001 f9c9 	bl	8007a7c <HAL_RCC_GetHCLKFreq>
 80066ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80066f0:	461a      	mov	r2, r3
 80066f2:	4620      	mov	r0, r4
 80066f4:	f001 ff4e 	bl	8008594 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f005 fd40 	bl	800c17e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695a      	ldr	r2, [r3, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800670c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f003 f8ce 	bl	80098b4 <USB_ReadInterrupts>
 8006718:	4603      	mov	r3, r0
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b08      	cmp	r3, #8
 8006720:	d10a      	bne.n	8006738 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f005 fd1d 	bl	800c162 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f002 0208 	and.w	r2, r2, #8
 8006736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f003 f8b9 	bl	80098b4 <USB_ReadInterrupts>
 8006742:	4603      	mov	r3, r0
 8006744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006748:	2b80      	cmp	r3, #128	@ 0x80
 800674a:	d123      	bne.n	8006794 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006758:	2301      	movs	r3, #1
 800675a:	627b      	str	r3, [r7, #36]	@ 0x24
 800675c:	e014      	b.n	8006788 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d105      	bne.n	8006782 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	b2db      	uxtb	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb0a 	bl	8006d96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	3301      	adds	r3, #1
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	791b      	ldrb	r3, [r3, #4]
 800678c:	461a      	mov	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	4293      	cmp	r3, r2
 8006792:	d3e4      	bcc.n	800675e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f003 f88b 	bl	80098b4 <USB_ReadInterrupts>
 800679e:	4603      	mov	r3, r0
 80067a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067a8:	d13c      	bne.n	8006824 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067aa:	2301      	movs	r3, #1
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ae:	e02b      	b.n	8006808 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c4:	4613      	mov	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	3318      	adds	r3, #24
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d115      	bne.n	8006802 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80067d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80067d8:	2b00      	cmp	r3, #0
 80067da:	da12      	bge.n	8006802 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	3317      	adds	r3, #23
 80067ec:	2201      	movs	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 faca 	bl	8006d96 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	3301      	adds	r3, #1
 8006806:	627b      	str	r3, [r7, #36]	@ 0x24
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	791b      	ldrb	r3, [r3, #4]
 800680c:	461a      	mov	r2, r3
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	4293      	cmp	r3, r2
 8006812:	d3cd      	bcc.n	80067b0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006822:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f003 f843 	bl	80098b4 <USB_ReadInterrupts>
 800682e:	4603      	mov	r3, r0
 8006830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006834:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006838:	d156      	bne.n	80068e8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800683a:	2301      	movs	r3, #1
 800683c:	627b      	str	r3, [r7, #36]	@ 0x24
 800683e:	e045      	b.n	80068cc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d12e      	bne.n	80068c6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006868:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800686a:	2b00      	cmp	r3, #0
 800686c:	da2b      	bge.n	80068c6 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	0c1a      	lsrs	r2, r3, #16
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006878:	4053      	eors	r3, r2
 800687a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800687e:	2b00      	cmp	r3, #0
 8006880:	d121      	bne.n	80068c6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006894:	2201      	movs	r2, #1
 8006896:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068c2:	6053      	str	r3, [r2, #4]
            break;
 80068c4:	e008      	b.n	80068d8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	3301      	adds	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	791b      	ldrb	r3, [r3, #4]
 80068d0:	461a      	mov	r2, r3
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d3b3      	bcc.n	8006840 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80068e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f002 ffe1 	bl	80098b4 <USB_ReadInterrupts>
 80068f2:	4603      	mov	r3, r0
 80068f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80068f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068fc:	d10a      	bne.n	8006914 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f005 fcb4 	bl	800c26c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f002 ffcb 	bl	80098b4 <USB_ReadInterrupts>
 800691e:	4603      	mov	r3, r0
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b04      	cmp	r3, #4
 8006926:	d115      	bne.n	8006954 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f005 fca4 	bl	800c288 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
 8006950:	e000      	b.n	8006954 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006952:	bf00      	nop
    }
  }
}
 8006954:	3734      	adds	r7, #52	@ 0x34
 8006956:	46bd      	mov	sp, r7
 8006958:	bd90      	pop	{r4, r7, pc}

0800695a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	460b      	mov	r3, r1
 8006964:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_PCD_SetAddress+0x1a>
 8006970:	2302      	movs	r3, #2
 8006972:	e012      	b.n	800699a <HAL_PCD_SetAddress+0x40>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	4611      	mov	r1, r2
 800698a:	4618      	mov	r0, r3
 800698c:	f002 ff2a 	bl	80097e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	4608      	mov	r0, r1
 80069ac:	4611      	mov	r1, r2
 80069ae:	461a      	mov	r2, r3
 80069b0:	4603      	mov	r3, r0
 80069b2:	70fb      	strb	r3, [r7, #3]
 80069b4:	460b      	mov	r3, r1
 80069b6:	803b      	strh	r3, [r7, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da0f      	bge.n	80069e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	f003 020f 	and.w	r2, r3, #15
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	3310      	adds	r3, #16
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	3304      	adds	r3, #4
 80069de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	705a      	strb	r2, [r3, #1]
 80069e6:	e00f      	b.n	8006a08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	f003 020f 	and.w	r2, r3, #15
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	3304      	adds	r3, #4
 8006a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006a14:	883b      	ldrh	r3, [r7, #0]
 8006a16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	78ba      	ldrb	r2, [r7, #2]
 8006a22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	785b      	ldrb	r3, [r3, #1]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	461a      	mov	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a36:	78bb      	ldrb	r3, [r7, #2]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d102      	bne.n	8006a42 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_PCD_EP_Open+0xae>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e00e      	b.n	8006a6e <HAL_PCD_EP_Open+0xcc>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f002 f8aa 	bl	8008bb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da0f      	bge.n	8006aaa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	f003 020f 	and.w	r2, r3, #15
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	3310      	adds	r3, #16
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3304      	adds	r3, #4
 8006aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	705a      	strb	r2, [r3, #1]
 8006aa8:	e00f      	b.n	8006aca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006aca:	78fb      	ldrb	r3, [r7, #3]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_PCD_EP_Close+0x6e>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e00e      	b.n	8006b02 <HAL_PCD_EP_Close+0x8c>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68f9      	ldr	r1, [r7, #12]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f002 f8e8 	bl	8008cc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	607a      	str	r2, [r7, #4]
 8006b14:	603b      	str	r3, [r7, #0]
 8006b16:	460b      	mov	r3, r1
 8006b18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	3304      	adds	r3, #4
 8006b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2200      	movs	r2, #0
 8006b44:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b4c:	7afb      	ldrb	r3, [r7, #11]
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	799b      	ldrb	r3, [r3, #6]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d102      	bne.n	8006b66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	799b      	ldrb	r3, [r3, #6]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	f002 f985 	bl	8008e80 <USB_EPStartXfer>

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	f003 020f 	and.w	r2, r3, #15
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006ba2:	681b      	ldr	r3, [r3, #0]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	607a      	str	r2, [r7, #4]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	f003 020f 	and.w	r2, r3, #15
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	3310      	adds	r3, #16
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2200      	movs	r2, #0
 8006be8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2201      	movs	r2, #1
 8006bee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	799b      	ldrb	r3, [r3, #6]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d102      	bne.n	8006c0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	799b      	ldrb	r3, [r3, #6]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6979      	ldr	r1, [r7, #20]
 8006c16:	f002 f933 	bl	8008e80 <USB_EPStartXfer>

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3718      	adds	r7, #24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	7912      	ldrb	r2, [r2, #4]
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e04f      	b.n	8006ce2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da0f      	bge.n	8006c6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	f003 020f 	and.w	r2, r3, #15
 8006c50:	4613      	mov	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	3310      	adds	r3, #16
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	3304      	adds	r3, #4
 8006c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	705a      	strb	r2, [r3, #1]
 8006c68:	e00d      	b.n	8006c86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c6a:	78fa      	ldrb	r2, [r7, #3]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d101      	bne.n	8006ca6 <HAL_PCD_EP_SetStall+0x82>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	e01d      	b.n	8006ce2 <HAL_PCD_EP_SetStall+0xbe>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f002 fcc1 	bl	800963c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7999      	ldrb	r1, [r3, #6]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f002 feb2 	bl	8009a3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	7912      	ldrb	r2, [r2, #4]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e042      	b.n	8006d8e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da0f      	bge.n	8006d30 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 020f 	and.w	r2, r3, #15
 8006d16:	4613      	mov	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	3310      	adds	r3, #16
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	705a      	strb	r2, [r3, #1]
 8006d2e:	e00f      	b.n	8006d50 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_PCD_EP_ClrStall+0x86>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e00e      	b.n	8006d8e <HAL_PCD_EP_ClrStall+0xa4>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f002 fcca 	bl	8009718 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da0c      	bge.n	8006dc4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3310      	adds	r3, #16
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e00c      	b.n	8006dde <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dc4:	78fb      	ldrb	r3, [r7, #3]
 8006dc6:	f003 020f 	and.w	r2, r3, #15
 8006dca:	4613      	mov	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	3304      	adds	r3, #4
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f002 fae9 	bl	80093bc <USB_EPStopXfer>
 8006dea:	4603      	mov	r3, r0
 8006dec:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006dee:	7afb      	ldrb	r3, [r7, #11]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	@ 0x28
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	3310      	adds	r3, #16
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d901      	bls.n	8006e30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e06b      	b.n	8006f08 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d902      	bls.n	8006e4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3303      	adds	r3, #3
 8006e50:	089b      	lsrs	r3, r3, #2
 8006e52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e54:	e02a      	b.n	8006eac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d902      	bls.n	8006e72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3303      	adds	r3, #3
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68d9      	ldr	r1, [r3, #12]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f002 fb3e 	bl	8009510 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	441a      	add	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d809      	bhi.n	8006ed6 <PCD_WriteEmptyTxFifo+0xde>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	695a      	ldr	r2, [r3, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d203      	bcs.n	8006ed6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1bf      	bne.n	8006e56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d811      	bhi.n	8006f06 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	2201      	movs	r2, #1
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ef6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	43db      	mvns	r3, r3
 8006efc:	6939      	ldr	r1, [r7, #16]
 8006efe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f02:	4013      	ands	r3, r2
 8006f04:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	333c      	adds	r3, #60	@ 0x3c
 8006f28:	3304      	adds	r3, #4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	799b      	ldrb	r3, [r3, #6]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d17b      	bne.n	800703e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d015      	beq.n	8006f7c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4a61      	ldr	r2, [pc, #388]	@ (80070d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	f240 80b9 	bls.w	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80b3 	beq.w	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f72:	461a      	mov	r2, r3
 8006f74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f78:	6093      	str	r3, [r2, #8]
 8006f7a:	e0a7      	b.n	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f92:	461a      	mov	r2, r3
 8006f94:	2320      	movs	r3, #32
 8006f96:	6093      	str	r3, [r2, #8]
 8006f98:	e098      	b.n	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 8093 	bne.w	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80070d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d90f      	bls.n	8006fce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00a      	beq.n	8006fce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fca:	6093      	str	r3, [r2, #8]
 8006fcc:	e07e      	b.n	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	0159      	lsls	r1, r3, #5
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	440b      	add	r3, r1
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d114      	bne.n	8007030 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007018:	461a      	mov	r2, r3
 800701a:	2101      	movs	r1, #1
 800701c:	f002 fd0e 	bl	8009a3c <USB_EP0_OutStart>
 8007020:	e006      	b.n	8007030 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	441a      	add	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f005 f85e 	bl	800c0f8 <HAL_PCD_DataOutStageCallback>
 800703c:	e046      	b.n	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	4a26      	ldr	r2, [pc, #152]	@ (80070dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d124      	bne.n	8007090 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705c:	461a      	mov	r2, r3
 800705e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007062:	6093      	str	r3, [r2, #8]
 8007064:	e032      	b.n	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f003 0320 	and.w	r3, r3, #32
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707c:	461a      	mov	r2, r3
 800707e:	2320      	movs	r3, #32
 8007080:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f005 f835 	bl	800c0f8 <HAL_PCD_DataOutStageCallback>
 800708e:	e01d      	b.n	80070cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d114      	bne.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	4613      	mov	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d108      	bne.n	80070c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070b8:	461a      	mov	r2, r3
 80070ba:	2100      	movs	r1, #0
 80070bc:	f002 fcbe 	bl	8009a3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f005 f816 	bl	800c0f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	4f54300a 	.word	0x4f54300a
 80070dc:	4f54310a 	.word	0x4f54310a

080070e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	333c      	adds	r3, #60	@ 0x3c
 80070f8:	3304      	adds	r3, #4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4a15      	ldr	r2, [pc, #84]	@ (8007168 <PCD_EP_OutSetupPacket_int+0x88>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d90e      	bls.n	8007134 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712c:	461a      	mov	r2, r3
 800712e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007132:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f004 ffcd 	bl	800c0d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a0a      	ldr	r2, [pc, #40]	@ (8007168 <PCD_EP_OutSetupPacket_int+0x88>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d90c      	bls.n	800715c <PCD_EP_OutSetupPacket_int+0x7c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	799b      	ldrb	r3, [r3, #6]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d108      	bne.n	800715c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007154:	461a      	mov	r2, r3
 8007156:	2101      	movs	r1, #1
 8007158:	f002 fc70 	bl	8009a3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	4f54300a 	.word	0x4f54300a

0800716c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
 8007178:	4613      	mov	r3, r2
 800717a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007182:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d107      	bne.n	800719a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800718a:	883b      	ldrh	r3, [r7, #0]
 800718c:	0419      	lsls	r1, r3, #16
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	430a      	orrs	r2, r1
 8007196:	629a      	str	r2, [r3, #40]	@ 0x28
 8007198:	e028      	b.n	80071ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	0c1b      	lsrs	r3, r3, #16
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4413      	add	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
 80071ac:	e00d      	b.n	80071ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	3340      	adds	r3, #64	@ 0x40
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	0c1b      	lsrs	r3, r3, #16
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	3301      	adds	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
 80071ca:	7bfa      	ldrb	r2, [r7, #15]
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d3ec      	bcc.n	80071ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071d4:	883b      	ldrh	r3, [r7, #0]
 80071d6:	0418      	lsls	r0, r3, #16
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6819      	ldr	r1, [r3, #0]
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	3b01      	subs	r3, #1
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4302      	orrs	r2, r0
 80071e4:	3340      	adds	r3, #64	@ 0x40
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e267      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d075      	beq.n	800733e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007252:	4b88      	ldr	r3, [pc, #544]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 030c 	and.w	r3, r3, #12
 800725a:	2b04      	cmp	r3, #4
 800725c:	d00c      	beq.n	8007278 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800725e:	4b85      	ldr	r3, [pc, #532]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007266:	2b08      	cmp	r3, #8
 8007268:	d112      	bne.n	8007290 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800726a:	4b82      	ldr	r3, [pc, #520]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007276:	d10b      	bne.n	8007290 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007278:	4b7e      	ldr	r3, [pc, #504]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d05b      	beq.n	800733c <HAL_RCC_OscConfig+0x108>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d157      	bne.n	800733c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e242      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007298:	d106      	bne.n	80072a8 <HAL_RCC_OscConfig+0x74>
 800729a:	4b76      	ldr	r3, [pc, #472]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a75      	ldr	r2, [pc, #468]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	e01d      	b.n	80072e4 <HAL_RCC_OscConfig+0xb0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072b0:	d10c      	bne.n	80072cc <HAL_RCC_OscConfig+0x98>
 80072b2:	4b70      	ldr	r3, [pc, #448]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a6f      	ldr	r2, [pc, #444]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	4b6d      	ldr	r3, [pc, #436]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6c      	ldr	r2, [pc, #432]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	e00b      	b.n	80072e4 <HAL_RCC_OscConfig+0xb0>
 80072cc:	4b69      	ldr	r3, [pc, #420]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a68      	ldr	r2, [pc, #416]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	4b66      	ldr	r3, [pc, #408]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a65      	ldr	r2, [pc, #404]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80072de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d013      	beq.n	8007314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ec:	f7fa fd74 	bl	8001dd8 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072f4:	f7fa fd70 	bl	8001dd8 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b64      	cmp	r3, #100	@ 0x64
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e207      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007306:	4b5b      	ldr	r3, [pc, #364]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f0      	beq.n	80072f4 <HAL_RCC_OscConfig+0xc0>
 8007312:	e014      	b.n	800733e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007314:	f7fa fd60 	bl	8001dd8 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800731c:	f7fa fd5c 	bl	8001dd8 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b64      	cmp	r3, #100	@ 0x64
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e1f3      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800732e:	4b51      	ldr	r3, [pc, #324]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0xe8>
 800733a:	e000      	b.n	800733e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800733c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0302 	and.w	r3, r3, #2
 8007346:	2b00      	cmp	r3, #0
 8007348:	d063      	beq.n	8007412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800734a:	4b4a      	ldr	r3, [pc, #296]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f003 030c 	and.w	r3, r3, #12
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007356:	4b47      	ldr	r3, [pc, #284]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800735e:	2b08      	cmp	r3, #8
 8007360:	d11c      	bne.n	800739c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007362:	4b44      	ldr	r3, [pc, #272]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d116      	bne.n	800739c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800736e:	4b41      	ldr	r3, [pc, #260]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_RCC_OscConfig+0x152>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	2b01      	cmp	r3, #1
 8007380:	d001      	beq.n	8007386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e1c7      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007386:	4b3b      	ldr	r3, [pc, #236]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4937      	ldr	r1, [pc, #220]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800739a:	e03a      	b.n	8007412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d020      	beq.n	80073e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073a4:	4b34      	ldr	r3, [pc, #208]	@ (8007478 <HAL_RCC_OscConfig+0x244>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073aa:	f7fa fd15 	bl	8001dd8 <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073b2:	f7fa fd11 	bl	8001dd8 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e1a8      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073d0:	4b28      	ldr	r3, [pc, #160]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	4925      	ldr	r1, [pc, #148]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]
 80073e4:	e015      	b.n	8007412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073e6:	4b24      	ldr	r3, [pc, #144]	@ (8007478 <HAL_RCC_OscConfig+0x244>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fa fcf4 	bl	8001dd8 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073f4:	f7fa fcf0 	bl	8001dd8 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e187      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007406:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0308 	and.w	r3, r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d036      	beq.n	800748c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d016      	beq.n	8007454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007426:	4b15      	ldr	r3, [pc, #84]	@ (800747c <HAL_RCC_OscConfig+0x248>)
 8007428:	2201      	movs	r2, #1
 800742a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742c:	f7fa fcd4 	bl	8001dd8 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007434:	f7fa fcd0 	bl	8001dd8 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e167      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007446:	4b0b      	ldr	r3, [pc, #44]	@ (8007474 <HAL_RCC_OscConfig+0x240>)
 8007448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x200>
 8007452:	e01b      	b.n	800748c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007454:	4b09      	ldr	r3, [pc, #36]	@ (800747c <HAL_RCC_OscConfig+0x248>)
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800745a:	f7fa fcbd 	bl	8001dd8 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007460:	e00e      	b.n	8007480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007462:	f7fa fcb9 	bl	8001dd8 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d907      	bls.n	8007480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e150      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
 8007474:	40023800 	.word	0x40023800
 8007478:	42470000 	.word	0x42470000
 800747c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007480:	4b88      	ldr	r3, [pc, #544]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1ea      	bne.n	8007462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8097 	beq.w	80075c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800749e:	4b81      	ldr	r3, [pc, #516]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10f      	bne.n	80074ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	4b7d      	ldr	r3, [pc, #500]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	4a7c      	ldr	r2, [pc, #496]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80074ba:	4b7a      	ldr	r3, [pc, #488]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ca:	4b77      	ldr	r3, [pc, #476]	@ (80076a8 <HAL_RCC_OscConfig+0x474>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d118      	bne.n	8007508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d6:	4b74      	ldr	r3, [pc, #464]	@ (80076a8 <HAL_RCC_OscConfig+0x474>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a73      	ldr	r2, [pc, #460]	@ (80076a8 <HAL_RCC_OscConfig+0x474>)
 80074dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e2:	f7fa fc79 	bl	8001dd8 <HAL_GetTick>
 80074e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e8:	e008      	b.n	80074fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ea:	f7fa fc75 	bl	8001dd8 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e10c      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fc:	4b6a      	ldr	r3, [pc, #424]	@ (80076a8 <HAL_RCC_OscConfig+0x474>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007504:	2b00      	cmp	r3, #0
 8007506:	d0f0      	beq.n	80074ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d106      	bne.n	800751e <HAL_RCC_OscConfig+0x2ea>
 8007510:	4b64      	ldr	r3, [pc, #400]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007514:	4a63      	ldr	r2, [pc, #396]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	6713      	str	r3, [r2, #112]	@ 0x70
 800751c:	e01c      	b.n	8007558 <HAL_RCC_OscConfig+0x324>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b05      	cmp	r3, #5
 8007524:	d10c      	bne.n	8007540 <HAL_RCC_OscConfig+0x30c>
 8007526:	4b5f      	ldr	r3, [pc, #380]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	4a5e      	ldr	r2, [pc, #376]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 800752c:	f043 0304 	orr.w	r3, r3, #4
 8007530:	6713      	str	r3, [r2, #112]	@ 0x70
 8007532:	4b5c      	ldr	r3, [pc, #368]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007536:	4a5b      	ldr	r2, [pc, #364]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007538:	f043 0301 	orr.w	r3, r3, #1
 800753c:	6713      	str	r3, [r2, #112]	@ 0x70
 800753e:	e00b      	b.n	8007558 <HAL_RCC_OscConfig+0x324>
 8007540:	4b58      	ldr	r3, [pc, #352]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007544:	4a57      	ldr	r2, [pc, #348]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	6713      	str	r3, [r2, #112]	@ 0x70
 800754c:	4b55      	ldr	r3, [pc, #340]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 800754e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007550:	4a54      	ldr	r2, [pc, #336]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007552:	f023 0304 	bic.w	r3, r3, #4
 8007556:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d015      	beq.n	800758c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007560:	f7fa fc3a 	bl	8001dd8 <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007566:	e00a      	b.n	800757e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007568:	f7fa fc36 	bl	8001dd8 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007576:	4293      	cmp	r3, r2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e0cb      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800757e:	4b49      	ldr	r3, [pc, #292]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ee      	beq.n	8007568 <HAL_RCC_OscConfig+0x334>
 800758a:	e014      	b.n	80075b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800758c:	f7fa fc24 	bl	8001dd8 <HAL_GetTick>
 8007590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007592:	e00a      	b.n	80075aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007594:	f7fa fc20 	bl	8001dd8 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e0b5      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075aa:	4b3e      	ldr	r3, [pc, #248]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80075ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1ee      	bne.n	8007594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d105      	bne.n	80075c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075bc:	4b39      	ldr	r3, [pc, #228]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80075be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c0:	4a38      	ldr	r2, [pc, #224]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80075c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 80a1 	beq.w	8007714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80075d2:	4b34      	ldr	r3, [pc, #208]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 030c 	and.w	r3, r3, #12
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d05c      	beq.n	8007698 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d141      	bne.n	800766a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e6:	4b31      	ldr	r3, [pc, #196]	@ (80076ac <HAL_RCC_OscConfig+0x478>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ec:	f7fa fbf4 	bl	8001dd8 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fa fbf0 	bl	8001dd8 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e087      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b27      	ldr	r3, [pc, #156]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007620:	019b      	lsls	r3, r3, #6
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	3b01      	subs	r3, #1
 800762c:	041b      	lsls	r3, r3, #16
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007634:	061b      	lsls	r3, r3, #24
 8007636:	491b      	ldr	r1, [pc, #108]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 8007638:	4313      	orrs	r3, r2
 800763a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800763c:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <HAL_RCC_OscConfig+0x478>)
 800763e:	2201      	movs	r2, #1
 8007640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007642:	f7fa fbc9 	bl	8001dd8 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800764a:	f7fa fbc5 	bl	8001dd8 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e05c      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765c:	4b11      	ldr	r3, [pc, #68]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	d0f0      	beq.n	800764a <HAL_RCC_OscConfig+0x416>
 8007668:	e054      	b.n	8007714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800766a:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <HAL_RCC_OscConfig+0x478>)
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007670:	f7fa fbb2 	bl	8001dd8 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007676:	e008      	b.n	800768a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007678:	f7fa fbae 	bl	8001dd8 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b02      	cmp	r3, #2
 8007684:	d901      	bls.n	800768a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e045      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768a:	4b06      	ldr	r3, [pc, #24]	@ (80076a4 <HAL_RCC_OscConfig+0x470>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_OscConfig+0x444>
 8007696:	e03d      	b.n	8007714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d107      	bne.n	80076b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e038      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40007000 	.word	0x40007000
 80076ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007720 <HAL_RCC_OscConfig+0x4ec>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d028      	beq.n	8007710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d121      	bne.n	8007710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d11a      	bne.n	8007710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80076e0:	4013      	ands	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80076e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d111      	bne.n	8007710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f6:	085b      	lsrs	r3, r3, #1
 80076f8:	3b01      	subs	r3, #1
 80076fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d107      	bne.n	8007710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e000      	b.n	8007716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800

08007724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0cc      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007738:	4b68      	ldr	r3, [pc, #416]	@ (80078dc <HAL_RCC_ClockConfig+0x1b8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d90c      	bls.n	8007760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007746:	4b65      	ldr	r3, [pc, #404]	@ (80078dc <HAL_RCC_ClockConfig+0x1b8>)
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800774e:	4b63      	ldr	r3, [pc, #396]	@ (80078dc <HAL_RCC_ClockConfig+0x1b8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d001      	beq.n	8007760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0b8      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d020      	beq.n	80077ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007778:	4b59      	ldr	r3, [pc, #356]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	4a58      	ldr	r2, [pc, #352]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 800777e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007790:	4b53      	ldr	r3, [pc, #332]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	4a52      	ldr	r2, [pc, #328]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800779a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800779c:	4b50      	ldr	r3, [pc, #320]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	494d      	ldr	r1, [pc, #308]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d044      	beq.n	8007844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d107      	bne.n	80077d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077c2:	4b47      	ldr	r3, [pc, #284]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d119      	bne.n	8007802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e07f      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d003      	beq.n	80077e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d107      	bne.n	80077f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e2:	4b3f      	ldr	r3, [pc, #252]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e06f      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f2:	4b3b      	ldr	r3, [pc, #236]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e067      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007802:	4b37      	ldr	r3, [pc, #220]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f023 0203 	bic.w	r2, r3, #3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	4934      	ldr	r1, [pc, #208]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007810:	4313      	orrs	r3, r2
 8007812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007814:	f7fa fae0 	bl	8001dd8 <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781a:	e00a      	b.n	8007832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800781c:	f7fa fadc 	bl	8001dd8 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782a:	4293      	cmp	r3, r2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e04f      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007832:	4b2b      	ldr	r3, [pc, #172]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 020c 	and.w	r2, r3, #12
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	429a      	cmp	r2, r3
 8007842:	d1eb      	bne.n	800781c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007844:	4b25      	ldr	r3, [pc, #148]	@ (80078dc <HAL_RCC_ClockConfig+0x1b8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d20c      	bcs.n	800786c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007852:	4b22      	ldr	r3, [pc, #136]	@ (80078dc <HAL_RCC_ClockConfig+0x1b8>)
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800785a:	4b20      	ldr	r3, [pc, #128]	@ (80078dc <HAL_RCC_ClockConfig+0x1b8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d001      	beq.n	800786c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e032      	b.n	80078d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007878:	4b19      	ldr	r3, [pc, #100]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	4916      	ldr	r1, [pc, #88]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007886:	4313      	orrs	r3, r2
 8007888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0308 	and.w	r3, r3, #8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007896:	4b12      	ldr	r3, [pc, #72]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	490e      	ldr	r1, [pc, #56]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078aa:	f000 f821 	bl	80078f0 <HAL_RCC_GetSysClockFreq>
 80078ae:	4602      	mov	r2, r0
 80078b0:	4b0b      	ldr	r3, [pc, #44]	@ (80078e0 <HAL_RCC_ClockConfig+0x1bc>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	490a      	ldr	r1, [pc, #40]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 80078bc:	5ccb      	ldrb	r3, [r1, r3]
 80078be:	fa22 f303 	lsr.w	r3, r2, r3
 80078c2:	4a09      	ldr	r2, [pc, #36]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80078c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80078c6:	4b09      	ldr	r3, [pc, #36]	@ (80078ec <HAL_RCC_ClockConfig+0x1c8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fa fa40 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	40023c00 	.word	0x40023c00
 80078e0:	40023800 	.word	0x40023800
 80078e4:	0800d488 	.word	0x0800d488
 80078e8:	20000038 	.word	0x20000038
 80078ec:	2000003c 	.word	0x2000003c

080078f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078f4:	b090      	sub	sp, #64	@ 0x40
 80078f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007908:	4b59      	ldr	r3, [pc, #356]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 030c 	and.w	r3, r3, #12
 8007910:	2b08      	cmp	r3, #8
 8007912:	d00d      	beq.n	8007930 <HAL_RCC_GetSysClockFreq+0x40>
 8007914:	2b08      	cmp	r3, #8
 8007916:	f200 80a1 	bhi.w	8007a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_RCC_GetSysClockFreq+0x34>
 800791e:	2b04      	cmp	r3, #4
 8007920:	d003      	beq.n	800792a <HAL_RCC_GetSysClockFreq+0x3a>
 8007922:	e09b      	b.n	8007a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007924:	4b53      	ldr	r3, [pc, #332]	@ (8007a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8007926:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007928:	e09b      	b.n	8007a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800792a:	4b53      	ldr	r3, [pc, #332]	@ (8007a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800792c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800792e:	e098      	b.n	8007a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007930:	4b4f      	ldr	r3, [pc, #316]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007938:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800793a:	4b4d      	ldr	r3, [pc, #308]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d028      	beq.n	8007998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007946:	4b4a      	ldr	r3, [pc, #296]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	099b      	lsrs	r3, r3, #6
 800794c:	2200      	movs	r2, #0
 800794e:	623b      	str	r3, [r7, #32]
 8007950:	627a      	str	r2, [r7, #36]	@ 0x24
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007958:	2100      	movs	r1, #0
 800795a:	4b47      	ldr	r3, [pc, #284]	@ (8007a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800795c:	fb03 f201 	mul.w	r2, r3, r1
 8007960:	2300      	movs	r3, #0
 8007962:	fb00 f303 	mul.w	r3, r0, r3
 8007966:	4413      	add	r3, r2
 8007968:	4a43      	ldr	r2, [pc, #268]	@ (8007a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800796a:	fba0 1202 	umull	r1, r2, r0, r2
 800796e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007970:	460a      	mov	r2, r1
 8007972:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007976:	4413      	add	r3, r2
 8007978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800797a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797c:	2200      	movs	r2, #0
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	61fa      	str	r2, [r7, #28]
 8007982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800798a:	f7f8 fc25 	bl	80001d8 <__aeabi_uldivmod>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4613      	mov	r3, r2
 8007994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007996:	e053      	b.n	8007a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007998:	4b35      	ldr	r3, [pc, #212]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	099b      	lsrs	r3, r3, #6
 800799e:	2200      	movs	r2, #0
 80079a0:	613b      	str	r3, [r7, #16]
 80079a2:	617a      	str	r2, [r7, #20]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80079aa:	f04f 0b00 	mov.w	fp, #0
 80079ae:	4652      	mov	r2, sl
 80079b0:	465b      	mov	r3, fp
 80079b2:	f04f 0000 	mov.w	r0, #0
 80079b6:	f04f 0100 	mov.w	r1, #0
 80079ba:	0159      	lsls	r1, r3, #5
 80079bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079c0:	0150      	lsls	r0, r2, #5
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	ebb2 080a 	subs.w	r8, r2, sl
 80079ca:	eb63 090b 	sbc.w	r9, r3, fp
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	f04f 0300 	mov.w	r3, #0
 80079d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80079da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80079de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80079e2:	ebb2 0408 	subs.w	r4, r2, r8
 80079e6:	eb63 0509 	sbc.w	r5, r3, r9
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	00eb      	lsls	r3, r5, #3
 80079f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079f8:	00e2      	lsls	r2, r4, #3
 80079fa:	4614      	mov	r4, r2
 80079fc:	461d      	mov	r5, r3
 80079fe:	eb14 030a 	adds.w	r3, r4, sl
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	eb45 030b 	adc.w	r3, r5, fp
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a16:	4629      	mov	r1, r5
 8007a18:	028b      	lsls	r3, r1, #10
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a20:	4621      	mov	r1, r4
 8007a22:	028a      	lsls	r2, r1, #10
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
 8007a2e:	60fa      	str	r2, [r7, #12]
 8007a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a34:	f7f8 fbd0 	bl	80001d8 <__aeabi_uldivmod>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007a40:	4b0b      	ldr	r3, [pc, #44]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007a50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a5a:	e002      	b.n	8007a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a5c:	4b05      	ldr	r3, [pc, #20]	@ (8007a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8007a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3740      	adds	r7, #64	@ 0x40
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800
 8007a74:	00f42400 	.word	0x00f42400
 8007a78:	017d7840 	.word	0x017d7840

08007a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a80:	4b03      	ldr	r3, [pc, #12]	@ (8007a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a82:	681b      	ldr	r3, [r3, #0]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	20000038 	.word	0x20000038

08007a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a98:	f7ff fff0 	bl	8007a7c <HAL_RCC_GetHCLKFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	0a9b      	lsrs	r3, r3, #10
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	4903      	ldr	r1, [pc, #12]	@ (8007ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40023800 	.word	0x40023800
 8007ab8:	0800d498 	.word	0x0800d498

08007abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e041      	b.n	8007b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7f9 fff8 	bl	8001ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	4610      	mov	r0, r2
 8007afc:	f000 fab2 	bl	8008064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d001      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e044      	b.n	8007bfe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1e      	ldr	r2, [pc, #120]	@ (8007c0c <HAL_TIM_Base_Start_IT+0xb0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d018      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9e:	d013      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8007c10 <HAL_TIM_Base_Start_IT+0xb4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a19      	ldr	r2, [pc, #100]	@ (8007c14 <HAL_TIM_Base_Start_IT+0xb8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d009      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a17      	ldr	r2, [pc, #92]	@ (8007c18 <HAL_TIM_Base_Start_IT+0xbc>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_TIM_Base_Start_IT+0x6c>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	@ (8007c1c <HAL_TIM_Base_Start_IT+0xc0>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d111      	bne.n	8007bec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d010      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0201 	orr.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bea:	e007      	b.n	8007bfc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 0201 	orr.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40010000 	.word	0x40010000
 8007c10:	40000400 	.word	0x40000400
 8007c14:	40000800 	.word	0x40000800
 8007c18:	40000c00 	.word	0x40000c00
 8007c1c:	40014000 	.word	0x40014000

08007c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d020      	beq.n	8007c84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01b      	beq.n	8007c84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0202 	mvn.w	r2, #2
 8007c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9db 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9cd 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9de 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d020      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01b      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f06f 0204 	mvn.w	r2, #4
 8007ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f9b5 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007cbc:	e005      	b.n	8007cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f9a7 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9b8 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d020      	beq.n	8007d1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f003 0308 	and.w	r3, r3, #8
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01b      	beq.n	8007d1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0208 	mvn.w	r2, #8
 8007cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f98f 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007d08:	e005      	b.n	8007d16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f981 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f992 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d020      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01b      	beq.n	8007d68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0210 	mvn.w	r2, #16
 8007d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f969 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007d54:	e005      	b.n	8007d62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f95b 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f96c 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00c      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f06f 0201 	mvn.w	r2, #1
 8007d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7f8 fbec 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00c      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d007      	beq.n	8007db0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb84 	bl	80084b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00c      	beq.n	8007dd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f93d 	bl	800804e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00c      	beq.n	8007df8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d007      	beq.n	8007df8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0220 	mvn.w	r2, #32
 8007df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fb56 	bl	80084a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007df8:	bf00      	nop
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d101      	bne.n	8007e1c <HAL_TIM_ConfigClockSource+0x1c>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e0b4      	b.n	8007f86 <HAL_TIM_ConfigClockSource+0x186>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e54:	d03e      	beq.n	8007ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8007e56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e5a:	f200 8087 	bhi.w	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e62:	f000 8086 	beq.w	8007f72 <HAL_TIM_ConfigClockSource+0x172>
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6a:	d87f      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e6c:	2b70      	cmp	r3, #112	@ 0x70
 8007e6e:	d01a      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8007e70:	2b70      	cmp	r3, #112	@ 0x70
 8007e72:	d87b      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e74:	2b60      	cmp	r3, #96	@ 0x60
 8007e76:	d050      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x11a>
 8007e78:	2b60      	cmp	r3, #96	@ 0x60
 8007e7a:	d877      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e7c:	2b50      	cmp	r3, #80	@ 0x50
 8007e7e:	d03c      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0xfa>
 8007e80:	2b50      	cmp	r3, #80	@ 0x50
 8007e82:	d873      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e84:	2b40      	cmp	r3, #64	@ 0x40
 8007e86:	d058      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x13a>
 8007e88:	2b40      	cmp	r3, #64	@ 0x40
 8007e8a:	d86f      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e8c:	2b30      	cmp	r3, #48	@ 0x30
 8007e8e:	d064      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15a>
 8007e90:	2b30      	cmp	r3, #48	@ 0x30
 8007e92:	d86b      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e94:	2b20      	cmp	r3, #32
 8007e96:	d060      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15a>
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d867      	bhi.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05c      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15a>
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d05a      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0x15a>
 8007ea4:	e062      	b.n	8007f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007eb6:	f000 fa66 	bl	8008386 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	609a      	str	r2, [r3, #8]
      break;
 8007ed2:	e04f      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ee4:	f000 fa4f 	bl	8008386 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ef6:	609a      	str	r2, [r3, #8]
      break;
 8007ef8:	e03c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f06:	461a      	mov	r2, r3
 8007f08:	f000 f9c3 	bl	8008292 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2150      	movs	r1, #80	@ 0x50
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fa1c 	bl	8008350 <TIM_ITRx_SetConfig>
      break;
 8007f18:	e02c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f26:	461a      	mov	r2, r3
 8007f28:	f000 f9e2 	bl	80082f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2160      	movs	r1, #96	@ 0x60
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fa0c 	bl	8008350 <TIM_ITRx_SetConfig>
      break;
 8007f38:	e01c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f46:	461a      	mov	r2, r3
 8007f48:	f000 f9a3 	bl	8008292 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2140      	movs	r1, #64	@ 0x40
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f9fc 	bl	8008350 <TIM_ITRx_SetConfig>
      break;
 8007f58:	e00c      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f000 f9f3 	bl	8008350 <TIM_ITRx_SetConfig>
      break;
 8007f6a:	e003      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f70:	e000      	b.n	8007f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e031      	b.n	800800a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f8d9 	bl	8008170 <TIM_SlaveTimer_SetConfig>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d009      	beq.n	8007fd8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e018      	b.n	800800a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fe6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ff6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a37      	ldr	r2, [pc, #220]	@ (8008154 <TIM_Base_SetConfig+0xf0>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00f      	beq.n	800809c <TIM_Base_SetConfig+0x38>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008082:	d00b      	beq.n	800809c <TIM_Base_SetConfig+0x38>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a34      	ldr	r2, [pc, #208]	@ (8008158 <TIM_Base_SetConfig+0xf4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_Base_SetConfig+0x38>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a33      	ldr	r2, [pc, #204]	@ (800815c <TIM_Base_SetConfig+0xf8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_Base_SetConfig+0x38>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a32      	ldr	r2, [pc, #200]	@ (8008160 <TIM_Base_SetConfig+0xfc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d108      	bne.n	80080ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a28      	ldr	r2, [pc, #160]	@ (8008154 <TIM_Base_SetConfig+0xf0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d01b      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080bc:	d017      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a25      	ldr	r2, [pc, #148]	@ (8008158 <TIM_Base_SetConfig+0xf4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d013      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a24      	ldr	r2, [pc, #144]	@ (800815c <TIM_Base_SetConfig+0xf8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d00f      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a23      	ldr	r2, [pc, #140]	@ (8008160 <TIM_Base_SetConfig+0xfc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d00b      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a22      	ldr	r2, [pc, #136]	@ (8008164 <TIM_Base_SetConfig+0x100>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d007      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a21      	ldr	r2, [pc, #132]	@ (8008168 <TIM_Base_SetConfig+0x104>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d003      	beq.n	80080ee <TIM_Base_SetConfig+0x8a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a20      	ldr	r2, [pc, #128]	@ (800816c <TIM_Base_SetConfig+0x108>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d108      	bne.n	8008100 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	689a      	ldr	r2, [r3, #8]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a0c      	ldr	r2, [pc, #48]	@ (8008154 <TIM_Base_SetConfig+0xf0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d103      	bne.n	800812e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f043 0204 	orr.w	r2, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	601a      	str	r2, [r3, #0]
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40010000 	.word	0x40010000
 8008158:	40000400 	.word	0x40000400
 800815c:	40000800 	.word	0x40000800
 8008160:	40000c00 	.word	0x40000c00
 8008164:	40014000 	.word	0x40014000
 8008168:	40014400 	.word	0x40014400
 800816c:	40014800 	.word	0x40014800

08008170 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	4313      	orrs	r3, r2
 8008196:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	2b70      	cmp	r3, #112	@ 0x70
 80081b8:	d01a      	beq.n	80081f0 <TIM_SlaveTimer_SetConfig+0x80>
 80081ba:	2b70      	cmp	r3, #112	@ 0x70
 80081bc:	d860      	bhi.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
 80081be:	2b60      	cmp	r3, #96	@ 0x60
 80081c0:	d054      	beq.n	800826c <TIM_SlaveTimer_SetConfig+0xfc>
 80081c2:	2b60      	cmp	r3, #96	@ 0x60
 80081c4:	d85c      	bhi.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
 80081c6:	2b50      	cmp	r3, #80	@ 0x50
 80081c8:	d046      	beq.n	8008258 <TIM_SlaveTimer_SetConfig+0xe8>
 80081ca:	2b50      	cmp	r3, #80	@ 0x50
 80081cc:	d858      	bhi.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
 80081ce:	2b40      	cmp	r3, #64	@ 0x40
 80081d0:	d019      	beq.n	8008206 <TIM_SlaveTimer_SetConfig+0x96>
 80081d2:	2b40      	cmp	r3, #64	@ 0x40
 80081d4:	d854      	bhi.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
 80081d6:	2b30      	cmp	r3, #48	@ 0x30
 80081d8:	d055      	beq.n	8008286 <TIM_SlaveTimer_SetConfig+0x116>
 80081da:	2b30      	cmp	r3, #48	@ 0x30
 80081dc:	d850      	bhi.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d051      	beq.n	8008286 <TIM_SlaveTimer_SetConfig+0x116>
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d84c      	bhi.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d04d      	beq.n	8008286 <TIM_SlaveTimer_SetConfig+0x116>
 80081ea:	2b10      	cmp	r3, #16
 80081ec:	d04b      	beq.n	8008286 <TIM_SlaveTimer_SetConfig+0x116>
 80081ee:	e047      	b.n	8008280 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008200:	f000 f8c1 	bl	8008386 <TIM_ETR_SetConfig>
      break;
 8008204:	e040      	b.n	8008288 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b05      	cmp	r3, #5
 800820c:	d101      	bne.n	8008212 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e03b      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6a1a      	ldr	r2, [r3, #32]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0201 	bic.w	r2, r2, #1
 8008228:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008238:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	011b      	lsls	r3, r3, #4
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	4313      	orrs	r3, r2
 8008244:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	621a      	str	r2, [r3, #32]
      break;
 8008256:	e017      	b.n	8008288 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008264:	461a      	mov	r2, r3
 8008266:	f000 f814 	bl	8008292 <TIM_TI1_ConfigInputStage>
      break;
 800826a:	e00d      	b.n	8008288 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008278:	461a      	mov	r2, r3
 800827a:	f000 f839 	bl	80082f0 <TIM_TI2_ConfigInputStage>
      break;
 800827e:	e003      	b.n	8008288 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
      break;
 8008284:	e000      	b.n	8008288 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008286:	bf00      	nop
  }

  return status;
 8008288:	7dfb      	ldrb	r3, [r7, #23]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008292:	b480      	push	{r7}
 8008294:	b087      	sub	sp, #28
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	f023 0201 	bic.w	r2, r3, #1
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 030a 	bic.w	r3, r3, #10
 80082ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	621a      	str	r2, [r3, #32]
}
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0210 	bic.w	r2, r3, #16
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800831a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	031b      	lsls	r3, r3, #12
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800832c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008366:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4313      	orrs	r3, r2
 800836e:	f043 0307 	orr.w	r3, r3, #7
 8008372:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	609a      	str	r2, [r3, #8]
}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008386:	b480      	push	{r7}
 8008388:	b087      	sub	sp, #28
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	021a      	lsls	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	431a      	orrs	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	609a      	str	r2, [r3, #8]
}
 80083ba:	bf00      	nop
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083dc:	2302      	movs	r3, #2
 80083de:	e050      	b.n	8008482 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a1c      	ldr	r2, [pc, #112]	@ (8008490 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d018      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800842c:	d013      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a18      	ldr	r2, [pc, #96]	@ (8008494 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d00e      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a16      	ldr	r2, [pc, #88]	@ (8008498 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d009      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a15      	ldr	r2, [pc, #84]	@ (800849c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d004      	beq.n	8008456 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a13      	ldr	r2, [pc, #76]	@ (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d10c      	bne.n	8008470 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800845c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4313      	orrs	r3, r2
 8008466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40010000 	.word	0x40010000
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40014000 	.word	0x40014000

080084a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084cc:	b084      	sub	sp, #16
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	f107 001c 	add.w	r0, r7, #28
 80084da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d123      	bne.n	800852e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80084fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800850e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008512:	2b01      	cmp	r3, #1
 8008514:	d105      	bne.n	8008522 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fae8 	bl	8009af8 <USB_CoreReset>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]
 800852c:	e01b      	b.n	8008566 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 fadc 	bl	8009af8 <USB_CoreReset>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008544:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008550:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	@ 0x38
 8008558:	e005      	b.n	8008566 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008566:	7fbb      	ldrb	r3, [r7, #30]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d10b      	bne.n	8008584 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f043 0206 	orr.w	r2, r3, #6
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f043 0220 	orr.w	r2, r3, #32
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008590:	b004      	add	sp, #16
 8008592:	4770      	bx	lr

08008594 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008594:	b480      	push	{r7}
 8008596:	b087      	sub	sp, #28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d165      	bne.n	8008674 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4a41      	ldr	r2, [pc, #260]	@ (80086b0 <USB_SetTurnaroundTime+0x11c>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d906      	bls.n	80085be <USB_SetTurnaroundTime+0x2a>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4a40      	ldr	r2, [pc, #256]	@ (80086b4 <USB_SetTurnaroundTime+0x120>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d202      	bcs.n	80085be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80085b8:	230f      	movs	r3, #15
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	e062      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	4a3c      	ldr	r2, [pc, #240]	@ (80086b4 <USB_SetTurnaroundTime+0x120>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d306      	bcc.n	80085d4 <USB_SetTurnaroundTime+0x40>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4a3b      	ldr	r2, [pc, #236]	@ (80086b8 <USB_SetTurnaroundTime+0x124>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d202      	bcs.n	80085d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80085ce:	230e      	movs	r3, #14
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e057      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4a38      	ldr	r2, [pc, #224]	@ (80086b8 <USB_SetTurnaroundTime+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d306      	bcc.n	80085ea <USB_SetTurnaroundTime+0x56>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a37      	ldr	r2, [pc, #220]	@ (80086bc <USB_SetTurnaroundTime+0x128>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d202      	bcs.n	80085ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085e4:	230d      	movs	r3, #13
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e04c      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	4a33      	ldr	r2, [pc, #204]	@ (80086bc <USB_SetTurnaroundTime+0x128>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d306      	bcc.n	8008600 <USB_SetTurnaroundTime+0x6c>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4a32      	ldr	r2, [pc, #200]	@ (80086c0 <USB_SetTurnaroundTime+0x12c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d802      	bhi.n	8008600 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085fa:	230c      	movs	r3, #12
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	e041      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4a2f      	ldr	r2, [pc, #188]	@ (80086c0 <USB_SetTurnaroundTime+0x12c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d906      	bls.n	8008616 <USB_SetTurnaroundTime+0x82>
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4a2e      	ldr	r2, [pc, #184]	@ (80086c4 <USB_SetTurnaroundTime+0x130>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d802      	bhi.n	8008616 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008610:	230b      	movs	r3, #11
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e036      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <USB_SetTurnaroundTime+0x130>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d906      	bls.n	800862c <USB_SetTurnaroundTime+0x98>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4a29      	ldr	r2, [pc, #164]	@ (80086c8 <USB_SetTurnaroundTime+0x134>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d802      	bhi.n	800862c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008626:	230a      	movs	r3, #10
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	e02b      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4a26      	ldr	r2, [pc, #152]	@ (80086c8 <USB_SetTurnaroundTime+0x134>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d906      	bls.n	8008642 <USB_SetTurnaroundTime+0xae>
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4a25      	ldr	r2, [pc, #148]	@ (80086cc <USB_SetTurnaroundTime+0x138>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d202      	bcs.n	8008642 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800863c:	2309      	movs	r3, #9
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e020      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4a21      	ldr	r2, [pc, #132]	@ (80086cc <USB_SetTurnaroundTime+0x138>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d306      	bcc.n	8008658 <USB_SetTurnaroundTime+0xc4>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	4a20      	ldr	r2, [pc, #128]	@ (80086d0 <USB_SetTurnaroundTime+0x13c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d802      	bhi.n	8008658 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008652:	2308      	movs	r3, #8
 8008654:	617b      	str	r3, [r7, #20]
 8008656:	e015      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	4a1d      	ldr	r2, [pc, #116]	@ (80086d0 <USB_SetTurnaroundTime+0x13c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d906      	bls.n	800866e <USB_SetTurnaroundTime+0xda>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4a1c      	ldr	r2, [pc, #112]	@ (80086d4 <USB_SetTurnaroundTime+0x140>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d202      	bcs.n	800866e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008668:	2307      	movs	r3, #7
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e00a      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800866e:	2306      	movs	r3, #6
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e007      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800867a:	2309      	movs	r3, #9
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e001      	b.n	8008684 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008680:	2309      	movs	r3, #9
 8008682:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	029b      	lsls	r3, r3, #10
 8008698:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800869c:	431a      	orrs	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	371c      	adds	r7, #28
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	00d8acbf 	.word	0x00d8acbf
 80086b4:	00e4e1c0 	.word	0x00e4e1c0
 80086b8:	00f42400 	.word	0x00f42400
 80086bc:	01067380 	.word	0x01067380
 80086c0:	011a499f 	.word	0x011a499f
 80086c4:	01312cff 	.word	0x01312cff
 80086c8:	014ca43f 	.word	0x014ca43f
 80086cc:	016e3600 	.word	0x016e3600
 80086d0:	01a6ab1f 	.word	0x01a6ab1f
 80086d4:	01e84800 	.word	0x01e84800

080086d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f043 0201 	orr.w	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f023 0201 	bic.w	r2, r3, #1
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008738:	78fb      	ldrb	r3, [r7, #3]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d115      	bne.n	800876a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800874a:	200a      	movs	r0, #10
 800874c:	f7f9 fb50 	bl	8001df0 <HAL_Delay>
      ms += 10U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	330a      	adds	r3, #10
 8008754:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 f93f 	bl	80099da <USB_GetMode>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d01e      	beq.n	80087a0 <USB_SetCurrentMode+0x84>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2bc7      	cmp	r3, #199	@ 0xc7
 8008766:	d9f0      	bls.n	800874a <USB_SetCurrentMode+0x2e>
 8008768:	e01a      	b.n	80087a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d115      	bne.n	800879c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800877c:	200a      	movs	r0, #10
 800877e:	f7f9 fb37 	bl	8001df0 <HAL_Delay>
      ms += 10U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	330a      	adds	r3, #10
 8008786:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f001 f926 	bl	80099da <USB_GetMode>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <USB_SetCurrentMode+0x84>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2bc7      	cmp	r3, #199	@ 0xc7
 8008798:	d9f0      	bls.n	800877c <USB_SetCurrentMode+0x60>
 800879a:	e001      	b.n	80087a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e005      	b.n	80087ac <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2bc8      	cmp	r3, #200	@ 0xc8
 80087a4:	d101      	bne.n	80087aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087b4:	b084      	sub	sp, #16
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80087c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	e009      	b.n	80087e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3340      	adds	r3, #64	@ 0x40
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	2200      	movs	r2, #0
 80087e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	3301      	adds	r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b0e      	cmp	r3, #14
 80087ec:	d9f2      	bls.n	80087d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d11c      	bne.n	8008830 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800881a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008826:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	639a      	str	r2, [r3, #56]	@ 0x38
 800882e:	e00b      	b.n	8008848 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008834:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008840:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800884e:	461a      	mov	r2, r3
 8008850:	2300      	movs	r3, #0
 8008852:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008854:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008858:	2b01      	cmp	r3, #1
 800885a:	d10d      	bne.n	8008878 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800885c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f968 	bl	8008b3c <USB_SetDevSpeed>
 800886c:	e008      	b.n	8008880 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800886e:	2101      	movs	r1, #1
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f963 	bl	8008b3c <USB_SetDevSpeed>
 8008876:	e003      	b.n	8008880 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008878:	2103      	movs	r1, #3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f95e 	bl	8008b3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008880:	2110      	movs	r1, #16
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8fa 	bl	8008a7c <USB_FlushTxFifo>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f924 	bl	8008ae0 <USB_FlushRxFifo>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088a8:	461a      	mov	r2, r3
 80088aa:	2300      	movs	r3, #0
 80088ac:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088b4:	461a      	mov	r2, r3
 80088b6:	2300      	movs	r3, #0
 80088b8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c0:	461a      	mov	r2, r3
 80088c2:	2300      	movs	r3, #0
 80088c4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c6:	2300      	movs	r3, #0
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	e043      	b.n	8008954 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088e2:	d118      	bne.n	8008916 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10a      	bne.n	8008900 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f6:	461a      	mov	r2, r3
 80088f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	e013      	b.n	8008928 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800890c:	461a      	mov	r2, r3
 800890e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e008      	b.n	8008928 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008922:	461a      	mov	r2, r3
 8008924:	2300      	movs	r3, #0
 8008926:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008934:	461a      	mov	r2, r3
 8008936:	2300      	movs	r3, #0
 8008938:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4413      	add	r3, r2
 8008942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008946:	461a      	mov	r2, r3
 8008948:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800894c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008958:	461a      	mov	r2, r3
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	4293      	cmp	r3, r2
 800895e:	d3b5      	bcc.n	80088cc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008960:	2300      	movs	r3, #0
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	e043      	b.n	80089ee <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800897c:	d118      	bne.n	80089b0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10a      	bne.n	800899a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008990:	461a      	mov	r2, r3
 8008992:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	e013      	b.n	80089c2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a6:	461a      	mov	r2, r3
 80089a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	e008      	b.n	80089c2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089bc:	461a      	mov	r2, r3
 80089be:	2300      	movs	r3, #0
 80089c0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ce:	461a      	mov	r2, r3
 80089d0:	2300      	movs	r3, #0
 80089d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e0:	461a      	mov	r2, r3
 80089e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80089e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	3301      	adds	r3, #1
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089f2:	461a      	mov	r2, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d3b5      	bcc.n	8008966 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a0c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008a1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	f043 0210 	orr.w	r2, r3, #16
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699a      	ldr	r2, [r3, #24]
 8008a34:	4b10      	ldr	r3, [pc, #64]	@ (8008a78 <USB_DevInit+0x2c4>)
 8008a36:	4313      	orrs	r3, r2
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a3c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f043 0208 	orr.w	r2, r3, #8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a50:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d107      	bne.n	8008a68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a60:	f043 0304 	orr.w	r3, r3, #4
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a74:	b004      	add	sp, #16
 8008a76:	4770      	bx	lr
 8008a78:	803c3800 	.word	0x803c3800

08008a7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a96:	d901      	bls.n	8008a9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e01b      	b.n	8008ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	daf2      	bge.n	8008a8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	019b      	lsls	r3, r3, #6
 8008aac:	f043 0220 	orr.w	r2, r3, #32
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ac0:	d901      	bls.n	8008ac6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e006      	b.n	8008ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d0f0      	beq.n	8008ab4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	3301      	adds	r3, #1
 8008af0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008af8:	d901      	bls.n	8008afe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e018      	b.n	8008b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	daf2      	bge.n	8008aec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2210      	movs	r2, #16
 8008b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b1c:	d901      	bls.n	8008b22 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e006      	b.n	8008b30 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	f003 0310 	and.w	r3, r3, #16
 8008b2a:	2b10      	cmp	r3, #16
 8008b2c:	d0f0      	beq.n	8008b10 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	68f9      	ldr	r1, [r7, #12]
 8008b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b6e:	b480      	push	{r7}
 8008b70:	b087      	sub	sp, #28
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 0306 	and.w	r3, r3, #6
 8008b86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
 8008b92:	e00a      	b.n	8008baa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d002      	beq.n	8008ba0 <USB_GetDevSpeed+0x32>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b06      	cmp	r3, #6
 8008b9e:	d102      	bne.n	8008ba6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	75fb      	strb	r3, [r7, #23]
 8008ba4:	e001      	b.n	8008baa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ba6:	230f      	movs	r3, #15
 8008ba8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d13a      	bne.n	8008c4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bda:	69da      	ldr	r2, [r3, #28]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	2101      	movs	r1, #1
 8008be6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	68f9      	ldr	r1, [r7, #12]
 8008bee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d155      	bne.n	8008cb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	791b      	ldrb	r3, [r3, #4]
 8008c26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	059b      	lsls	r3, r3, #22
 8008c2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c30:	4313      	orrs	r3, r2
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	e036      	b.n	8008cb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c50:	69da      	ldr	r2, [r3, #28]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c60:	041b      	lsls	r3, r3, #16
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d11a      	bne.n	8008cb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	0151      	lsls	r1, r2, #5
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	440a      	add	r2, r1
 8008caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	785b      	ldrb	r3, [r3, #1]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d161      	bne.n	8008da8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cfa:	d11f      	bne.n	8008d3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	0151      	lsls	r1, r2, #5
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	440a      	add	r2, r1
 8008d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	f003 030f 	and.w	r3, r3, #15
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	43db      	mvns	r3, r3
 8008d56:	68f9      	ldr	r1, [r7, #12]
 8008d58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d66:	69da      	ldr	r2, [r3, #28]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	2101      	movs	r1, #1
 8008d72:	fa01 f303 	lsl.w	r3, r1, r3
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	43db      	mvns	r3, r3
 8008d7a:	68f9      	ldr	r1, [r7, #12]
 8008d7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d80:	4013      	ands	r3, r2
 8008d82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	015a      	lsls	r2, r3, #5
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	0159      	lsls	r1, r3, #5
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	440b      	add	r3, r1
 8008d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4b35      	ldr	r3, [pc, #212]	@ (8008e78 <USB_DeactivateEndpoint+0x1b0>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	600b      	str	r3, [r1, #0]
 8008da6:	e060      	b.n	8008e6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dbe:	d11f      	bne.n	8008e00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	0151      	lsls	r1, r2, #5
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	440a      	add	r2, r1
 8008dd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008dde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	2101      	movs	r1, #1
 8008e12:	fa01 f303 	lsl.w	r3, r1, r3
 8008e16:	041b      	lsls	r3, r3, #16
 8008e18:	43db      	mvns	r3, r3
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e20:	4013      	ands	r3, r2
 8008e22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e2a:	69da      	ldr	r2, [r3, #28]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	f003 030f 	and.w	r3, r3, #15
 8008e34:	2101      	movs	r1, #1
 8008e36:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	43db      	mvns	r3, r3
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e44:	4013      	ands	r3, r2
 8008e46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	0159      	lsls	r1, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	440b      	add	r3, r1
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e62:	4619      	mov	r1, r3
 8008e64:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <USB_DeactivateEndpoint+0x1b4>)
 8008e66:	4013      	ands	r3, r2
 8008e68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	ec337800 	.word	0xec337800
 8008e7c:	eff37800 	.word	0xeff37800

08008e80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	@ 0x28
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	785b      	ldrb	r3, [r3, #1]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	f040 817f 	bne.w	80091a0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d132      	bne.n	8008f10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008ec8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ecc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	0151      	lsls	r1, r2, #5
 8008ee0:	69fa      	ldr	r2, [r7, #28]
 8008ee2:	440a      	add	r2, r1
 8008ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ee8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008eec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f08:	0cdb      	lsrs	r3, r3, #19
 8008f0a:	04db      	lsls	r3, r3, #19
 8008f0c:	6113      	str	r3, [r2, #16]
 8008f0e:	e097      	b.n	8009040 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f2a:	0cdb      	lsrs	r3, r3, #19
 8008f2c:	04db      	lsls	r3, r3, #19
 8008f2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f52:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d11a      	bne.n	8008f90 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	691a      	ldr	r2, [r3, #16]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d903      	bls.n	8008f6e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	69fa      	ldr	r2, [r7, #28]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f8c:	6113      	str	r3, [r2, #16]
 8008f8e:	e044      	b.n	800901a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	4413      	add	r3, r2
 8008f9a:	1e5a      	subs	r2, r3, #1
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb2:	691a      	ldr	r2, [r3, #16]
 8008fb4:	8afb      	ldrh	r3, [r7, #22]
 8008fb6:	04d9      	lsls	r1, r3, #19
 8008fb8:	4ba4      	ldr	r3, [pc, #656]	@ (800924c <USB_EPStartXfer+0x3cc>)
 8008fba:	400b      	ands	r3, r1
 8008fbc:	69b9      	ldr	r1, [r7, #24]
 8008fbe:	0148      	lsls	r0, r1, #5
 8008fc0:	69f9      	ldr	r1, [r7, #28]
 8008fc2:	4401      	add	r1, r0
 8008fc4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	791b      	ldrb	r3, [r3, #4]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d122      	bne.n	800901a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008ff2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	015a      	lsls	r2, r3, #5
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	8afb      	ldrh	r3, [r7, #22]
 8009004:	075b      	lsls	r3, r3, #29
 8009006:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800900a:	69b9      	ldr	r1, [r7, #24]
 800900c:	0148      	lsls	r0, r1, #5
 800900e:	69f9      	ldr	r1, [r7, #28]
 8009010:	4401      	add	r1, r0
 8009012:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009016:	4313      	orrs	r3, r2
 8009018:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009026:	691a      	ldr	r2, [r3, #16]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009030:	69b9      	ldr	r1, [r7, #24]
 8009032:	0148      	lsls	r0, r1, #5
 8009034:	69f9      	ldr	r1, [r7, #28]
 8009036:	4401      	add	r1, r0
 8009038:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800903c:	4313      	orrs	r3, r2
 800903e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d14b      	bne.n	80090de <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d009      	beq.n	8009062 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905a:	461a      	mov	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	791b      	ldrb	r3, [r3, #4]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d128      	bne.n	80090bc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009076:	2b00      	cmp	r3, #0
 8009078:	d110      	bne.n	800909c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	0151      	lsls	r1, r2, #5
 800908c:	69fa      	ldr	r2, [r7, #28]
 800908e:	440a      	add	r2, r1
 8009090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009094:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e00f      	b.n	80090bc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	69fa      	ldr	r2, [r7, #28]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ba:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	e166      	b.n	80093ac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	0151      	lsls	r1, r2, #5
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	440a      	add	r2, r1
 80090f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090f8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80090fc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	791b      	ldrb	r3, [r3, #4]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d015      	beq.n	8009132 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 814e 	beq.w	80093ac <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	69f9      	ldr	r1, [r7, #28]
 8009128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800912c:	4313      	orrs	r3, r2
 800912e:	634b      	str	r3, [r1, #52]	@ 0x34
 8009130:	e13c      	b.n	80093ac <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800913e:	2b00      	cmp	r3, #0
 8009140:	d110      	bne.n	8009164 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	0151      	lsls	r1, r2, #5
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	440a      	add	r2, r1
 8009158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800915c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e00f      	b.n	8009184 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	69fa      	ldr	r2, [r7, #28]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800917e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009182:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	68d9      	ldr	r1, [r3, #12]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	b298      	uxth	r0, r3
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	4603      	mov	r3, r0
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f9b9 	bl	8009510 <USB_WritePacket>
 800919e:	e105      	b.n	80093ac <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	0151      	lsls	r1, r2, #5
 80091b2:	69fa      	ldr	r2, [r7, #28]
 80091b4:	440a      	add	r2, r1
 80091b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ba:	0cdb      	lsrs	r3, r3, #19
 80091bc:	04db      	lsls	r3, r3, #19
 80091be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80091de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80091e2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d132      	bne.n	8009250 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	689a      	ldr	r2, [r3, #8]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009218:	69b9      	ldr	r1, [r7, #24]
 800921a:	0148      	lsls	r0, r1, #5
 800921c:	69f9      	ldr	r1, [r7, #28]
 800921e:	4401      	add	r1, r0
 8009220:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009224:	4313      	orrs	r3, r2
 8009226:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	0151      	lsls	r1, r2, #5
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	440a      	add	r2, r1
 800923e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009242:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009246:	6113      	str	r3, [r2, #16]
 8009248:	e062      	b.n	8009310 <USB_EPStartXfer+0x490>
 800924a:	bf00      	nop
 800924c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d123      	bne.n	80092a0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009264:	691a      	ldr	r2, [r3, #16]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800926e:	69b9      	ldr	r1, [r7, #24]
 8009270:	0148      	lsls	r0, r1, #5
 8009272:	69f9      	ldr	r1, [r7, #28]
 8009274:	4401      	add	r1, r0
 8009276:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800927a:	4313      	orrs	r3, r2
 800927c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	69fa      	ldr	r2, [r7, #28]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009298:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800929c:	6113      	str	r3, [r2, #16]
 800929e:	e037      	b.n	8009310 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	4413      	add	r3, r2
 80092aa:	1e5a      	subs	r2, r3, #1
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	8afa      	ldrh	r2, [r7, #22]
 80092bc:	fb03 f202 	mul.w	r2, r3, r2
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	8afb      	ldrh	r3, [r7, #22]
 80092d4:	04d9      	lsls	r1, r3, #19
 80092d6:	4b38      	ldr	r3, [pc, #224]	@ (80093b8 <USB_EPStartXfer+0x538>)
 80092d8:	400b      	ands	r3, r1
 80092da:	69b9      	ldr	r1, [r7, #24]
 80092dc:	0148      	lsls	r0, r1, #5
 80092de:	69f9      	ldr	r1, [r7, #28]
 80092e0:	4401      	add	r1, r0
 80092e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092e6:	4313      	orrs	r3, r2
 80092e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009300:	69b9      	ldr	r1, [r7, #24]
 8009302:	0148      	lsls	r0, r1, #5
 8009304:	69f9      	ldr	r1, [r7, #28]
 8009306:	4401      	add	r1, r0
 8009308:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800930c:	4313      	orrs	r3, r2
 800930e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d10d      	bne.n	8009332 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	68d9      	ldr	r1, [r3, #12]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	015a      	lsls	r2, r3, #5
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932e:	460a      	mov	r2, r1
 8009330:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d128      	bne.n	800938c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009346:	2b00      	cmp	r3, #0
 8009348:	d110      	bne.n	800936c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009364:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	e00f      	b.n	800938c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800938a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80093aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3720      	adds	r7, #32
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	1ff80000 	.word	0x1ff80000

080093bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d14a      	bne.n	8009470 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f2:	f040 8086 	bne.w	8009502 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009414:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009418:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009438:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800943c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f242 7210 	movw	r2, #10000	@ 0x2710
 800944a:	4293      	cmp	r3, r2
 800944c:	d902      	bls.n	8009454 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	75fb      	strb	r3, [r7, #23]
          break;
 8009452:	e056      	b.n	8009502 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800946c:	d0e7      	beq.n	800943e <USB_EPStopXfer+0x82>
 800946e:	e048      	b.n	8009502 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	015a      	lsls	r2, r3, #5
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	4413      	add	r3, r2
 800947a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009488:	d13b      	bne.n	8009502 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	7812      	ldrb	r2, [r2, #0]
 800949e:	0151      	lsls	r1, r2, #5
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	440a      	add	r2, r1
 80094a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	0151      	lsls	r1, r2, #5
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	440a      	add	r2, r1
 80094c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094de:	4293      	cmp	r3, r2
 80094e0:	d902      	bls.n	80094e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	75fb      	strb	r3, [r7, #23]
          break;
 80094e6:	e00c      	b.n	8009502 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009500:	d0e7      	beq.n	80094d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
}
 8009504:	4618      	mov	r0, r3
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009510:	b480      	push	{r7}
 8009512:	b089      	sub	sp, #36	@ 0x24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	4611      	mov	r1, r2
 800951c:	461a      	mov	r2, r3
 800951e:	460b      	mov	r3, r1
 8009520:	71fb      	strb	r3, [r7, #7]
 8009522:	4613      	mov	r3, r2
 8009524:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800952e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	d123      	bne.n	800957e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009536:	88bb      	ldrh	r3, [r7, #4]
 8009538:	3303      	adds	r3, #3
 800953a:	089b      	lsrs	r3, r3, #2
 800953c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800953e:	2300      	movs	r3, #0
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	e018      	b.n	8009576 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009544:	79fb      	ldrb	r3, [r7, #7]
 8009546:	031a      	lsls	r2, r3, #12
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	4413      	add	r3, r2
 800954c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009550:	461a      	mov	r2, r3
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	3301      	adds	r3, #1
 800955c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	3301      	adds	r3, #1
 8009562:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	3301      	adds	r3, #1
 8009568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	3301      	adds	r3, #1
 800956e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	3301      	adds	r3, #1
 8009574:	61bb      	str	r3, [r7, #24]
 8009576:	69ba      	ldr	r2, [r7, #24]
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	429a      	cmp	r2, r3
 800957c:	d3e2      	bcc.n	8009544 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3724      	adds	r7, #36	@ 0x24
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800958c:	b480      	push	{r7}
 800958e:	b08b      	sub	sp, #44	@ 0x2c
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	089b      	lsrs	r3, r3, #2
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095aa:	88fb      	ldrh	r3, [r7, #6]
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	623b      	str	r3, [r7, #32]
 80095b6:	e014      	b.n	80095e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	3301      	adds	r3, #1
 80095c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095cc:	3301      	adds	r3, #1
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	3301      	adds	r3, #1
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	3301      	adds	r3, #1
 80095da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	3301      	adds	r3, #1
 80095e0:	623b      	str	r3, [r7, #32]
 80095e2:	6a3a      	ldr	r2, [r7, #32]
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d3e6      	bcc.n	80095b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80095ea:	8bfb      	ldrh	r3, [r7, #30]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01e      	beq.n	800962e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095fa:	461a      	mov	r2, r3
 80095fc:	f107 0310 	add.w	r3, r7, #16
 8009600:	6812      	ldr	r2, [r2, #0]
 8009602:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	6a3b      	ldr	r3, [r7, #32]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	fa22 f303 	lsr.w	r3, r2, r3
 8009610:	b2da      	uxtb	r2, r3
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	701a      	strb	r2, [r3, #0]
      i++;
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	3301      	adds	r3, #1
 800961a:	623b      	str	r3, [r7, #32]
      pDest++;
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	3301      	adds	r3, #1
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009622:	8bfb      	ldrh	r3, [r7, #30]
 8009624:	3b01      	subs	r3, #1
 8009626:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009628:	8bfb      	ldrh	r3, [r7, #30]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d1ea      	bne.n	8009604 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009630:	4618      	mov	r0, r3
 8009632:	372c      	adds	r7, #44	@ 0x2c
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d12c      	bne.n	80096b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	db12      	blt.n	8009690 <USB_EPSetStall+0x54>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00f      	beq.n	8009690 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800968a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800968e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	4413      	add	r3, r2
 8009698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e02b      	b.n	800970a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	db12      	blt.n	80096ea <USB_EPSetStall+0xae>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00f      	beq.n	80096ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	015a      	lsls	r2, r3, #5
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4413      	add	r3, r2
 80096d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	0151      	lsls	r1, r2, #5
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	440a      	add	r2, r1
 80096e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	0151      	lsls	r1, r2, #5
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	440a      	add	r2, r1
 8009700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009708:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	785b      	ldrb	r3, [r3, #1]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d128      	bne.n	8009786 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800974e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009752:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d003      	beq.n	8009764 <USB_EPClearStall+0x4c>
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	791b      	ldrb	r3, [r3, #4]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d138      	bne.n	80097d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	0151      	lsls	r1, r2, #5
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	440a      	add	r2, r1
 800977a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800977e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e027      	b.n	80097d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	0151      	lsls	r1, r2, #5
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	440a      	add	r2, r1
 800979c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	791b      	ldrb	r3, [r3, #4]
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	d003      	beq.n	80097b6 <USB_EPClearStall+0x9e>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	791b      	ldrb	r3, [r3, #4]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d10f      	bne.n	80097d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009802:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009806:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	78fb      	ldrb	r3, [r7, #3]
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009818:	68f9      	ldr	r1, [r7, #12]
 800981a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800981e:	4313      	orrs	r3, r2
 8009820:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800984a:	f023 0303 	bic.w	r3, r3, #3
 800984e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800985e:	f023 0302 	bic.w	r3, r3, #2
 8009862:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098a0:	f043 0302 	orr.w	r3, r3, #2
 80098a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3714      	adds	r7, #20
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	699b      	ldr	r3, [r3, #24]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4013      	ands	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80098cc:	68fb      	ldr	r3, [r7, #12]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	4013      	ands	r3, r2
 80098fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	0c1b      	lsrs	r3, r3, #16
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	4013      	ands	r3, r2
 8009930:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	b29b      	uxth	r3, r3
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	460b      	mov	r3, r1
 800994c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4013      	ands	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009970:	68bb      	ldr	r3, [r7, #8]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800997e:	b480      	push	{r7}
 8009980:	b087      	sub	sp, #28
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	460b      	mov	r3, r1
 8009988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800999e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	f003 030f 	and.w	r3, r3, #15
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	fa22 f303 	lsr.w	r3, r2, r3
 80099ae:	01db      	lsls	r3, r3, #7
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4013      	ands	r3, r2
 80099ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099cc:	68bb      	ldr	r3, [r7, #8]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f003 0301 	and.w	r3, r3, #1
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009a14:	f023 0307 	bic.w	r3, r3, #7
 8009a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a2e:	2300      	movs	r3, #0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	460b      	mov	r3, r1
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	333c      	adds	r3, #60	@ 0x3c
 8009a52:	3304      	adds	r3, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	4a26      	ldr	r2, [pc, #152]	@ (8009af4 <USB_EP0_OutStart+0xb8>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d90a      	bls.n	8009a76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a70:	d101      	bne.n	8009a76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	e037      	b.n	8009ae6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	2300      	movs	r3, #0
 8009a80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	697a      	ldr	r2, [r7, #20]
 8009aa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009aa4:	f043 0318 	orr.w	r3, r3, #24
 8009aa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ab8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009abc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009abe:	7afb      	ldrb	r3, [r7, #11]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d10f      	bne.n	8009ae4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aca:	461a      	mov	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ade:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009ae2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	371c      	adds	r7, #28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	4f54300a 	.word	0x4f54300a

08009af8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3301      	adds	r3, #1
 8009b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b10:	d901      	bls.n	8009b16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e022      	b.n	8009b5c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	daf2      	bge.n	8009b04 <USB_CoreReset+0xc>

  count = 10U;
 8009b1e:	230a      	movs	r3, #10
 8009b20:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009b22:	e002      	b.n	8009b2a <USB_CoreReset+0x32>
  {
    count--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1f9      	bne.n	8009b24 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	f043 0201 	orr.w	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b48:	d901      	bls.n	8009b4e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e006      	b.n	8009b5c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d0f0      	beq.n	8009b3c <USB_CoreReset+0x44>

  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	460b      	mov	r3, r1
 8009b72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009b78:	f002 fd1e 	bl	800c5b8 <USBD_static_malloc>
 8009b7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d109      	bne.n	8009b98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32b0      	adds	r2, #176	@ 0xb0
 8009b8e:	2100      	movs	r1, #0
 8009b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b94:	2302      	movs	r3, #2
 8009b96:	e0d4      	b.n	8009d42 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f002 fd4e 	bl	800c640 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32b0      	adds	r2, #176	@ 0xb0
 8009bae:	68f9      	ldr	r1, [r7, #12]
 8009bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32b0      	adds	r2, #176	@ 0xb0
 8009bbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	7c1b      	ldrb	r3, [r3, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d138      	bne.n	8009c42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8009d4c <USBD_CDC_Init+0x1e4>)
 8009bd2:	7819      	ldrb	r1, [r3, #0]
 8009bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bd8:	2202      	movs	r2, #2
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f002 fbc9 	bl	800c372 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009be0:	4b5a      	ldr	r3, [pc, #360]	@ (8009d4c <USBD_CDC_Init+0x1e4>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f003 020f 	and.w	r2, r3, #15
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	3323      	adds	r3, #35	@ 0x23
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bfa:	4b55      	ldr	r3, [pc, #340]	@ (8009d50 <USBD_CDC_Init+0x1e8>)
 8009bfc:	7819      	ldrb	r1, [r3, #0]
 8009bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c02:	2202      	movs	r2, #2
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f002 fbb4 	bl	800c372 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c0a:	4b51      	ldr	r3, [pc, #324]	@ (8009d50 <USBD_CDC_Init+0x1e8>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	f003 020f 	and.w	r2, r3, #15
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c22:	2201      	movs	r2, #1
 8009c24:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c26:	4b4b      	ldr	r3, [pc, #300]	@ (8009d54 <USBD_CDC_Init+0x1ec>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	f003 020f 	and.w	r2, r3, #15
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	4613      	mov	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	331c      	adds	r3, #28
 8009c3c:	2210      	movs	r2, #16
 8009c3e:	601a      	str	r2, [r3, #0]
 8009c40:	e035      	b.n	8009cae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c42:	4b42      	ldr	r3, [pc, #264]	@ (8009d4c <USBD_CDC_Init+0x1e4>)
 8009c44:	7819      	ldrb	r1, [r3, #0]
 8009c46:	2340      	movs	r3, #64	@ 0x40
 8009c48:	2202      	movs	r2, #2
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f002 fb91 	bl	800c372 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c50:	4b3e      	ldr	r3, [pc, #248]	@ (8009d4c <USBD_CDC_Init+0x1e4>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	f003 020f 	and.w	r2, r3, #15
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	3323      	adds	r3, #35	@ 0x23
 8009c66:	2201      	movs	r2, #1
 8009c68:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c6a:	4b39      	ldr	r3, [pc, #228]	@ (8009d50 <USBD_CDC_Init+0x1e8>)
 8009c6c:	7819      	ldrb	r1, [r3, #0]
 8009c6e:	2340      	movs	r3, #64	@ 0x40
 8009c70:	2202      	movs	r2, #2
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f002 fb7d 	bl	800c372 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c78:	4b35      	ldr	r3, [pc, #212]	@ (8009d50 <USBD_CDC_Init+0x1e8>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f003 020f 	and.w	r2, r3, #15
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c90:	2201      	movs	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c94:	4b2f      	ldr	r3, [pc, #188]	@ (8009d54 <USBD_CDC_Init+0x1ec>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f003 020f 	and.w	r2, r3, #15
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	440b      	add	r3, r1
 8009ca8:	331c      	adds	r3, #28
 8009caa:	2210      	movs	r2, #16
 8009cac:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cae:	4b29      	ldr	r3, [pc, #164]	@ (8009d54 <USBD_CDC_Init+0x1ec>)
 8009cb0:	7819      	ldrb	r1, [r3, #0]
 8009cb2:	2308      	movs	r3, #8
 8009cb4:	2203      	movs	r2, #3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f002 fb5b 	bl	800c372 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cbc:	4b25      	ldr	r3, [pc, #148]	@ (8009d54 <USBD_CDC_Init+0x1ec>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3323      	adds	r3, #35	@ 0x23
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	33b0      	adds	r3, #176	@ 0xb0
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	e018      	b.n	8009d42 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7c1b      	ldrb	r3, [r3, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d18:	4b0d      	ldr	r3, [pc, #52]	@ (8009d50 <USBD_CDC_Init+0x1e8>)
 8009d1a:	7819      	ldrb	r1, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f002 fc12 	bl	800c550 <USBD_LL_PrepareReceive>
 8009d2c:	e008      	b.n	8009d40 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d2e:	4b08      	ldr	r3, [pc, #32]	@ (8009d50 <USBD_CDC_Init+0x1e8>)
 8009d30:	7819      	ldrb	r1, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d38:	2340      	movs	r3, #64	@ 0x40
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f002 fc08 	bl	800c550 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200000cb 	.word	0x200000cb
 8009d50:	200000cc 	.word	0x200000cc
 8009d54:	200000cd 	.word	0x200000cd

08009d58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d64:	4b3a      	ldr	r3, [pc, #232]	@ (8009e50 <USBD_CDC_DeInit+0xf8>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f002 fb27 	bl	800c3be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d70:	4b37      	ldr	r3, [pc, #220]	@ (8009e50 <USBD_CDC_DeInit+0xf8>)
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 020f 	and.w	r2, r3, #15
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	3323      	adds	r3, #35	@ 0x23
 8009d86:	2200      	movs	r2, #0
 8009d88:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d8a:	4b32      	ldr	r3, [pc, #200]	@ (8009e54 <USBD_CDC_DeInit+0xfc>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f002 fb14 	bl	800c3be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d96:	4b2f      	ldr	r3, [pc, #188]	@ (8009e54 <USBD_CDC_DeInit+0xfc>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	f003 020f 	and.w	r2, r3, #15
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	440b      	add	r3, r1
 8009daa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009dae:	2200      	movs	r2, #0
 8009db0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009db2:	4b29      	ldr	r3, [pc, #164]	@ (8009e58 <USBD_CDC_DeInit+0x100>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f002 fb00 	bl	800c3be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dbe:	4b26      	ldr	r3, [pc, #152]	@ (8009e58 <USBD_CDC_DeInit+0x100>)
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	f003 020f 	and.w	r2, r3, #15
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	3323      	adds	r3, #35	@ 0x23
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8009e58 <USBD_CDC_DeInit+0x100>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 020f 	and.w	r2, r3, #15
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	4613      	mov	r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	4413      	add	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	440b      	add	r3, r1
 8009dec:	331c      	adds	r3, #28
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	32b0      	adds	r2, #176	@ 0xb0
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d01f      	beq.n	8009e44 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	33b0      	adds	r3, #176	@ 0xb0
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	32b0      	adds	r2, #176	@ 0xb0
 8009e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f002 fbd4 	bl	800c5d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	32b0      	adds	r2, #176	@ 0xb0
 8009e36:	2100      	movs	r1, #0
 8009e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	200000cb 	.word	0x200000cb
 8009e54:	200000cc 	.word	0x200000cc
 8009e58:	200000cd 	.word	0x200000cd

08009e5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	32b0      	adds	r2, #176	@ 0xb0
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d101      	bne.n	8009e8c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e0bf      	b.n	800a00c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d050      	beq.n	8009f3a <USBD_CDC_Setup+0xde>
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	f040 80af 	bne.w	8009ffc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	88db      	ldrh	r3, [r3, #6]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d03a      	beq.n	8009f1c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b25b      	sxtb	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	da1b      	bge.n	8009ee8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	33b0      	adds	r3, #176	@ 0xb0
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ec6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	88d2      	ldrh	r2, [r2, #6]
 8009ecc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	88db      	ldrh	r3, [r3, #6]
 8009ed2:	2b07      	cmp	r3, #7
 8009ed4:	bf28      	it	cs
 8009ed6:	2307      	movcs	r3, #7
 8009ed8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	89fa      	ldrh	r2, [r7, #14]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 fda9 	bl	800ba38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ee6:	e090      	b.n	800a00a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	785a      	ldrb	r2, [r3, #1]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	88db      	ldrh	r3, [r3, #6]
 8009ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ef8:	d803      	bhi.n	8009f02 <USBD_CDC_Setup+0xa6>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	88db      	ldrh	r3, [r3, #6]
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	e000      	b.n	8009f04 <USBD_CDC_Setup+0xa8>
 8009f02:	2240      	movs	r2, #64	@ 0x40
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f0a:	6939      	ldr	r1, [r7, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f12:	461a      	mov	r2, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 fdbe 	bl	800ba96 <USBD_CtlPrepareRx>
      break;
 8009f1a:	e076      	b.n	800a00a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	33b0      	adds	r3, #176	@ 0xb0
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	7850      	ldrb	r0, [r2, #1]
 8009f32:	2200      	movs	r2, #0
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	4798      	blx	r3
      break;
 8009f38:	e067      	b.n	800a00a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b0b      	cmp	r3, #11
 8009f40:	d851      	bhi.n	8009fe6 <USBD_CDC_Setup+0x18a>
 8009f42:	a201      	add	r2, pc, #4	@ (adr r2, 8009f48 <USBD_CDC_Setup+0xec>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f79 	.word	0x08009f79
 8009f4c:	08009ff5 	.word	0x08009ff5
 8009f50:	08009fe7 	.word	0x08009fe7
 8009f54:	08009fe7 	.word	0x08009fe7
 8009f58:	08009fe7 	.word	0x08009fe7
 8009f5c:	08009fe7 	.word	0x08009fe7
 8009f60:	08009fe7 	.word	0x08009fe7
 8009f64:	08009fe7 	.word	0x08009fe7
 8009f68:	08009fe7 	.word	0x08009fe7
 8009f6c:	08009fe7 	.word	0x08009fe7
 8009f70:	08009fa3 	.word	0x08009fa3
 8009f74:	08009fcd 	.word	0x08009fcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b03      	cmp	r3, #3
 8009f82:	d107      	bne.n	8009f94 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f84:	f107 030a 	add.w	r3, r7, #10
 8009f88:	2202      	movs	r2, #2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 fd53 	bl	800ba38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f92:	e032      	b.n	8009ffa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 fcd1 	bl	800b93e <USBD_CtlError>
            ret = USBD_FAIL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa0:	e02b      	b.n	8009ffa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d107      	bne.n	8009fbe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fae:	f107 030d 	add.w	r3, r7, #13
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f001 fd3e 	bl	800ba38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fbc:	e01d      	b.n	8009ffa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f001 fcbc 	bl	800b93e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8009fca:	e016      	b.n	8009ffa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d00f      	beq.n	8009ff8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 fcaf 	bl	800b93e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fe4:	e008      	b.n	8009ff8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f001 fca8 	bl	800b93e <USBD_CtlError>
          ret = USBD_FAIL;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff2:	e002      	b.n	8009ffa <USBD_CDC_Setup+0x19e>
          break;
 8009ff4:	bf00      	nop
 8009ff6:	e008      	b.n	800a00a <USBD_CDC_Setup+0x1ae>
          break;
 8009ff8:	bf00      	nop
      }
      break;
 8009ffa:	e006      	b.n	800a00a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fc9d 	bl	800b93e <USBD_CtlError>
      ret = USBD_FAIL;
 800a004:	2303      	movs	r3, #3
 800a006:	75fb      	strb	r3, [r7, #23]
      break;
 800a008:	bf00      	nop
  }

  return (uint8_t)ret;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	460b      	mov	r3, r1
 800a01e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a026:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	32b0      	adds	r2, #176	@ 0xb0
 800a032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e065      	b.n	800a10a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	32b0      	adds	r2, #176	@ 0xb0
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a04e:	78fb      	ldrb	r3, [r7, #3]
 800a050:	f003 020f 	and.w	r2, r3, #15
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	3314      	adds	r3, #20
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d02f      	beq.n	800a0c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a068:	78fb      	ldrb	r3, [r7, #3]
 800a06a:	f003 020f 	and.w	r2, r3, #15
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	3314      	adds	r3, #20
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	f003 010f 	and.w	r1, r3, #15
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	460b      	mov	r3, r1
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	440b      	add	r3, r1
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4403      	add	r3, r0
 800a090:	331c      	adds	r3, #28
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	fbb2 f1f3 	udiv	r1, r2, r3
 800a098:	fb01 f303 	mul.w	r3, r1, r3
 800a09c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d112      	bne.n	800a0c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0a2:	78fb      	ldrb	r3, [r7, #3]
 800a0a4:	f003 020f 	and.w	r2, r3, #15
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	3314      	adds	r3, #20
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0ba:	78f9      	ldrb	r1, [r7, #3]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2200      	movs	r2, #0
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f002 fa24 	bl	800c50e <USBD_LL_Transmit>
 800a0c6:	e01f      	b.n	800a108 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	33b0      	adds	r3, #176	@ 0xb0
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d010      	beq.n	800a108 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	33b0      	adds	r3, #176	@ 0xb0
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a104:	78fa      	ldrb	r2, [r7, #3]
 800a106:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b084      	sub	sp, #16
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	32b0      	adds	r2, #176	@ 0xb0
 800a128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	32b0      	adds	r2, #176	@ 0xb0
 800a138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a140:	2303      	movs	r3, #3
 800a142:	e01a      	b.n	800a17a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f002 fa22 	bl	800c592 <USBD_LL_GetRxDataSize>
 800a14e:	4602      	mov	r2, r0
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	33b0      	adds	r3, #176	@ 0xb0
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a174:	4611      	mov	r1, r2
 800a176:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	32b0      	adds	r2, #176	@ 0xb0
 800a194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a198:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e024      	b.n	800a1ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	33b0      	adds	r3, #176	@ 0xb0
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d019      	beq.n	800a1ec <USBD_CDC_EP0_RxReady+0x6a>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1be:	2bff      	cmp	r3, #255	@ 0xff
 800a1c0:	d014      	beq.n	800a1ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	33b0      	adds	r3, #176	@ 0xb0
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	22ff      	movs	r2, #255	@ 0xff
 800a1e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a200:	2182      	movs	r1, #130	@ 0x82
 800a202:	4818      	ldr	r0, [pc, #96]	@ (800a264 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a204:	f000 fd62 	bl	800accc <USBD_GetEpDesc>
 800a208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a20a:	2101      	movs	r1, #1
 800a20c:	4815      	ldr	r0, [pc, #84]	@ (800a264 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a20e:	f000 fd5d 	bl	800accc <USBD_GetEpDesc>
 800a212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a214:	2181      	movs	r1, #129	@ 0x81
 800a216:	4813      	ldr	r0, [pc, #76]	@ (800a264 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a218:	f000 fd58 	bl	800accc <USBD_GetEpDesc>
 800a21c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	2210      	movs	r2, #16
 800a228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2200      	movs	r2, #0
 800a234:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a238:	711a      	strb	r2, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a24c:	711a      	strb	r2, [r3, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2243      	movs	r2, #67	@ 0x43
 800a256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a258:	4b02      	ldr	r3, [pc, #8]	@ (800a264 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000088 	.word	0x20000088

0800a268 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a270:	2182      	movs	r1, #130	@ 0x82
 800a272:	4818      	ldr	r0, [pc, #96]	@ (800a2d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a274:	f000 fd2a 	bl	800accc <USBD_GetEpDesc>
 800a278:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a27a:	2101      	movs	r1, #1
 800a27c:	4815      	ldr	r0, [pc, #84]	@ (800a2d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a27e:	f000 fd25 	bl	800accc <USBD_GetEpDesc>
 800a282:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a284:	2181      	movs	r1, #129	@ 0x81
 800a286:	4813      	ldr	r0, [pc, #76]	@ (800a2d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a288:	f000 fd20 	bl	800accc <USBD_GetEpDesc>
 800a28c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2210      	movs	r2, #16
 800a298:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	711a      	strb	r2, [r3, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f042 0202 	orr.w	r2, r2, #2
 800a2ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d006      	beq.n	800a2c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	711a      	strb	r2, [r3, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f042 0202 	orr.w	r2, r2, #2
 800a2c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2243      	movs	r2, #67	@ 0x43
 800a2c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2c8:	4b02      	ldr	r3, [pc, #8]	@ (800a2d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000088 	.word	0x20000088

0800a2d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2e0:	2182      	movs	r1, #130	@ 0x82
 800a2e2:	4818      	ldr	r0, [pc, #96]	@ (800a344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2e4:	f000 fcf2 	bl	800accc <USBD_GetEpDesc>
 800a2e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	4815      	ldr	r0, [pc, #84]	@ (800a344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2ee:	f000 fced 	bl	800accc <USBD_GetEpDesc>
 800a2f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2f4:	2181      	movs	r1, #129	@ 0x81
 800a2f6:	4813      	ldr	r0, [pc, #76]	@ (800a344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2f8:	f000 fce8 	bl	800accc <USBD_GetEpDesc>
 800a2fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	2210      	movs	r2, #16
 800a308:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d006      	beq.n	800a31e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2200      	movs	r2, #0
 800a314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a318:	711a      	strb	r2, [r3, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d006      	beq.n	800a332 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a32c:	711a      	strb	r2, [r3, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2243      	movs	r2, #67	@ 0x43
 800a336:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a338:	4b02      	ldr	r3, [pc, #8]	@ (800a344 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20000088 	.word	0x20000088

0800a348 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	220a      	movs	r2, #10
 800a354:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a356:	4b03      	ldr	r3, [pc, #12]	@ (800a364 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	20000044 	.word	0x20000044

0800a368 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a378:	2303      	movs	r3, #3
 800a37a:	e009      	b.n	800a390 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	33b0      	adds	r3, #176	@ 0xb0
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	32b0      	adds	r2, #176	@ 0xb0
 800a3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d101      	bne.n	800a3c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e008      	b.n	800a3d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	32b0      	adds	r2, #176	@ 0xb0
 800a3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a400:	2303      	movs	r3, #3
 800a402:	e004      	b.n	800a40e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
	...

0800a41c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	32b0      	adds	r2, #176	@ 0xb0
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a43e:	2303      	movs	r3, #3
 800a440:	e025      	b.n	800a48e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d11f      	bne.n	800a48c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2201      	movs	r2, #1
 800a450:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a454:	4b10      	ldr	r3, [pc, #64]	@ (800a498 <USBD_CDC_TransmitPacket+0x7c>)
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	f003 020f 	and.w	r2, r3, #15
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4403      	add	r3, r0
 800a46e:	3314      	adds	r3, #20
 800a470:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a472:	4b09      	ldr	r3, [pc, #36]	@ (800a498 <USBD_CDC_TransmitPacket+0x7c>)
 800a474:	7819      	ldrb	r1, [r3, #0]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f002 f843 	bl	800c50e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	200000cb 	.word	0x200000cb

0800a49c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	32b0      	adds	r2, #176	@ 0xb0
 800a4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	32b0      	adds	r2, #176	@ 0xb0
 800a4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a4c6:	2303      	movs	r3, #3
 800a4c8:	e018      	b.n	800a4fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	7c1b      	ldrb	r3, [r3, #16]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a504 <USBD_CDC_ReceivePacket+0x68>)
 800a4d4:	7819      	ldrb	r1, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f002 f835 	bl	800c550 <USBD_LL_PrepareReceive>
 800a4e6:	e008      	b.n	800a4fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4e8:	4b06      	ldr	r3, [pc, #24]	@ (800a504 <USBD_CDC_ReceivePacket+0x68>)
 800a4ea:	7819      	ldrb	r1, [r3, #0]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4f2:	2340      	movs	r3, #64	@ 0x40
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f002 f82b 	bl	800c550 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	200000cc 	.word	0x200000cc

0800a508 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e01f      	b.n	800a560 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	79fa      	ldrb	r2, [r7, #7]
 800a552:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f001 fea5 	bl	800c2a4 <USBD_LL_Init>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a572:	2300      	movs	r3, #0
 800a574:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e025      	b.n	800a5cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	32ae      	adds	r2, #174	@ 0xae
 800a592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00f      	beq.n	800a5bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	32ae      	adds	r2, #174	@ 0xae
 800a5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ac:	f107 020e 	add.w	r2, r7, #14
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4798      	blx	r3
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f001 fead 	bl	800c33c <USBD_LL_Start>
 800a5e2:	4603      	mov	r3, r0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b084      	sub	sp, #16
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
 800a60a:	460b      	mov	r3, r1
 800a60c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60e:	2300      	movs	r3, #0
 800a610:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d009      	beq.n	800a630 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	78fa      	ldrb	r2, [r7, #3]
 800a626:	4611      	mov	r1, r2
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	4611      	mov	r1, r2
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	4618      	mov	r0, r3
 800a682:	f001 f922 	bl	800b8ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a694:	461a      	mov	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6a2:	f003 031f 	and.w	r3, r3, #31
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d01a      	beq.n	800a6e0 <USBD_LL_SetupStage+0x72>
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d822      	bhi.n	800a6f4 <USBD_LL_SetupStage+0x86>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <USBD_LL_SetupStage+0x4a>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d00a      	beq.n	800a6cc <USBD_LL_SetupStage+0x5e>
 800a6b6:	e01d      	b.n	800a6f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fb77 	bl	800adb4 <USBD_StdDevReq>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ca:	e020      	b.n	800a70e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fbdf 	bl	800ae98 <USBD_StdItfReq>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a6de:	e016      	b.n	800a70e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fc41 	bl	800af70 <USBD_StdEPReq>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f2:	e00c      	b.n	800a70e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f001 fe7a 	bl	800c3fc <USBD_LL_StallEP>
 800a708:	4603      	mov	r3, r0
 800a70a:	73fb      	strb	r3, [r7, #15]
      break;
 800a70c:	bf00      	nop
  }

  return ret;
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	460b      	mov	r3, r1
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a72a:	7afb      	ldrb	r3, [r7, #11]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d177      	bne.n	800a820 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a736:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a73e:	2b03      	cmp	r3, #3
 800a740:	f040 80a1 	bne.w	800a886 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	8992      	ldrh	r2, [r2, #12]
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d91c      	bls.n	800a78a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	8992      	ldrh	r2, [r2, #12]
 800a758:	1a9a      	subs	r2, r3, r2
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	8992      	ldrh	r2, [r2, #12]
 800a766:	441a      	add	r2, r3
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6919      	ldr	r1, [r3, #16]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	899b      	ldrh	r3, [r3, #12]
 800a774:	461a      	mov	r2, r3
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	4293      	cmp	r3, r2
 800a77c:	bf38      	it	cc
 800a77e:	4613      	movcc	r3, r2
 800a780:	461a      	mov	r2, r3
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f001 f9a8 	bl	800bad8 <USBD_CtlContinueRx>
 800a788:	e07d      	b.n	800a886 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a790:	f003 031f 	and.w	r3, r3, #31
 800a794:	2b02      	cmp	r3, #2
 800a796:	d014      	beq.n	800a7c2 <USBD_LL_DataOutStage+0xaa>
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d81d      	bhi.n	800a7d8 <USBD_LL_DataOutStage+0xc0>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <USBD_LL_DataOutStage+0x8e>
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d003      	beq.n	800a7ac <USBD_LL_DataOutStage+0x94>
 800a7a4:	e018      	b.n	800a7d8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a7aa:	e018      	b.n	800a7de <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f000 fa6e 	bl	800ac98 <USBD_CoreFindIF>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75bb      	strb	r3, [r7, #22]
            break;
 800a7c0:	e00d      	b.n	800a7de <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 fa70 	bl	800acb2 <USBD_CoreFindEP>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75bb      	strb	r3, [r7, #22]
            break;
 800a7d6:	e002      	b.n	800a7de <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75bb      	strb	r3, [r7, #22]
            break;
 800a7dc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a7de:	7dbb      	ldrb	r3, [r7, #22]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d119      	bne.n	800a818 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d113      	bne.n	800a818 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a7f0:	7dba      	ldrb	r2, [r7, #22]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	32ae      	adds	r2, #174	@ 0xae
 800a7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00b      	beq.n	800a818 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a800:	7dba      	ldrb	r2, [r7, #22]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a808:	7dba      	ldrb	r2, [r7, #22]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	32ae      	adds	r2, #174	@ 0xae
 800a80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	f001 f96e 	bl	800bafa <USBD_CtlSendStatus>
 800a81e:	e032      	b.n	800a886 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a826:	b2db      	uxtb	r3, r3
 800a828:	4619      	mov	r1, r3
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 fa41 	bl	800acb2 <USBD_CoreFindEP>
 800a830:	4603      	mov	r3, r0
 800a832:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a834:	7dbb      	ldrb	r3, [r7, #22]
 800a836:	2bff      	cmp	r3, #255	@ 0xff
 800a838:	d025      	beq.n	800a886 <USBD_LL_DataOutStage+0x16e>
 800a83a:	7dbb      	ldrb	r3, [r7, #22]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d122      	bne.n	800a886 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d117      	bne.n	800a87c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a84c:	7dba      	ldrb	r2, [r7, #22]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	32ae      	adds	r2, #174	@ 0xae
 800a852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00f      	beq.n	800a87c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a85c:	7dba      	ldrb	r2, [r7, #22]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a864:	7dba      	ldrb	r2, [r7, #22]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	32ae      	adds	r2, #174	@ 0xae
 800a86a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	7afa      	ldrb	r2, [r7, #11]
 800a872:	4611      	mov	r1, r2
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	4798      	blx	r3
 800a878:	4603      	mov	r3, r0
 800a87a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	e000      	b.n	800a888 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3718      	adds	r7, #24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	460b      	mov	r3, r1
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d178      	bne.n	800a996 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3314      	adds	r3, #20
 800a8a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d163      	bne.n	800a97c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	8992      	ldrh	r2, [r2, #12]
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d91c      	bls.n	800a8fa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	8992      	ldrh	r2, [r2, #12]
 800a8c8:	1a9a      	subs	r2, r3, r2
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	8992      	ldrh	r2, [r2, #12]
 800a8d6:	441a      	add	r2, r3
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6919      	ldr	r1, [r3, #16]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f001 f8c4 	bl	800ba74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f001 fe2c 	bl	800c550 <USBD_LL_PrepareReceive>
 800a8f8:	e040      	b.n	800a97c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	899b      	ldrh	r3, [r3, #12]
 800a8fe:	461a      	mov	r2, r3
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d11c      	bne.n	800a942 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a910:	4293      	cmp	r3, r2
 800a912:	d316      	bcc.n	800a942 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a91e:	429a      	cmp	r2, r3
 800a920:	d20f      	bcs.n	800a942 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a922:	2200      	movs	r2, #0
 800a924:	2100      	movs	r1, #0
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	f001 f8a4 	bl	800ba74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a934:	2300      	movs	r3, #0
 800a936:	2200      	movs	r2, #0
 800a938:	2100      	movs	r1, #0
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f001 fe08 	bl	800c550 <USBD_LL_PrepareReceive>
 800a940:	e01c      	b.n	800a97c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d10f      	bne.n	800a96e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d009      	beq.n	800a96e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a96e:	2180      	movs	r1, #128	@ 0x80
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f001 fd43 	bl	800c3fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f001 f8d2 	bl	800bb20 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d03a      	beq.n	800a9fc <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fe30 	bl	800a5ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a994:	e032      	b.n	800a9fc <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a996:	7afb      	ldrb	r3, [r7, #11]
 800a998:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	4619      	mov	r1, r3
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 f986 	bl	800acb2 <USBD_CoreFindEP>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2bff      	cmp	r3, #255	@ 0xff
 800a9ae:	d025      	beq.n	800a9fc <USBD_LL_DataInStage+0x16c>
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d122      	bne.n	800a9fc <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d11c      	bne.n	800a9fc <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a9c2:	7dfa      	ldrb	r2, [r7, #23]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	32ae      	adds	r2, #174	@ 0xae
 800a9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9cc:	695b      	ldr	r3, [r3, #20]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d014      	beq.n	800a9fc <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a9d2:	7dfa      	ldrb	r2, [r7, #23]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a9da:	7dfa      	ldrb	r2, [r7, #23]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	32ae      	adds	r2, #174	@ 0xae
 800a9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	7afa      	ldrb	r2, [r7, #11]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	4798      	blx	r3
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a9f2:	7dbb      	ldrb	r3, [r7, #22]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d001      	beq.n	800a9fc <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a9f8:	7dbb      	ldrb	r3, [r7, #22]
 800a9fa:	e000      	b.n	800a9fe <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d014      	beq.n	800aa6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00e      	beq.n	800aa6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	6852      	ldr	r2, [r2, #4]
 800aa5a:	b2d2      	uxtb	r2, r2
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	4798      	blx	r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa6c:	2340      	movs	r3, #64	@ 0x40
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 fc7d 	bl	800c372 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2240      	movs	r2, #64	@ 0x40
 800aa84:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa88:	2340      	movs	r3, #64	@ 0x40
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2180      	movs	r1, #128	@ 0x80
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fc6f 	bl	800c372 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2240      	movs	r2, #64	@ 0x40
 800aaa0:	841a      	strh	r2, [r3, #32]

  return ret;
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3710      	adds	r7, #16
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	460b      	mov	r3, r1
 800aab6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b04      	cmp	r3, #4
 800aade:	d006      	beq.n	800aaee <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2204      	movs	r2, #4
 800aaf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d106      	bne.n	800ab26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b03      	cmp	r3, #3
 800ab46:	d110      	bne.n	800ab6a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab64:	69db      	ldr	r3, [r3, #28]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ab6a:	2300      	movs	r3, #0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	32ae      	adds	r2, #174	@ 0xae
 800ab8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d101      	bne.n	800ab96 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e01c      	b.n	800abd0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d115      	bne.n	800abce <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	32ae      	adds	r2, #174	@ 0xae
 800abac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00b      	beq.n	800abce <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	32ae      	adds	r2, #174	@ 0xae
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	78fa      	ldrb	r2, [r7, #3]
 800abc8:	4611      	mov	r1, r2
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	32ae      	adds	r2, #174	@ 0xae
 800abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e01c      	b.n	800ac34 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d115      	bne.n	800ac32 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	32ae      	adds	r2, #174	@ 0xae
 800ac10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00b      	beq.n	800ac32 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	32ae      	adds	r2, #174	@ 0xae
 800ac24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac2a:	78fa      	ldrb	r2, [r7, #3]
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2201      	movs	r2, #1
 800ac62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00e      	beq.n	800ac8e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	6852      	ldr	r2, [r2, #4]
 800ac7c:	b2d2      	uxtb	r2, r2
 800ac7e:	4611      	mov	r1, r2
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	4798      	blx	r3
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aca4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	7812      	ldrb	r2, [r2, #0]
 800acee:	4293      	cmp	r3, r2
 800acf0:	d91f      	bls.n	800ad32 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800acf8:	e013      	b.n	800ad22 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800acfa:	f107 030a 	add.w	r3, r7, #10
 800acfe:	4619      	mov	r1, r3
 800ad00:	6978      	ldr	r0, [r7, #20]
 800ad02:	f000 f81b 	bl	800ad3c <USBD_GetNextDesc>
 800ad06:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	785b      	ldrb	r3, [r3, #1]
 800ad0c:	2b05      	cmp	r3, #5
 800ad0e:	d108      	bne.n	800ad22 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	789b      	ldrb	r3, [r3, #2]
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d008      	beq.n	800ad30 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	885b      	ldrh	r3, [r3, #2]
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	897b      	ldrh	r3, [r7, #10]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d8e5      	bhi.n	800acfa <USBD_GetEpDesc+0x2e>
 800ad2e:	e000      	b.n	800ad32 <USBD_GetEpDesc+0x66>
          break;
 800ad30:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad32:	693b      	ldr	r3, [r7, #16]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	4413      	add	r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4413      	add	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad66:	68fb      	ldr	r3, [r7, #12]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b21a      	sxth	r2, r3
 800ad9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	b21b      	sxth	r3, r3
 800ada2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ada4:	89fb      	ldrh	r3, [r7, #14]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
	...

0800adb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adca:	2b40      	cmp	r3, #64	@ 0x40
 800adcc:	d005      	beq.n	800adda <USBD_StdDevReq+0x26>
 800adce:	2b40      	cmp	r3, #64	@ 0x40
 800add0:	d857      	bhi.n	800ae82 <USBD_StdDevReq+0xce>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00f      	beq.n	800adf6 <USBD_StdDevReq+0x42>
 800add6:	2b20      	cmp	r3, #32
 800add8:	d153      	bne.n	800ae82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	32ae      	adds	r2, #174	@ 0xae
 800ade4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	4798      	blx	r3
 800adf0:	4603      	mov	r3, r0
 800adf2:	73fb      	strb	r3, [r7, #15]
      break;
 800adf4:	e04a      	b.n	800ae8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	2b09      	cmp	r3, #9
 800adfc:	d83b      	bhi.n	800ae76 <USBD_StdDevReq+0xc2>
 800adfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ae04 <USBD_StdDevReq+0x50>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800ae59 	.word	0x0800ae59
 800ae08:	0800ae6d 	.word	0x0800ae6d
 800ae0c:	0800ae77 	.word	0x0800ae77
 800ae10:	0800ae63 	.word	0x0800ae63
 800ae14:	0800ae77 	.word	0x0800ae77
 800ae18:	0800ae37 	.word	0x0800ae37
 800ae1c:	0800ae2d 	.word	0x0800ae2d
 800ae20:	0800ae77 	.word	0x0800ae77
 800ae24:	0800ae4f 	.word	0x0800ae4f
 800ae28:	0800ae41 	.word	0x0800ae41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 fa3e 	bl	800b2b0 <USBD_GetDescriptor>
          break;
 800ae34:	e024      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fba3 	bl	800b584 <USBD_SetAddress>
          break;
 800ae3e:	e01f      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fbe2 	bl	800b60c <USBD_SetConfig>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]
          break;
 800ae4c:	e018      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fc85 	bl	800b760 <USBD_GetConfig>
          break;
 800ae56:	e013      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fcb6 	bl	800b7cc <USBD_GetStatus>
          break;
 800ae60:	e00e      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fce5 	bl	800b834 <USBD_SetFeature>
          break;
 800ae6a:	e009      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fd09 	bl	800b886 <USBD_ClrFeature>
          break;
 800ae74:	e004      	b.n	800ae80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fd60 	bl	800b93e <USBD_CtlError>
          break;
 800ae7e:	bf00      	nop
      }
      break;
 800ae80:	e004      	b.n	800ae8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae82:	6839      	ldr	r1, [r7, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fd5a 	bl	800b93e <USBD_CtlError>
      break;
 800ae8a:	bf00      	nop
  }

  return ret;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop

0800ae98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aeae:	2b40      	cmp	r3, #64	@ 0x40
 800aeb0:	d005      	beq.n	800aebe <USBD_StdItfReq+0x26>
 800aeb2:	2b40      	cmp	r3, #64	@ 0x40
 800aeb4:	d852      	bhi.n	800af5c <USBD_StdItfReq+0xc4>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <USBD_StdItfReq+0x26>
 800aeba:	2b20      	cmp	r3, #32
 800aebc:	d14e      	bne.n	800af5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d840      	bhi.n	800af4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	889b      	ldrh	r3, [r3, #4]
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d836      	bhi.n	800af44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	889b      	ldrh	r3, [r3, #4]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7ff feda 	bl	800ac98 <USBD_CoreFindIF>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2bff      	cmp	r3, #255	@ 0xff
 800aeec:	d01d      	beq.n	800af2a <USBD_StdItfReq+0x92>
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d11a      	bne.n	800af2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aef4:	7bba      	ldrb	r2, [r7, #14]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	32ae      	adds	r2, #174	@ 0xae
 800aefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00f      	beq.n	800af24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af04:	7bba      	ldrb	r2, [r7, #14]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af0c:	7bba      	ldrb	r2, [r7, #14]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	32ae      	adds	r2, #174	@ 0xae
 800af12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
 800af1e:	4603      	mov	r3, r0
 800af20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af22:	e004      	b.n	800af2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af24:	2303      	movs	r3, #3
 800af26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af28:	e001      	b.n	800af2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	88db      	ldrh	r3, [r3, #6]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d110      	bne.n	800af58 <USBD_StdItfReq+0xc0>
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d10d      	bne.n	800af58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fddc 	bl	800bafa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af42:	e009      	b.n	800af58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fcf9 	bl	800b93e <USBD_CtlError>
          break;
 800af4c:	e004      	b.n	800af58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fcf4 	bl	800b93e <USBD_CtlError>
          break;
 800af56:	e000      	b.n	800af5a <USBD_StdItfReq+0xc2>
          break;
 800af58:	bf00      	nop
      }
      break;
 800af5a:	e004      	b.n	800af66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fced 	bl	800b93e <USBD_CtlError>
      break;
 800af64:	bf00      	nop
  }

  return ret;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af7a:	2300      	movs	r3, #0
 800af7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	889b      	ldrh	r3, [r3, #4]
 800af82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af8c:	2b40      	cmp	r3, #64	@ 0x40
 800af8e:	d007      	beq.n	800afa0 <USBD_StdEPReq+0x30>
 800af90:	2b40      	cmp	r3, #64	@ 0x40
 800af92:	f200 8181 	bhi.w	800b298 <USBD_StdEPReq+0x328>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d02a      	beq.n	800aff0 <USBD_StdEPReq+0x80>
 800af9a:	2b20      	cmp	r3, #32
 800af9c:	f040 817c 	bne.w	800b298 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff fe84 	bl	800acb2 <USBD_CoreFindEP>
 800afaa:	4603      	mov	r3, r0
 800afac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afae:	7b7b      	ldrb	r3, [r7, #13]
 800afb0:	2bff      	cmp	r3, #255	@ 0xff
 800afb2:	f000 8176 	beq.w	800b2a2 <USBD_StdEPReq+0x332>
 800afb6:	7b7b      	ldrb	r3, [r7, #13]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f040 8172 	bne.w	800b2a2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800afbe:	7b7a      	ldrb	r2, [r7, #13]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800afc6:	7b7a      	ldrb	r2, [r7, #13]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	32ae      	adds	r2, #174	@ 0xae
 800afcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 8165 	beq.w	800b2a2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800afd8:	7b7a      	ldrb	r2, [r7, #13]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	32ae      	adds	r2, #174	@ 0xae
 800afde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	4798      	blx	r3
 800afea:	4603      	mov	r3, r0
 800afec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800afee:	e158      	b.n	800b2a2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	d008      	beq.n	800b00a <USBD_StdEPReq+0x9a>
 800aff8:	2b03      	cmp	r3, #3
 800affa:	f300 8147 	bgt.w	800b28c <USBD_StdEPReq+0x31c>
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 809b 	beq.w	800b13a <USBD_StdEPReq+0x1ca>
 800b004:	2b01      	cmp	r3, #1
 800b006:	d03c      	beq.n	800b082 <USBD_StdEPReq+0x112>
 800b008:	e140      	b.n	800b28c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b02      	cmp	r3, #2
 800b014:	d002      	beq.n	800b01c <USBD_StdEPReq+0xac>
 800b016:	2b03      	cmp	r3, #3
 800b018:	d016      	beq.n	800b048 <USBD_StdEPReq+0xd8>
 800b01a:	e02c      	b.n	800b076 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00d      	beq.n	800b03e <USBD_StdEPReq+0xce>
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	2b80      	cmp	r3, #128	@ 0x80
 800b026:	d00a      	beq.n	800b03e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 f9e5 	bl	800c3fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b032:	2180      	movs	r1, #128	@ 0x80
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f9e1 	bl	800c3fc <USBD_LL_StallEP>
 800b03a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b03c:	e020      	b.n	800b080 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fc7c 	bl	800b93e <USBD_CtlError>
              break;
 800b046:	e01b      	b.n	800b080 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	885b      	ldrh	r3, [r3, #2]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10e      	bne.n	800b06e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00b      	beq.n	800b06e <USBD_StdEPReq+0xfe>
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	2b80      	cmp	r3, #128	@ 0x80
 800b05a:	d008      	beq.n	800b06e <USBD_StdEPReq+0xfe>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	88db      	ldrh	r3, [r3, #6]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d104      	bne.n	800b06e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 f9c7 	bl	800c3fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fd43 	bl	800bafa <USBD_CtlSendStatus>

              break;
 800b074:	e004      	b.n	800b080 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fc60 	bl	800b93e <USBD_CtlError>
              break;
 800b07e:	bf00      	nop
          }
          break;
 800b080:	e109      	b.n	800b296 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d002      	beq.n	800b094 <USBD_StdEPReq+0x124>
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d016      	beq.n	800b0c0 <USBD_StdEPReq+0x150>
 800b092:	e04b      	b.n	800b12c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00d      	beq.n	800b0b6 <USBD_StdEPReq+0x146>
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	2b80      	cmp	r3, #128	@ 0x80
 800b09e:	d00a      	beq.n	800b0b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0a0:	7bbb      	ldrb	r3, [r7, #14]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f001 f9a9 	bl	800c3fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0aa:	2180      	movs	r1, #128	@ 0x80
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 f9a5 	bl	800c3fc <USBD_LL_StallEP>
 800b0b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0b4:	e040      	b.n	800b138 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b0b6:	6839      	ldr	r1, [r7, #0]
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fc40 	bl	800b93e <USBD_CtlError>
              break;
 800b0be:	e03b      	b.n	800b138 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	885b      	ldrh	r3, [r3, #2]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d136      	bne.n	800b136 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d004      	beq.n	800b0dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f001 f9af 	bl	800c43a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fd0c 	bl	800bafa <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fde3 	bl	800acb2 <USBD_CoreFindEP>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0f0:	7b7b      	ldrb	r3, [r7, #13]
 800b0f2:	2bff      	cmp	r3, #255	@ 0xff
 800b0f4:	d01f      	beq.n	800b136 <USBD_StdEPReq+0x1c6>
 800b0f6:	7b7b      	ldrb	r3, [r7, #13]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d11c      	bne.n	800b136 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b0fc:	7b7a      	ldrb	r2, [r7, #13]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b104:	7b7a      	ldrb	r2, [r7, #13]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	32ae      	adds	r2, #174	@ 0xae
 800b10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d010      	beq.n	800b136 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b114:	7b7a      	ldrb	r2, [r7, #13]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	32ae      	adds	r2, #174	@ 0xae
 800b11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	4798      	blx	r3
 800b126:	4603      	mov	r3, r0
 800b128:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b12a:	e004      	b.n	800b136 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fc05 	bl	800b93e <USBD_CtlError>
              break;
 800b134:	e000      	b.n	800b138 <USBD_StdEPReq+0x1c8>
              break;
 800b136:	bf00      	nop
          }
          break;
 800b138:	e0ad      	b.n	800b296 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b02      	cmp	r3, #2
 800b144:	d002      	beq.n	800b14c <USBD_StdEPReq+0x1dc>
 800b146:	2b03      	cmp	r3, #3
 800b148:	d033      	beq.n	800b1b2 <USBD_StdEPReq+0x242>
 800b14a:	e099      	b.n	800b280 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d007      	beq.n	800b162 <USBD_StdEPReq+0x1f2>
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	2b80      	cmp	r3, #128	@ 0x80
 800b156:	d004      	beq.n	800b162 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fbef 	bl	800b93e <USBD_CtlError>
                break;
 800b160:	e093      	b.n	800b28a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b162:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b166:	2b00      	cmp	r3, #0
 800b168:	da0b      	bge.n	800b182 <USBD_StdEPReq+0x212>
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	3310      	adds	r3, #16
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	4413      	add	r3, r2
 800b17e:	3304      	adds	r3, #4
 800b180:	e00b      	b.n	800b19a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b182:	7bbb      	ldrb	r3, [r7, #14]
 800b184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	4413      	add	r3, r2
 800b198:	3304      	adds	r3, #4
 800b19a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	330e      	adds	r3, #14
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fc44 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b1b0:	e06b      	b.n	800b28a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b1b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da11      	bge.n	800b1de <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	f003 020f 	and.w	r2, r3, #15
 800b1c0:	6879      	ldr	r1, [r7, #4]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	440b      	add	r3, r1
 800b1cc:	3323      	adds	r3, #35	@ 0x23
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d117      	bne.n	800b204 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fbb1 	bl	800b93e <USBD_CtlError>
                  break;
 800b1dc:	e055      	b.n	800b28a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	f003 020f 	and.w	r2, r3, #15
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	440b      	add	r3, r1
 800b1f0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d104      	bne.n	800b204 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fb9e 	bl	800b93e <USBD_CtlError>
                  break;
 800b202:	e042      	b.n	800b28a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	da0b      	bge.n	800b224 <USBD_StdEPReq+0x2b4>
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b212:	4613      	mov	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	3310      	adds	r3, #16
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	3304      	adds	r3, #4
 800b222:	e00b      	b.n	800b23c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b22a:	4613      	mov	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	4413      	add	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	4413      	add	r3, r2
 800b23a:	3304      	adds	r3, #4
 800b23c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b23e:	7bbb      	ldrb	r3, [r7, #14]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <USBD_StdEPReq+0x2da>
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	2b80      	cmp	r3, #128	@ 0x80
 800b248:	d103      	bne.n	800b252 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2200      	movs	r2, #0
 800b24e:	739a      	strb	r2, [r3, #14]
 800b250:	e00e      	b.n	800b270 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b252:	7bbb      	ldrb	r3, [r7, #14]
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 f90e 	bl	800c478 <USBD_LL_IsStallEP>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2201      	movs	r2, #1
 800b266:	739a      	strb	r2, [r3, #14]
 800b268:	e002      	b.n	800b270 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2200      	movs	r2, #0
 800b26e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	330e      	adds	r3, #14
 800b274:	2202      	movs	r2, #2
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 fbdd 	bl	800ba38 <USBD_CtlSendData>
              break;
 800b27e:	e004      	b.n	800b28a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fb5b 	bl	800b93e <USBD_CtlError>
              break;
 800b288:	bf00      	nop
          }
          break;
 800b28a:	e004      	b.n	800b296 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fb55 	bl	800b93e <USBD_CtlError>
          break;
 800b294:	bf00      	nop
      }
      break;
 800b296:	e005      	b.n	800b2a4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fb4f 	bl	800b93e <USBD_CtlError>
      break;
 800b2a0:	e000      	b.n	800b2a4 <USBD_StdEPReq+0x334>
      break;
 800b2a2:	bf00      	nop
  }

  return ret;
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	885b      	ldrh	r3, [r3, #2]
 800b2ca:	0a1b      	lsrs	r3, r3, #8
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	2b06      	cmp	r3, #6
 800b2d2:	f200 8128 	bhi.w	800b526 <USBD_GetDescriptor+0x276>
 800b2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b2dc <USBD_GetDescriptor+0x2c>)
 800b2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2dc:	0800b2f9 	.word	0x0800b2f9
 800b2e0:	0800b311 	.word	0x0800b311
 800b2e4:	0800b351 	.word	0x0800b351
 800b2e8:	0800b527 	.word	0x0800b527
 800b2ec:	0800b527 	.word	0x0800b527
 800b2f0:	0800b4c7 	.word	0x0800b4c7
 800b2f4:	0800b4f3 	.word	0x0800b4f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	7c12      	ldrb	r2, [r2, #16]
 800b304:	f107 0108 	add.w	r1, r7, #8
 800b308:	4610      	mov	r0, r2
 800b30a:	4798      	blx	r3
 800b30c:	60f8      	str	r0, [r7, #12]
      break;
 800b30e:	e112      	b.n	800b536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7c1b      	ldrb	r3, [r3, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d10d      	bne.n	800b334 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b320:	f107 0208 	add.w	r2, r7, #8
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	2202      	movs	r2, #2
 800b330:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b332:	e100      	b.n	800b536 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33c:	f107 0208 	add.w	r2, r7, #8
 800b340:	4610      	mov	r0, r2
 800b342:	4798      	blx	r3
 800b344:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	2202      	movs	r2, #2
 800b34c:	701a      	strb	r2, [r3, #0]
      break;
 800b34e:	e0f2      	b.n	800b536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	885b      	ldrh	r3, [r3, #2]
 800b354:	b2db      	uxtb	r3, r3
 800b356:	2b05      	cmp	r3, #5
 800b358:	f200 80ac 	bhi.w	800b4b4 <USBD_GetDescriptor+0x204>
 800b35c:	a201      	add	r2, pc, #4	@ (adr r2, 800b364 <USBD_GetDescriptor+0xb4>)
 800b35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b362:	bf00      	nop
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b3b1 	.word	0x0800b3b1
 800b36c:	0800b3e5 	.word	0x0800b3e5
 800b370:	0800b419 	.word	0x0800b419
 800b374:	0800b44d 	.word	0x0800b44d
 800b378:	0800b481 	.word	0x0800b481
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	7c12      	ldrb	r2, [r2, #16]
 800b394:	f107 0108 	add.w	r1, r7, #8
 800b398:	4610      	mov	r0, r2
 800b39a:	4798      	blx	r3
 800b39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b39e:	e091      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 facb 	bl	800b93e <USBD_CtlError>
            err++;
 800b3a8:	7afb      	ldrb	r3, [r7, #11]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ae:	e089      	b.n	800b4c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00b      	beq.n	800b3d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	7c12      	ldrb	r2, [r2, #16]
 800b3c8:	f107 0108 	add.w	r1, r7, #8
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	4798      	blx	r3
 800b3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d2:	e077      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d4:	6839      	ldr	r1, [r7, #0]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f000 fab1 	bl	800b93e <USBD_CtlError>
            err++;
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3e2:	e06f      	b.n	800b4c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	7c12      	ldrb	r2, [r2, #16]
 800b3fc:	f107 0108 	add.w	r1, r7, #8
 800b400:	4610      	mov	r0, r2
 800b402:	4798      	blx	r3
 800b404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b406:	e05d      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b408:	6839      	ldr	r1, [r7, #0]
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 fa97 	bl	800b93e <USBD_CtlError>
            err++;
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	3301      	adds	r3, #1
 800b414:	72fb      	strb	r3, [r7, #11]
          break;
 800b416:	e055      	b.n	800b4c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b41e:	691b      	ldr	r3, [r3, #16]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	7c12      	ldrb	r2, [r2, #16]
 800b430:	f107 0108 	add.w	r1, r7, #8
 800b434:	4610      	mov	r0, r2
 800b436:	4798      	blx	r3
 800b438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b43a:	e043      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fa7d 	bl	800b93e <USBD_CtlError>
            err++;
 800b444:	7afb      	ldrb	r3, [r7, #11]
 800b446:	3301      	adds	r3, #1
 800b448:	72fb      	strb	r3, [r7, #11]
          break;
 800b44a:	e03b      	b.n	800b4c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00b      	beq.n	800b470 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7c12      	ldrb	r2, [r2, #16]
 800b464:	f107 0108 	add.w	r1, r7, #8
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
 800b46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b46e:	e029      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 fa63 	bl	800b93e <USBD_CtlError>
            err++;
 800b478:	7afb      	ldrb	r3, [r7, #11]
 800b47a:	3301      	adds	r3, #1
 800b47c:	72fb      	strb	r3, [r7, #11]
          break;
 800b47e:	e021      	b.n	800b4c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b486:	699b      	ldr	r3, [r3, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7c12      	ldrb	r2, [r2, #16]
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a2:	e00f      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fa49 	bl	800b93e <USBD_CtlError>
            err++;
 800b4ac:	7afb      	ldrb	r3, [r7, #11]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4b2:	e007      	b.n	800b4c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa41 	bl	800b93e <USBD_CtlError>
          err++;
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4c2:	bf00      	nop
      }
      break;
 800b4c4:	e037      	b.n	800b536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	7c1b      	ldrb	r3, [r3, #16]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d109      	bne.n	800b4e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4d6:	f107 0208 	add.w	r2, r7, #8
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4798      	blx	r3
 800b4de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4e0:	e029      	b.n	800b536 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fa2a 	bl	800b93e <USBD_CtlError>
        err++;
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b4f0:	e021      	b.n	800b536 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	7c1b      	ldrb	r3, [r3, #16]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10d      	bne.n	800b516 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b502:	f107 0208 	add.w	r2, r7, #8
 800b506:	4610      	mov	r0, r2
 800b508:	4798      	blx	r3
 800b50a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	2207      	movs	r2, #7
 800b512:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b514:	e00f      	b.n	800b536 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 fa10 	bl	800b93e <USBD_CtlError>
        err++;
 800b51e:	7afb      	ldrb	r3, [r7, #11]
 800b520:	3301      	adds	r3, #1
 800b522:	72fb      	strb	r3, [r7, #11]
      break;
 800b524:	e007      	b.n	800b536 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fa08 	bl	800b93e <USBD_CtlError>
      err++;
 800b52e:	7afb      	ldrb	r3, [r7, #11]
 800b530:	3301      	adds	r3, #1
 800b532:	72fb      	strb	r3, [r7, #11]
      break;
 800b534:	bf00      	nop
  }

  if (err != 0U)
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d11e      	bne.n	800b57a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	88db      	ldrh	r3, [r3, #6]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d016      	beq.n	800b572 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b544:	893b      	ldrh	r3, [r7, #8]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00e      	beq.n	800b568 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	88da      	ldrh	r2, [r3, #6]
 800b54e:	893b      	ldrh	r3, [r7, #8]
 800b550:	4293      	cmp	r3, r2
 800b552:	bf28      	it	cs
 800b554:	4613      	movcs	r3, r2
 800b556:	b29b      	uxth	r3, r3
 800b558:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b55a:	893b      	ldrh	r3, [r7, #8]
 800b55c:	461a      	mov	r2, r3
 800b55e:	68f9      	ldr	r1, [r7, #12]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fa69 	bl	800ba38 <USBD_CtlSendData>
 800b566:	e009      	b.n	800b57c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f9e7 	bl	800b93e <USBD_CtlError>
 800b570:	e004      	b.n	800b57c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 fac1 	bl	800bafa <USBD_CtlSendStatus>
 800b578:	e000      	b.n	800b57c <USBD_GetDescriptor+0x2cc>
    return;
 800b57a:	bf00      	nop
  }
}
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop

0800b584 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	889b      	ldrh	r3, [r3, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d131      	bne.n	800b5fa <USBD_SetAddress+0x76>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	88db      	ldrh	r3, [r3, #6]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d12d      	bne.n	800b5fa <USBD_SetAddress+0x76>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	885b      	ldrh	r3, [r3, #2]
 800b5a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5a4:	d829      	bhi.n	800b5fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	885b      	ldrh	r3, [r3, #2]
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d104      	bne.n	800b5c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f9bc 	bl	800b93e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c6:	e01d      	b.n	800b604 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	7bfa      	ldrb	r2, [r7, #15]
 800b5cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 ff7b 	bl	800c4d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa8d 	bl	800bafa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d004      	beq.n	800b5f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ee:	e009      	b.n	800b604 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5f8:	e004      	b.n	800b604 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f99e 	bl	800b93e <USBD_CtlError>
  }
}
 800b602:	bf00      	nop
 800b604:	bf00      	nop
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	885b      	ldrh	r3, [r3, #2]
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	4b4e      	ldr	r3, [pc, #312]	@ (800b75c <USBD_SetConfig+0x150>)
 800b622:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b624:	4b4d      	ldr	r3, [pc, #308]	@ (800b75c <USBD_SetConfig+0x150>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d905      	bls.n	800b638 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f985 	bl	800b93e <USBD_CtlError>
    return USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	e08c      	b.n	800b752 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d002      	beq.n	800b64a <USBD_SetConfig+0x3e>
 800b644:	2b03      	cmp	r3, #3
 800b646:	d029      	beq.n	800b69c <USBD_SetConfig+0x90>
 800b648:	e075      	b.n	800b736 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b64a:	4b44      	ldr	r3, [pc, #272]	@ (800b75c <USBD_SetConfig+0x150>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d020      	beq.n	800b694 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b652:	4b42      	ldr	r3, [pc, #264]	@ (800b75c <USBD_SetConfig+0x150>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b65c:	4b3f      	ldr	r3, [pc, #252]	@ (800b75c <USBD_SetConfig+0x150>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7fe ffcd 	bl	800a602 <USBD_SetClassConfig>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d008      	beq.n	800b684 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f962 	bl	800b93e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2202      	movs	r2, #2
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b682:	e065      	b.n	800b750 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fa38 	bl	800bafa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2203      	movs	r2, #3
 800b68e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b692:	e05d      	b.n	800b750 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fa30 	bl	800bafa <USBD_CtlSendStatus>
      break;
 800b69a:	e059      	b.n	800b750 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b69c:	4b2f      	ldr	r3, [pc, #188]	@ (800b75c <USBD_SetConfig+0x150>)
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d112      	bne.n	800b6ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b6ac:	4b2b      	ldr	r3, [pc, #172]	@ (800b75c <USBD_SetConfig+0x150>)
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6b6:	4b29      	ldr	r3, [pc, #164]	@ (800b75c <USBD_SetConfig+0x150>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7fe ffbc 	bl	800a63a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fa19 	bl	800bafa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6c8:	e042      	b.n	800b750 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6ca:	4b24      	ldr	r3, [pc, #144]	@ (800b75c <USBD_SetConfig+0x150>)
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d02a      	beq.n	800b72e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7fe ffaa 	bl	800a63a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800b75c <USBD_SetConfig+0x150>)
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b75c <USBD_SetConfig+0x150>)
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7fe ff83 	bl	800a602 <USBD_SetClassConfig>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b700:	7bfb      	ldrb	r3, [r7, #15]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00f      	beq.n	800b726 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f918 	bl	800b93e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	b2db      	uxtb	r3, r3
 800b714:	4619      	mov	r1, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7fe ff8f 	bl	800a63a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b724:	e014      	b.n	800b750 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f9e7 	bl	800bafa <USBD_CtlSendStatus>
      break;
 800b72c:	e010      	b.n	800b750 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f9e3 	bl	800bafa <USBD_CtlSendStatus>
      break;
 800b734:	e00c      	b.n	800b750 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f900 	bl	800b93e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b73e:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <USBD_SetConfig+0x150>)
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f7fe ff78 	bl	800a63a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b74a:	2303      	movs	r3, #3
 800b74c:	73fb      	strb	r3, [r7, #15]
      break;
 800b74e:	bf00      	nop
  }

  return ret;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	200009a8 	.word	0x200009a8

0800b760 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	88db      	ldrh	r3, [r3, #6]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d004      	beq.n	800b77c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f8e2 	bl	800b93e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b77a:	e023      	b.n	800b7c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b02      	cmp	r3, #2
 800b786:	dc02      	bgt.n	800b78e <USBD_GetConfig+0x2e>
 800b788:	2b00      	cmp	r3, #0
 800b78a:	dc03      	bgt.n	800b794 <USBD_GetConfig+0x34>
 800b78c:	e015      	b.n	800b7ba <USBD_GetConfig+0x5a>
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d00b      	beq.n	800b7aa <USBD_GetConfig+0x4a>
 800b792:	e012      	b.n	800b7ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3308      	adds	r3, #8
 800b79e:	2201      	movs	r2, #1
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f948 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b7a8:	e00c      	b.n	800b7c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f940 	bl	800ba38 <USBD_CtlSendData>
        break;
 800b7b8:	e004      	b.n	800b7c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f8be 	bl	800b93e <USBD_CtlError>
        break;
 800b7c2:	bf00      	nop
}
 800b7c4:	bf00      	nop
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d81e      	bhi.n	800b822 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	88db      	ldrh	r3, [r3, #6]
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d004      	beq.n	800b7f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7ec:	6839      	ldr	r1, [r7, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f8a5 	bl	800b93e <USBD_CtlError>
        break;
 800b7f4:	e01a      	b.n	800b82c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d005      	beq.n	800b812 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	f043 0202 	orr.w	r2, r3, #2
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	330c      	adds	r3, #12
 800b816:	2202      	movs	r2, #2
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f90c 	bl	800ba38 <USBD_CtlSendData>
      break;
 800b820:	e004      	b.n	800b82c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f88a 	bl	800b93e <USBD_CtlError>
      break;
 800b82a:	bf00      	nop
  }
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	885b      	ldrh	r3, [r3, #2]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d107      	bne.n	800b856 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2201      	movs	r2, #1
 800b84a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f953 	bl	800bafa <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b854:	e013      	b.n	800b87e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d10b      	bne.n	800b876 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	889b      	ldrh	r3, [r3, #4]
 800b862:	0a1b      	lsrs	r3, r3, #8
 800b864:	b29b      	uxth	r3, r3
 800b866:	b2da      	uxtb	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f943 	bl	800bafa <USBD_CtlSendStatus>
}
 800b874:	e003      	b.n	800b87e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f860 	bl	800b93e <USBD_CtlError>
}
 800b87e:	bf00      	nop
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b082      	sub	sp, #8
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b896:	b2db      	uxtb	r3, r3
 800b898:	3b01      	subs	r3, #1
 800b89a:	2b02      	cmp	r3, #2
 800b89c:	d80b      	bhi.n	800b8b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	885b      	ldrh	r3, [r3, #2]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d10c      	bne.n	800b8c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f923 	bl	800bafa <USBD_CtlSendStatus>
      }
      break;
 800b8b4:	e004      	b.n	800b8c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f840 	bl	800b93e <USBD_CtlError>
      break;
 800b8be:	e000      	b.n	800b8c2 <USBD_ClrFeature+0x3c>
      break;
 800b8c0:	bf00      	nop
  }
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	781a      	ldrb	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7ff fa3d 	bl	800ad74 <SWAPBYTE>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3301      	adds	r3, #1
 800b906:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3301      	adds	r3, #1
 800b90c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f7ff fa30 	bl	800ad74 <SWAPBYTE>
 800b914:	4603      	mov	r3, r0
 800b916:	461a      	mov	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	3301      	adds	r3, #1
 800b920:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3301      	adds	r3, #1
 800b926:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f7ff fa23 	bl	800ad74 <SWAPBYTE>
 800b92e:	4603      	mov	r3, r0
 800b930:	461a      	mov	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	80da      	strh	r2, [r3, #6]
}
 800b936:	bf00      	nop
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b082      	sub	sp, #8
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b948:	2180      	movs	r1, #128	@ 0x80
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fd56 	bl	800c3fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b950:	2100      	movs	r1, #0
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fd52 	bl	800c3fc <USBD_LL_StallEP>
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d042      	beq.n	800b9fc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b97a:	6938      	ldr	r0, [r7, #16]
 800b97c:	f000 f842 	bl	800ba04 <USBD_GetLen>
 800b980:	4603      	mov	r3, r0
 800b982:	3301      	adds	r3, #1
 800b984:	005b      	lsls	r3, r3, #1
 800b986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b98a:	d808      	bhi.n	800b99e <USBD_GetString+0x3e>
 800b98c:	6938      	ldr	r0, [r7, #16]
 800b98e:	f000 f839 	bl	800ba04 <USBD_GetLen>
 800b992:	4603      	mov	r3, r0
 800b994:	3301      	adds	r3, #1
 800b996:	b29b      	uxth	r3, r3
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	e001      	b.n	800b9a2 <USBD_GetString+0x42>
 800b99e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	7812      	ldrb	r2, [r2, #0]
 800b9b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	2203      	movs	r2, #3
 800b9c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b9c8:	e013      	b.n	800b9f2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	7812      	ldrb	r2, [r2, #0]
 800b9d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	613b      	str	r3, [r7, #16]
    idx++;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e7      	bne.n	800b9ca <USBD_GetString+0x6a>
 800b9fa:	e000      	b.n	800b9fe <USBD_GetString+0x9e>
    return;
 800b9fc:	bf00      	nop
  }
}
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba14:	e005      	b.n	800ba22 <USBD_GetLen+0x1e>
  {
    len++;
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f5      	bne.n	800ba16 <USBD_GetLen+0x12>
  }

  return len;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2202      	movs	r2, #2
 800ba48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	68ba      	ldr	r2, [r7, #8]
 800ba62:	2100      	movs	r1, #0
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 fd52 	bl	800c50e <USBD_LL_Transmit>

  return USBD_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	2100      	movs	r1, #0
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f000 fd41 	bl	800c50e <USBD_LL_Transmit>

  return USBD_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	60f8      	str	r0, [r7, #12]
 800ba9e:	60b9      	str	r1, [r7, #8]
 800baa0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2203      	movs	r2, #3
 800baa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	2100      	movs	r1, #0
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 fd41 	bl	800c550 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fd30 	bl	800c550 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2204      	movs	r2, #4
 800bb06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2100      	movs	r1, #0
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 fcfc 	bl	800c50e <USBD_LL_Transmit>

  return USBD_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2205      	movs	r2, #5
 800bb2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb30:	2300      	movs	r3, #0
 800bb32:	2200      	movs	r2, #0
 800bb34:	2100      	movs	r1, #0
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fd0a 	bl	800c550 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
	...

0800bb48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	4912      	ldr	r1, [pc, #72]	@ (800bb98 <MX_USB_DEVICE_Init+0x50>)
 800bb50:	4812      	ldr	r0, [pc, #72]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb52:	f7fe fcd9 	bl	800a508 <USBD_Init>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb5c:	f7f5 f906 	bl	8000d6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bb60:	490f      	ldr	r1, [pc, #60]	@ (800bba0 <MX_USB_DEVICE_Init+0x58>)
 800bb62:	480e      	ldr	r0, [pc, #56]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb64:	f7fe fd00 	bl	800a568 <USBD_RegisterClass>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb6e:	f7f5 f8fd 	bl	8000d6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bb72:	490c      	ldr	r1, [pc, #48]	@ (800bba4 <MX_USB_DEVICE_Init+0x5c>)
 800bb74:	4809      	ldr	r0, [pc, #36]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb76:	f7fe fbf7 	bl	800a368 <USBD_CDC_RegisterInterface>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb80:	f7f5 f8f4 	bl	8000d6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb84:	4805      	ldr	r0, [pc, #20]	@ (800bb9c <MX_USB_DEVICE_Init+0x54>)
 800bb86:	f7fe fd25 	bl	800a5d4 <USBD_Start>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb90:	f7f5 f8ec 	bl	8000d6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	200000ec 	.word	0x200000ec
 800bb9c:	200009ac 	.word	0x200009ac
 800bba0:	20000050 	.word	0x20000050
 800bba4:	200000d8 	.word	0x200000d8

0800bba8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbac:	2200      	movs	r2, #0
 800bbae:	4905      	ldr	r1, [pc, #20]	@ (800bbc4 <CDC_Init_FS+0x1c>)
 800bbb0:	4805      	ldr	r0, [pc, #20]	@ (800bbc8 <CDC_Init_FS+0x20>)
 800bbb2:	f7fe fbf3 	bl	800a39c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bbb6:	4905      	ldr	r1, [pc, #20]	@ (800bbcc <CDC_Init_FS+0x24>)
 800bbb8:	4803      	ldr	r0, [pc, #12]	@ (800bbc8 <CDC_Init_FS+0x20>)
 800bbba:	f7fe fc11 	bl	800a3e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bbbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20000e88 	.word	0x20000e88
 800bbc8:	200009ac 	.word	0x200009ac
 800bbcc:	20000c88 	.word	0x20000c88

0800bbd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
 800bbec:	4613      	mov	r3, r2
 800bbee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	2b23      	cmp	r3, #35	@ 0x23
 800bbf4:	f200 8098 	bhi.w	800bd28 <CDC_Control_FS+0x148>
 800bbf8:	a201      	add	r2, pc, #4	@ (adr r2, 800bc00 <CDC_Control_FS+0x20>)
 800bbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfe:	bf00      	nop
 800bc00:	0800bd29 	.word	0x0800bd29
 800bc04:	0800bd29 	.word	0x0800bd29
 800bc08:	0800bd29 	.word	0x0800bd29
 800bc0c:	0800bd29 	.word	0x0800bd29
 800bc10:	0800bd29 	.word	0x0800bd29
 800bc14:	0800bd29 	.word	0x0800bd29
 800bc18:	0800bd29 	.word	0x0800bd29
 800bc1c:	0800bd29 	.word	0x0800bd29
 800bc20:	0800bd29 	.word	0x0800bd29
 800bc24:	0800bd29 	.word	0x0800bd29
 800bc28:	0800bd29 	.word	0x0800bd29
 800bc2c:	0800bd29 	.word	0x0800bd29
 800bc30:	0800bd29 	.word	0x0800bd29
 800bc34:	0800bd29 	.word	0x0800bd29
 800bc38:	0800bd29 	.word	0x0800bd29
 800bc3c:	0800bd29 	.word	0x0800bd29
 800bc40:	0800bd29 	.word	0x0800bd29
 800bc44:	0800bd29 	.word	0x0800bd29
 800bc48:	0800bd29 	.word	0x0800bd29
 800bc4c:	0800bd29 	.word	0x0800bd29
 800bc50:	0800bd29 	.word	0x0800bd29
 800bc54:	0800bd29 	.word	0x0800bd29
 800bc58:	0800bd29 	.word	0x0800bd29
 800bc5c:	0800bd29 	.word	0x0800bd29
 800bc60:	0800bd29 	.word	0x0800bd29
 800bc64:	0800bd29 	.word	0x0800bd29
 800bc68:	0800bd29 	.word	0x0800bd29
 800bc6c:	0800bd29 	.word	0x0800bd29
 800bc70:	0800bd29 	.word	0x0800bd29
 800bc74:	0800bd29 	.word	0x0800bd29
 800bc78:	0800bd29 	.word	0x0800bd29
 800bc7c:	0800bd29 	.word	0x0800bd29
 800bc80:	0800bc91 	.word	0x0800bc91
 800bc84:	0800bcd5 	.word	0x0800bcd5
 800bc88:	0800bd29 	.word	0x0800bd29
 800bc8c:	0800bd29 	.word	0x0800bd29
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	021b      	lsls	r3, r3, #8
 800bc9e:	431a      	orrs	r2, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	3302      	adds	r3, #2
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	041b      	lsls	r3, r3, #16
 800bca8:	431a      	orrs	r2, r3
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	3303      	adds	r3, #3
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	061b      	lsls	r3, r3, #24
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	4b20      	ldr	r3, [pc, #128]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcb8:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	791a      	ldrb	r2, [r3, #4]
 800bcbe:	4b1e      	ldr	r3, [pc, #120]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcc0:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	795a      	ldrb	r2, [r3, #5]
 800bcc6:	4b1c      	ldr	r3, [pc, #112]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcc8:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	799a      	ldrb	r2, [r3, #6]
 800bcce:	4b1a      	ldr	r3, [pc, #104]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcd0:	719a      	strb	r2, [r3, #6]
    break;
 800bcd2:	e02a      	b.n	800bd2a <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800bcd4:	4b18      	ldr	r3, [pc, #96]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800bcde:	4b16      	ldr	r3, [pc, #88]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	0a1a      	lsrs	r2, r3, #8
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	3301      	adds	r3, #1
 800bce8:	b2d2      	uxtb	r2, r2
 800bcea:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800bcec:	4b12      	ldr	r3, [pc, #72]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	0c1a      	lsrs	r2, r3, #16
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	3302      	adds	r3, #2
 800bcf6:	b2d2      	uxtb	r2, r2
 800bcf8:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800bcfa:	4b0f      	ldr	r3, [pc, #60]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	0e1a      	lsrs	r2, r3, #24
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	3303      	adds	r3, #3
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	4a0a      	ldr	r2, [pc, #40]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bd0e:	7912      	ldrb	r2, [r2, #4]
 800bd10:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	3305      	adds	r3, #5
 800bd16:	4a08      	ldr	r2, [pc, #32]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bd18:	7952      	ldrb	r2, [r2, #5]
 800bd1a:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	3306      	adds	r3, #6
 800bd20:	4a05      	ldr	r2, [pc, #20]	@ (800bd38 <CDC_Control_FS+0x158>)
 800bd22:	7992      	ldrb	r2, [r2, #6]
 800bd24:	701a      	strb	r2, [r3, #0]
    break;
 800bd26:	e000      	b.n	800bd2a <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd28:	bf00      	nop
  }

  return (USBD_OK);
 800bd2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	200000d0 	.word	0x200000d0

0800bd3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800bd46:	4b0b      	ldr	r3, [pc, #44]	@ (800bd74 <CDC_Receive_FS+0x38>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d006      	beq.n	800bd5c <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800bd4e:	4b09      	ldr	r3, [pc, #36]	@ (800bd74 <CDC_Receive_FS+0x38>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	6812      	ldr	r2, [r2, #0]
 800bd56:	4611      	mov	r1, r2
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	4806      	ldr	r0, [pc, #24]	@ (800bd78 <CDC_Receive_FS+0x3c>)
 800bd60:	f7fe fb3e 	bl	800a3e0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd64:	4804      	ldr	r0, [pc, #16]	@ (800bd78 <CDC_Receive_FS+0x3c>)
 800bd66:	f7fe fb99 	bl	800a49c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800bd6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	20001088 	.word	0x20001088
 800bd78:	200009ac 	.word	0x200009ac

0800bd7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd8c:	4b0d      	ldr	r3, [pc, #52]	@ (800bdc4 <CDC_Transmit_FS+0x48>)
 800bd8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bd92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e00b      	b.n	800bdba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bda2:	887b      	ldrh	r3, [r7, #2]
 800bda4:	461a      	mov	r2, r3
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	4806      	ldr	r0, [pc, #24]	@ (800bdc4 <CDC_Transmit_FS+0x48>)
 800bdaa:	f7fe faf7 	bl	800a39c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdae:	4805      	ldr	r0, [pc, #20]	@ (800bdc4 <CDC_Transmit_FS+0x48>)
 800bdb0:	f7fe fb34 	bl	800a41c <USBD_CDC_TransmitPacket>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200009ac 	.word	0x200009ac

0800bdc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b087      	sub	sp, #28
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
	...

0800bdec <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800bdf4:	4a04      	ldr	r2, [pc, #16]	@ (800be08 <CDC_Attach_Rx+0x1c>)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6013      	str	r3, [r2, #0]
}
 800bdfa:	bf00      	nop
 800bdfc:	370c      	adds	r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	20001088 	.word	0x20001088

0800be0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	2212      	movs	r2, #18
 800be1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be1e:	4b03      	ldr	r3, [pc, #12]	@ (800be2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800be20:	4618      	mov	r0, r3
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	20000108 	.word	0x20000108

0800be30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be30:	b480      	push	{r7}
 800be32:	b083      	sub	sp, #12
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	2204      	movs	r2, #4
 800be40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be42:	4b03      	ldr	r3, [pc, #12]	@ (800be50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be44:	4618      	mov	r0, r3
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	2000011c 	.word	0x2000011c

0800be54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	6039      	str	r1, [r7, #0]
 800be5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be60:	79fb      	ldrb	r3, [r7, #7]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d105      	bne.n	800be72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	4907      	ldr	r1, [pc, #28]	@ (800be88 <USBD_FS_ProductStrDescriptor+0x34>)
 800be6a:	4808      	ldr	r0, [pc, #32]	@ (800be8c <USBD_FS_ProductStrDescriptor+0x38>)
 800be6c:	f7ff fd78 	bl	800b960 <USBD_GetString>
 800be70:	e004      	b.n	800be7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	4904      	ldr	r1, [pc, #16]	@ (800be88 <USBD_FS_ProductStrDescriptor+0x34>)
 800be76:	4805      	ldr	r0, [pc, #20]	@ (800be8c <USBD_FS_ProductStrDescriptor+0x38>)
 800be78:	f7ff fd72 	bl	800b960 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be7c:	4b02      	ldr	r3, [pc, #8]	@ (800be88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	2000108c 	.word	0x2000108c
 800be8c:	0800c6d4 	.word	0x0800c6d4

0800be90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	4904      	ldr	r1, [pc, #16]	@ (800beb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bea0:	4804      	ldr	r0, [pc, #16]	@ (800beb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bea2:	f7ff fd5d 	bl	800b960 <USBD_GetString>
  return USBD_StrDesc;
 800bea6:	4b02      	ldr	r3, [pc, #8]	@ (800beb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	2000108c 	.word	0x2000108c
 800beb4:	0800c6ec 	.word	0x0800c6ec

0800beb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	4603      	mov	r3, r0
 800bec0:	6039      	str	r1, [r7, #0]
 800bec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	221a      	movs	r2, #26
 800bec8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800beca:	f000 f843 	bl	800bf54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bece:	4b02      	ldr	r3, [pc, #8]	@ (800bed8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20000120 	.word	0x20000120

0800bedc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	6039      	str	r1, [r7, #0]
 800bee6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	4907      	ldr	r1, [pc, #28]	@ (800bf10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bef2:	4808      	ldr	r0, [pc, #32]	@ (800bf14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bef4:	f7ff fd34 	bl	800b960 <USBD_GetString>
 800bef8:	e004      	b.n	800bf04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	4904      	ldr	r1, [pc, #16]	@ (800bf10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800befe:	4805      	ldr	r0, [pc, #20]	@ (800bf14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf00:	f7ff fd2e 	bl	800b960 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf04:	4b02      	ldr	r3, [pc, #8]	@ (800bf10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	2000108c 	.word	0x2000108c
 800bf14:	0800c700 	.word	0x0800c700

0800bf18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	6039      	str	r1, [r7, #0]
 800bf22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf24:	79fb      	ldrb	r3, [r7, #7]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d105      	bne.n	800bf36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	4907      	ldr	r1, [pc, #28]	@ (800bf4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf2e:	4808      	ldr	r0, [pc, #32]	@ (800bf50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf30:	f7ff fd16 	bl	800b960 <USBD_GetString>
 800bf34:	e004      	b.n	800bf40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	4904      	ldr	r1, [pc, #16]	@ (800bf4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf3a:	4805      	ldr	r0, [pc, #20]	@ (800bf50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf3c:	f7ff fd10 	bl	800b960 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf40:	4b02      	ldr	r3, [pc, #8]	@ (800bf4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	2000108c 	.word	0x2000108c
 800bf50:	0800c70c 	.word	0x0800c70c

0800bf54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf98 <Get_SerialNum+0x44>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf60:	4b0e      	ldr	r3, [pc, #56]	@ (800bf9c <Get_SerialNum+0x48>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf66:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa0 <Get_SerialNum+0x4c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4413      	add	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d009      	beq.n	800bf8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf7a:	2208      	movs	r2, #8
 800bf7c:	4909      	ldr	r1, [pc, #36]	@ (800bfa4 <Get_SerialNum+0x50>)
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f000 f814 	bl	800bfac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf84:	2204      	movs	r2, #4
 800bf86:	4908      	ldr	r1, [pc, #32]	@ (800bfa8 <Get_SerialNum+0x54>)
 800bf88:	68b8      	ldr	r0, [r7, #8]
 800bf8a:	f000 f80f 	bl	800bfac <IntToUnicode>
  }
}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	1fff7a10 	.word	0x1fff7a10
 800bf9c:	1fff7a14 	.word	0x1fff7a14
 800bfa0:	1fff7a18 	.word	0x1fff7a18
 800bfa4:	20000122 	.word	0x20000122
 800bfa8:	20000132 	.word	0x20000132

0800bfac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	60f8      	str	r0, [r7, #12]
 800bfb4:	60b9      	str	r1, [r7, #8]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]
 800bfc2:	e027      	b.n	800c014 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	0f1b      	lsrs	r3, r3, #28
 800bfc8:	2b09      	cmp	r3, #9
 800bfca:	d80b      	bhi.n	800bfe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	0f1b      	lsrs	r3, r3, #28
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	440b      	add	r3, r1
 800bfdc:	3230      	adds	r2, #48	@ 0x30
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]
 800bfe2:	e00a      	b.n	800bffa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	0f1b      	lsrs	r3, r3, #28
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	7dfb      	ldrb	r3, [r7, #23]
 800bfec:	005b      	lsls	r3, r3, #1
 800bfee:	4619      	mov	r1, r3
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	440b      	add	r3, r1
 800bff4:	3237      	adds	r2, #55	@ 0x37
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	3301      	adds	r3, #1
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	4413      	add	r3, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c00e:	7dfb      	ldrb	r3, [r7, #23]
 800c010:	3301      	adds	r3, #1
 800c012:	75fb      	strb	r3, [r7, #23]
 800c014:	7dfa      	ldrb	r2, [r7, #23]
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d3d3      	bcc.n	800bfc4 <IntToUnicode+0x18>
  }
}
 800c01c:	bf00      	nop
 800c01e:	bf00      	nop
 800c020:	371c      	adds	r7, #28
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
	...

0800c02c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08a      	sub	sp, #40	@ 0x28
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c034:	f107 0314 	add.w	r3, r7, #20
 800c038:	2200      	movs	r2, #0
 800c03a:	601a      	str	r2, [r3, #0]
 800c03c:	605a      	str	r2, [r3, #4]
 800c03e:	609a      	str	r2, [r3, #8]
 800c040:	60da      	str	r2, [r3, #12]
 800c042:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c04c:	d13a      	bne.n	800c0c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c04e:	2300      	movs	r3, #0
 800c050:	613b      	str	r3, [r7, #16]
 800c052:	4b1e      	ldr	r3, [pc, #120]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c056:	4a1d      	ldr	r2, [pc, #116]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c058:	f043 0301 	orr.w	r3, r3, #1
 800c05c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c05e:	4b1b      	ldr	r3, [pc, #108]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c062:	f003 0301 	and.w	r3, r3, #1
 800c066:	613b      	str	r3, [r7, #16]
 800c068:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c06a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c06e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c070:	2302      	movs	r3, #2
 800c072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c074:	2300      	movs	r3, #0
 800c076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c078:	2303      	movs	r3, #3
 800c07a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c07c:	230a      	movs	r3, #10
 800c07e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c080:	f107 0314 	add.w	r3, r7, #20
 800c084:	4619      	mov	r1, r3
 800c086:	4812      	ldr	r0, [pc, #72]	@ (800c0d0 <HAL_PCD_MspInit+0xa4>)
 800c088:	f7f7 f8b4 	bl	80031f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c08c:	4b0f      	ldr	r3, [pc, #60]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c08e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c090:	4a0e      	ldr	r2, [pc, #56]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c096:	6353      	str	r3, [r2, #52]	@ 0x34
 800c098:	2300      	movs	r3, #0
 800c09a:	60fb      	str	r3, [r7, #12]
 800c09c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c09e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c0a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c0a6:	6453      	str	r3, [r2, #68]	@ 0x44
 800c0a8:	4b08      	ldr	r3, [pc, #32]	@ (800c0cc <HAL_PCD_MspInit+0xa0>)
 800c0aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	2043      	movs	r0, #67	@ 0x43
 800c0ba:	f7f6 fcb8 	bl	8002a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c0be:	2043      	movs	r0, #67	@ 0x43
 800c0c0:	f7f6 fcd1 	bl	8002a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c0c4:	bf00      	nop
 800c0c6:	3728      	adds	r7, #40	@ 0x28
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	40023800 	.word	0x40023800
 800c0d0:	40020000 	.word	0x40020000

0800c0d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	f7fe fabf 	bl	800a66e <USBD_LL_SetupStage>
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c10a:	78fa      	ldrb	r2, [r7, #3]
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4613      	mov	r3, r2
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	440b      	add	r3, r1
 800c118:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	78fb      	ldrb	r3, [r7, #3]
 800c120:	4619      	mov	r1, r3
 800c122:	f7fe faf9 	bl	800a718 <USBD_LL_DataOutStage>
}
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c140:	78fa      	ldrb	r2, [r7, #3]
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	4613      	mov	r3, r2
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	440b      	add	r3, r1
 800c14e:	3320      	adds	r3, #32
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	78fb      	ldrb	r3, [r7, #3]
 800c154:	4619      	mov	r1, r3
 800c156:	f7fe fb9b 	bl	800a890 <USBD_LL_DataInStage>
}
 800c15a:	bf00      	nop
 800c15c:	3708      	adds	r7, #8
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b082      	sub	sp, #8
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c170:	4618      	mov	r0, r3
 800c172:	f7fe fcdf 	bl	800ab34 <USBD_LL_SOF>
}
 800c176:	bf00      	nop
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b084      	sub	sp, #16
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c186:	2301      	movs	r3, #1
 800c188:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	79db      	ldrb	r3, [r3, #7]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d001      	beq.n	800c196 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c192:	f7f4 fdeb 	bl	8000d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c19c:	7bfa      	ldrb	r2, [r7, #15]
 800c19e:	4611      	mov	r1, r2
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7fe fc83 	bl	800aaac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7fe fc2a 	bl	800aa06 <USBD_LL_Reset>
}
 800c1b2:	bf00      	nop
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
	...

0800c1bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b082      	sub	sp, #8
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7fe fc7e 	bl	800aacc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	6812      	ldr	r2, [r2, #0]
 800c1de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c1e2:	f043 0301 	orr.w	r3, r3, #1
 800c1e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7adb      	ldrb	r3, [r3, #11]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d005      	beq.n	800c1fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1f0:	4b04      	ldr	r3, [pc, #16]	@ (800c204 <HAL_PCD_SuspendCallback+0x48>)
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	4a03      	ldr	r2, [pc, #12]	@ (800c204 <HAL_PCD_SuspendCallback+0x48>)
 800c1f6:	f043 0306 	orr.w	r3, r3, #6
 800c1fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	e000ed00 	.word	0xe000ed00

0800c208 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fc74 	bl	800ab04 <USBD_LL_Resume>
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	4611      	mov	r1, r2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe fccc 	bl	800abd8 <USBD_LL_IsoOUTIncomplete>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c25a:	78fa      	ldrb	r2, [r7, #3]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe fc88 	bl	800ab74 <USBD_LL_IsoINIncomplete>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fcde 	bl	800ac3c <USBD_LL_DevConnected>
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe fcdb 	bl	800ac52 <USBD_LL_DevDisconnected>
}
 800c29c:	bf00      	nop
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d13c      	bne.n	800c32e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c2b4:	4a20      	ldr	r2, [pc, #128]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4a1e      	ldr	r2, [pc, #120]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2c4:	4b1c      	ldr	r3, [pc, #112]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c2ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2d2:	4b19      	ldr	r3, [pc, #100]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2d8:	4b17      	ldr	r3, [pc, #92]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2de:	4b16      	ldr	r3, [pc, #88]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2e4:	4b14      	ldr	r3, [pc, #80]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2ea:	4b13      	ldr	r3, [pc, #76]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2f0:	4b11      	ldr	r3, [pc, #68]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c2f6:	4b10      	ldr	r3, [pc, #64]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c338 <USBD_LL_Init+0x94>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c302:	480d      	ldr	r0, [pc, #52]	@ (800c338 <USBD_LL_Init+0x94>)
 800c304:	f7f9 fd44 	bl	8005d90 <HAL_PCD_Init>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c30e:	f7f4 fd2d 	bl	8000d6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c312:	2180      	movs	r1, #128	@ 0x80
 800c314:	4808      	ldr	r0, [pc, #32]	@ (800c338 <USBD_LL_Init+0x94>)
 800c316:	f7fa ff70 	bl	80071fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c31a:	2240      	movs	r2, #64	@ 0x40
 800c31c:	2100      	movs	r1, #0
 800c31e:	4806      	ldr	r0, [pc, #24]	@ (800c338 <USBD_LL_Init+0x94>)
 800c320:	f7fa ff24 	bl	800716c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c324:	2280      	movs	r2, #128	@ 0x80
 800c326:	2101      	movs	r1, #1
 800c328:	4803      	ldr	r0, [pc, #12]	@ (800c338 <USBD_LL_Init+0x94>)
 800c32a:	f7fa ff1f 	bl	800716c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	2000128c 	.word	0x2000128c

0800c33c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c352:	4618      	mov	r0, r3
 800c354:	f7f9 fe2b 	bl	8005fae <HAL_PCD_Start>
 800c358:	4603      	mov	r3, r0
 800c35a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c35c:	7bfb      	ldrb	r3, [r7, #15]
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 f942 	bl	800c5e8 <USBD_Get_USB_Status>
 800c364:	4603      	mov	r3, r0
 800c366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c368:	7bbb      	ldrb	r3, [r7, #14]
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	461a      	mov	r2, r3
 800c380:	4603      	mov	r3, r0
 800c382:	70fb      	strb	r3, [r7, #3]
 800c384:	460b      	mov	r3, r1
 800c386:	70bb      	strb	r3, [r7, #2]
 800c388:	4613      	mov	r3, r2
 800c38a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c39a:	78bb      	ldrb	r3, [r7, #2]
 800c39c:	883a      	ldrh	r2, [r7, #0]
 800c39e:	78f9      	ldrb	r1, [r7, #3]
 800c3a0:	f7fa faff 	bl	80069a2 <HAL_PCD_EP_Open>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a8:	7bfb      	ldrb	r3, [r7, #15]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 f91c 	bl	800c5e8 <USBD_Get_USB_Status>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3d8:	78fa      	ldrb	r2, [r7, #3]
 800c3da:	4611      	mov	r1, r2
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fa fb4a 	bl	8006a76 <HAL_PCD_EP_Close>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 f8fd 	bl	800c5e8 <USBD_Get_USB_Status>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c40c:	2300      	movs	r3, #0
 800c40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c416:	78fa      	ldrb	r2, [r7, #3]
 800c418:	4611      	mov	r1, r2
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fa fc02 	bl	8006c24 <HAL_PCD_EP_SetStall>
 800c420:	4603      	mov	r3, r0
 800c422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c424:	7bfb      	ldrb	r3, [r7, #15]
 800c426:	4618      	mov	r0, r3
 800c428:	f000 f8de 	bl	800c5e8 <USBD_Get_USB_Status>
 800c42c:	4603      	mov	r3, r0
 800c42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c430:	7bbb      	ldrb	r3, [r7, #14]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c454:	78fa      	ldrb	r2, [r7, #3]
 800c456:	4611      	mov	r1, r2
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fa fc46 	bl	8006cea <HAL_PCD_EP_ClrStall>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c462:	7bfb      	ldrb	r3, [r7, #15]
 800c464:	4618      	mov	r0, r3
 800c466:	f000 f8bf 	bl	800c5e8 <USBD_Get_USB_Status>
 800c46a:	4603      	mov	r3, r0
 800c46c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c46e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c48a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c48c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c490:	2b00      	cmp	r3, #0
 800c492:	da0b      	bge.n	800c4ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c49a:	68f9      	ldr	r1, [r7, #12]
 800c49c:	4613      	mov	r3, r2
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	440b      	add	r3, r1
 800c4a6:	3316      	adds	r3, #22
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	e00b      	b.n	800c4c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4ac:	78fb      	ldrb	r3, [r7, #3]
 800c4ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c4b2:	68f9      	ldr	r1, [r7, #12]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	00db      	lsls	r3, r3, #3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c4c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4ea:	78fa      	ldrb	r2, [r7, #3]
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fa fa33 	bl	800695a <HAL_PCD_SetAddress>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 f874 	bl	800c5e8 <USBD_Get_USB_Status>
 800c500:	4603      	mov	r3, r0
 800c502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c504:	7bbb      	ldrb	r3, [r7, #14]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b086      	sub	sp, #24
 800c512:	af00      	add	r7, sp, #0
 800c514:	60f8      	str	r0, [r7, #12]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
 800c51a:	460b      	mov	r3, r1
 800c51c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c52c:	7af9      	ldrb	r1, [r7, #11]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	f7fa fb3d 	bl	8006bb0 <HAL_PCD_EP_Transmit>
 800c536:	4603      	mov	r3, r0
 800c538:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 f853 	bl	800c5e8 <USBD_Get_USB_Status>
 800c542:	4603      	mov	r3, r0
 800c544:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c546:	7dbb      	ldrb	r3, [r7, #22]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	607a      	str	r2, [r7, #4]
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	460b      	mov	r3, r1
 800c55e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c56e:	7af9      	ldrb	r1, [r7, #11]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	f7fa fac9 	bl	8006b0a <HAL_PCD_EP_Receive>
 800c578:	4603      	mov	r3, r0
 800c57a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	4618      	mov	r0, r3
 800c580:	f000 f832 	bl	800c5e8 <USBD_Get_USB_Status>
 800c584:	4603      	mov	r3, r0
 800c586:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c588:	7dbb      	ldrb	r3, [r7, #22]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3718      	adds	r7, #24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
 800c59a:	460b      	mov	r3, r1
 800c59c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5a4:	78fa      	ldrb	r2, [r7, #3]
 800c5a6:	4611      	mov	r1, r2
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fa fae9 	bl	8006b80 <HAL_PCD_EP_GetRxCount>
 800c5ae:	4603      	mov	r3, r0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c5c0:	4b03      	ldr	r3, [pc, #12]	@ (800c5d0 <USBD_static_malloc+0x18>)
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	20001770 	.word	0x20001770

0800c5d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]

}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5f6:	79fb      	ldrb	r3, [r7, #7]
 800c5f8:	2b03      	cmp	r3, #3
 800c5fa:	d817      	bhi.n	800c62c <USBD_Get_USB_Status+0x44>
 800c5fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c604 <USBD_Get_USB_Status+0x1c>)
 800c5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c602:	bf00      	nop
 800c604:	0800c615 	.word	0x0800c615
 800c608:	0800c61b 	.word	0x0800c61b
 800c60c:	0800c621 	.word	0x0800c621
 800c610:	0800c627 	.word	0x0800c627
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
    break;
 800c618:	e00b      	b.n	800c632 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c61a:	2303      	movs	r3, #3
 800c61c:	73fb      	strb	r3, [r7, #15]
    break;
 800c61e:	e008      	b.n	800c632 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c620:	2301      	movs	r3, #1
 800c622:	73fb      	strb	r3, [r7, #15]
    break;
 800c624:	e005      	b.n	800c632 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c626:	2303      	movs	r3, #3
 800c628:	73fb      	strb	r3, [r7, #15]
    break;
 800c62a:	e002      	b.n	800c632 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c62c:	2303      	movs	r3, #3
 800c62e:	73fb      	strb	r3, [r7, #15]
    break;
 800c630:	bf00      	nop
  }
  return usb_status;
 800c632:	7bfb      	ldrb	r3, [r7, #15]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <memset>:
 800c640:	4402      	add	r2, r0
 800c642:	4603      	mov	r3, r0
 800c644:	4293      	cmp	r3, r2
 800c646:	d100      	bne.n	800c64a <memset+0xa>
 800c648:	4770      	bx	lr
 800c64a:	f803 1b01 	strb.w	r1, [r3], #1
 800c64e:	e7f9      	b.n	800c644 <memset+0x4>

0800c650 <__libc_init_array>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	4d0d      	ldr	r5, [pc, #52]	@ (800c688 <__libc_init_array+0x38>)
 800c654:	4c0d      	ldr	r4, [pc, #52]	@ (800c68c <__libc_init_array+0x3c>)
 800c656:	1b64      	subs	r4, r4, r5
 800c658:	10a4      	asrs	r4, r4, #2
 800c65a:	2600      	movs	r6, #0
 800c65c:	42a6      	cmp	r6, r4
 800c65e:	d109      	bne.n	800c674 <__libc_init_array+0x24>
 800c660:	4d0b      	ldr	r5, [pc, #44]	@ (800c690 <__libc_init_array+0x40>)
 800c662:	4c0c      	ldr	r4, [pc, #48]	@ (800c694 <__libc_init_array+0x44>)
 800c664:	f000 f818 	bl	800c698 <_init>
 800c668:	1b64      	subs	r4, r4, r5
 800c66a:	10a4      	asrs	r4, r4, #2
 800c66c:	2600      	movs	r6, #0
 800c66e:	42a6      	cmp	r6, r4
 800c670:	d105      	bne.n	800c67e <__libc_init_array+0x2e>
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	f855 3b04 	ldr.w	r3, [r5], #4
 800c678:	4798      	blx	r3
 800c67a:	3601      	adds	r6, #1
 800c67c:	e7ee      	b.n	800c65c <__libc_init_array+0xc>
 800c67e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c682:	4798      	blx	r3
 800c684:	3601      	adds	r6, #1
 800c686:	e7f2      	b.n	800c66e <__libc_init_array+0x1e>
 800c688:	0800d4b0 	.word	0x0800d4b0
 800c68c:	0800d4b0 	.word	0x0800d4b0
 800c690:	0800d4b0 	.word	0x0800d4b0
 800c694:	0800d4b4 	.word	0x0800d4b4

0800c698 <_init>:
 800c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69a:	bf00      	nop
 800c69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69e:	bc08      	pop	{r3}
 800c6a0:	469e      	mov	lr, r3
 800c6a2:	4770      	bx	lr

0800c6a4 <_fini>:
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	bf00      	nop
 800c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6aa:	bc08      	pop	{r3}
 800c6ac:	469e      	mov	lr, r3
 800c6ae:	4770      	bx	lr
