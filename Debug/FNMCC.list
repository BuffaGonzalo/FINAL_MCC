
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c584  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800c71c  0800c71c  0000d71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c794  0800c794  0000e134  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c794  0800c794  0000d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c79c  0800c79c  0000e134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c79c  0800c79c  0000d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7a0  0800c7a0  0000d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0800c7a4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  20000134  0800c8d8  0000e134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  0800c8d8  0000e988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fbe  00000000  00000000  0000e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004019  00000000  00000000  00028122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002c140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001230  00000000  00000000  0002d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005617  00000000  00000000  0002eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0ac  00000000  00000000  0003410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eeee  00000000  00000000  000521bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f10a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006350  00000000  00000000  000f10ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f743c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000134 	.word	0x20000134
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c704 	.word	0x0800c704

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000138 	.word	0x20000138
 80001d4:	0800c704 	.word	0x0800c704

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000358 	.word	0x20000358
 8000540:	20000368 	.word	0x20000368

08000544 <HAL_I2C_MemTxCpltCallback>:
//void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//Control del final de operaciones
    //if (hi2c->Instance == hi2c1.Instance) {
        SSD1306_TxCplt = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
    //}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000591 	.word	0x20000591

08000564 <HAL_TIM_PeriodElapsedCallback>:
//}
//void HAL_I2C_ER_IRQHandler(){
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d116      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000580:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b28      	cmp	r3, #40	@ 0x28
 8000588:	d107      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800059a:	2208      	movs	r2, #8
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005a0:	f001 fc0c 	bl	8001dbc <HAL_ADC_Start_DMA>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010000 	.word	0x40010000
 80005b0:	20000354 	.word	0x20000354
 80005b4:	20000590 	.word	0x20000590
 80005b8:	20000358 	.word	0x20000358
 80005bc:	20000150 	.word	0x20000150

080005c0 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e018      	b.n	8000602 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	441a      	add	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <USBRxData+0x58>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <USBRxData+0x58>)
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	b2c4      	uxtb	r4, r0
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <USBRxData+0x58>)
 80005e4:	7144      	strb	r4, [r0, #5]
 80005e6:	440b      	add	r3, r1
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <USBRxData+0x58>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <USBRxData+0x58>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <USBRxData+0x58>)
 80005fa:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d8e2      	bhi.n	80005d0 <USBRxData+0x10>
	}

}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bc90      	pop	{r4, r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000384 	.word	0x20000384

0800061c <USBTask>:

void USBTask() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b0c2      	sub	sp, #264	@ 0x108
 8000620:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <USBTask+0x90>)
 8000624:	791a      	ldrb	r2, [r3, #4]
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <USBTask+0x90>)
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	429a      	cmp	r2, r3
 800062c:	d039      	beq.n	80006a2 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <USBTask+0x90>)
 8000630:	f000 fc9a 	bl	8000f68 <decodeHeader>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800063a:	491d      	ldr	r1, [pc, #116]	@ (80006b0 <USBTask+0x94>)
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <USBTask+0x90>)
 800063e:	f000 f839 	bl	80006b4 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000648:	e01d      	b.n	8000686 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <USBTask+0x94>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <USBTask+0x94>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	b2c8      	uxtb	r0, r1
 8000656:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <USBTask+0x94>)
 8000658:	7208      	strb	r0, [r1, #8]
 800065a:	441a      	add	r2, r3
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800066a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <USBTask+0x94>)
 800066e:	7a1a      	ldrb	r2, [r3, #8]
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <USBTask+0x94>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	4013      	ands	r3, r2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <USBTask+0x94>)
 800067a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800067c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <USBTask+0x94>)
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800068e:	429a      	cmp	r2, r3
 8000690:	d3db      	bcc.n	800064a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <USBTask+0x94>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f00b fba3 	bl	800bde8 <CDC_Transmit_FS>
	}

}
 80006a2:	bf00      	nop
 80006a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000384 	.word	0x20000384
 80006b0:	20000378 	.word	0x20000378

080006b4 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7a12      	ldrb	r2, [r2, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80006cc:	d002      	beq.n	80006d4 <decodeCommand+0x20>
 80006ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80006d0:	d010      	beq.n	80006f4 <decodeCommand+0x40>
 80006d2:	e01f      	b.n	8000714 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 80006d4:	2202      	movs	r2, #2
 80006d6:	21f0      	movs	r1, #240	@ 0xf0
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f000 fb23 	bl	8000d24 <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 80006de:	210d      	movs	r1, #13
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 fbce 	bl	8000e82 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f000 fbc8 	bl	8000e82 <putByteOnTx>
		break;
 80006f2:	e025      	b.n	8000740 <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 80006f4:	220d      	movs	r2, #13
 80006f6:	21f1      	movs	r1, #241	@ 0xf1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f000 fb13 	bl	8000d24 <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 80006fe:	4912      	ldr	r1, [pc, #72]	@ (8000748 <decodeCommand+0x94>)
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f000 fbec 	bl	8000ede <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7a5b      	ldrb	r3, [r3, #9]
 800070a:	4619      	mov	r1, r3
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fbb8 	bl	8000e82 <putByteOnTx>
		break;
 8000712:	e015      	b.n	8000740 <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7a12      	ldrb	r2, [r2, #8]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2202      	movs	r2, #2
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 fafd 	bl	8000d24 <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 800072a:	21ff      	movs	r1, #255	@ 0xff
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f000 fba8 	bl	8000e82 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	4619      	mov	r1, r3
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 fba2 	bl	8000e82 <putByteOnTx>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800c764 	.word	0x0800c764

0800074c <do10ms>:

void do10ms() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <do10ms+0x48>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <do10ms+0x42>
		IS10MS=FALSE;
 800075e:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <do10ms+0x48>)
 8000760:	7813      	ldrb	r3, [r2, #0]
 8000762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000766:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <do10ms+0x4c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <do10ms+0x4c>)
 8000770:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <do10ms+0x4c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <do10ms+0x42>
			tmo100ms = 10;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <do10ms+0x4c>)
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <do10ms+0x48>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000788:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800078a:	f000 f807 	bl	800079c <heartBeatTask>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000590 	.word	0x20000590
 8000798:	20000028 	.word	0x20000028

0800079c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <heartBeatTask+0x44>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <heartBeatTask+0x48>)
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <heartBeatTask+0x4c>)
 80007bc:	f002 fd25 	bl	800320a <HAL_GPIO_TogglePin>

	times++;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <heartBeatTask+0x48>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <heartBeatTask+0x48>)
 80007ca:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <heartBeatTask+0x48>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 031f 	and.w	r3, r3, #31
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <heartBeatTask+0x48>)
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	20000592 	.word	0x20000592
 80007e8:	40020800 	.word	0x40020800

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f001 f8fa 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f842 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 fa2e 	bl	8000c58 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fc:	f000 f9ee 	bl	8000bdc <MX_DMA_Init>
  MX_ADC1_Init();
 8000800:	f000 f8a4 	bl	800094c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000804:	f000 f956 	bl	8000ab4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000808:	f000 f982 	bl	8000b10 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800080c:	f00b f9d2 	bl	800bbb4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000810:	4811      	ldr	r0, [pc, #68]	@ (8000858 <main+0x6c>)
 8000812:	f00b fb21 	bl	800be58 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <main+0x70>)
 8000818:	f007 f9d6 	bl	8007bc8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000822:	480f      	ldr	r0, [pc, #60]	@ (8000860 <main+0x74>)
 8000824:	f002 fcd8 	bl	80031d8 <HAL_GPIO_WritePin>

	//Display
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	480d      	ldr	r0, [pc, #52]	@ (8000864 <main+0x78>)
 800082e:	f002 fcd3 	bl	80031d8 <HAL_GPIO_WritePin>

	SSD1306_Init();
 8000832:	f000 fccf 	bl	80011d4 <SSD1306_Init>

	//Inicializacion de protocolo
	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <main+0x7c>)
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <main+0x80>)
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <main+0x84>)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <main+0x88>)
 800083e:	f000 fc91 	bl	8001164 <initComm>

	//Variables
	ALLFLAGS = RESET;
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <main+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 8000848:	f7ff ff80 	bl	800074c <do10ms>
		USBTask();
 800084c:	f7ff fee6 	bl	800061c <USBTask>
		//SSD1306Data();
		SSD1306_UpdateScreen_NB();
 8000850:	f000 fd7e 	bl	8001350 <SSD1306_UpdateScreen_NB>
	  	do10ms();
 8000854:	bf00      	nop
 8000856:	e7f7      	b.n	8000848 <main+0x5c>
 8000858:	080005c1 	.word	0x080005c1
 800085c:	2000030c 	.word	0x2000030c
 8000860:	40020800 	.word	0x40020800
 8000864:	40020400 	.word	0x40020400
 8000868:	20000390 	.word	0x20000390
 800086c:	20000490 	.word	0x20000490
 8000870:	20000378 	.word	0x20000378
 8000874:	20000384 	.word	0x20000384
 8000878:	20000590 	.word	0x20000590

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	@ 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	@ 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f00b ff0e 	bl	800c6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <SystemClock_Config+0xc8>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a26      	ldr	r2, [pc, #152]	@ (8000944 <SystemClock_Config+0xc8>)
 80008aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <SystemClock_Config+0xc8>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <SystemClock_Config+0xcc>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a20      	ldr	r2, [pc, #128]	@ (8000948 <SystemClock_Config+0xcc>)
 80008c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ca:	6013      	str	r3, [r2, #0]
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <SystemClock_Config+0xcc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d8:	2301      	movs	r3, #1
 80008da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e2:	2302      	movs	r3, #2
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008ec:	2319      	movs	r3, #25
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008f0:	23c0      	movs	r3, #192	@ 0xc0
 80008f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f8:	2304      	movs	r3, #4
 80008fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4618      	mov	r0, r3
 8000902:	f006 fccd 	bl	80072a0 <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800090c:	f000 fa04 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800091c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	2103      	movs	r1, #3
 800092c:	4618      	mov	r0, r3
 800092e:	f006 ff2f 	bl	8007790 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000938:	f000 f9ee 	bl	8000d18 <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3750      	adds	r7, #80	@ 0x50
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800095e:	4b52      	ldr	r3, [pc, #328]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000960:	4a52      	ldr	r2, [pc, #328]	@ (8000aac <MX_ADC1_Init+0x160>)
 8000962:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000964:	4b50      	ldr	r3, [pc, #320]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000966:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800096a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800096c:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000972:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000978:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 800097a:	2200      	movs	r2, #0
 800097c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097e:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000986:	4b48      	ldr	r3, [pc, #288]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000988:	2200      	movs	r2, #0
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098c:	4b46      	ldr	r3, [pc, #280]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 800098e:	4a48      	ldr	r2, [pc, #288]	@ (8000ab0 <MX_ADC1_Init+0x164>)
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000992:	4b45      	ldr	r3, [pc, #276]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000998:	4b43      	ldr	r3, [pc, #268]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 800099a:	2208      	movs	r2, #8
 800099c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800099e:	4b42      	ldr	r3, [pc, #264]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a6:	4b40      	ldr	r3, [pc, #256]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ac:	483e      	ldr	r0, [pc, #248]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 80009ae:	f001 f8b1 	bl	8001b14 <HAL_ADC_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 f9ae 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4836      	ldr	r0, [pc, #216]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 80009ce:	f001 fb07 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009d8:	f000 f99e 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009dc:	2301      	movs	r3, #1
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 80009ea:	f001 faf9 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009f4:	f000 f990 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009fc:	2303      	movs	r3, #3
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4828      	ldr	r0, [pc, #160]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000a06:	f001 faeb 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a10:	f000 f982 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a14:	2303      	movs	r3, #3
 8000a16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4821      	ldr	r0, [pc, #132]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000a22:	f001 fadd 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a2c:	f000 f974 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a30:	2304      	movs	r3, #4
 8000a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a34:	2305      	movs	r3, #5
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000a3e:	f001 facf 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a48:	f000 f966 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a50:	2306      	movs	r3, #6
 8000a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4813      	ldr	r0, [pc, #76]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000a5a:	f001 fac1 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a64:	f000 f958 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a68:	2306      	movs	r3, #6
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000a76:	f001 fab3 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a80:	f000 f94a 	bl	8000d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a84:	2307      	movs	r3, #7
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_ADC1_Init+0x15c>)
 8000a92:	f001 faa5 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000a9c:	f000 f93c 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000150 	.word	0x20000150
 8000aac:	40012000 	.word	0x40012000
 8000ab0:	0f000001 	.word	0x0f000001

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f002 fba5 	bl	8003240 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f90c 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200001f8 	.word	0x200001f8
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	00061a80 	.word	0x00061a80

08000b10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08c      	sub	sp, #48	@ 0x30
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0320 	add.w	r3, r7, #32
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b3e:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <MX_TIM1_Init+0xc8>)
 8000b40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b42:	4b24      	ldr	r3, [pc, #144]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b44:	225f      	movs	r2, #95	@ 0x5f
 8000b46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b50:	22f9      	movs	r2, #249	@ 0xf9
 8000b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b66:	481b      	ldr	r0, [pc, #108]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b68:	f006 ffde 	bl	8007b28 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b72:	f000 f8d1 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000b84:	f007 f972 	bl	8007e6c <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b8e:	f000 f8c3 	bl	8000d18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000ba2:	f007 fa2a 	bl	8007ffa <HAL_TIM_SlaveConfigSynchro>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000bac:	f000 f8b4 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_TIM1_Init+0xc4>)
 8000bbe:	f007 fc39 	bl	8008434 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000bc8:	f000 f8a6 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	@ 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000030c 	.word	0x2000030c
 8000bd8:	40010000 	.word	0x40010000

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_DMA_Init+0x78>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a1a      	ldr	r2, [pc, #104]	@ (8000c54 <MX_DMA_Init+0x78>)
 8000bec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_DMA_Init+0x78>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_DMA_Init+0x78>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <MX_DMA_Init+0x78>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_DMA_Init+0x78>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f001 fd73 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c24:	200b      	movs	r0, #11
 8000c26:	f001 fd8c 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f001 fd6b 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c34:	200c      	movs	r0, #12
 8000c36:	f001 fd84 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2038      	movs	r0, #56	@ 0x38
 8000c40:	f001 fd63 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c44:	2038      	movs	r0, #56	@ 0x38
 8000c46:	f001 fd7c 	bl	8002742 <HAL_NVIC_EnableIRQ>

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a26      	ldr	r2, [pc, #152]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a1f      	ldr	r2, [pc, #124]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b16      	ldr	r3, [pc, #88]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a11      	ldr	r2, [pc, #68]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <MX_GPIO_Init+0xb8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce4:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <MX_GPIO_Init+0xbc>)
 8000ce6:	f002 fa77 	bl	80031d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_GPIO_Init+0xbc>)
 8000d04:	f002 f8e4 	bl	8002ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	@ 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020800 	.word	0x40020800

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000d34:	78bb      	ldrb	r3, [r7, #2]
 8000d36:	3301      	adds	r3, #1
 8000d38:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	795a      	ldrb	r2, [r3, #5]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	1c59      	adds	r1, r3, #1
 8000d52:	b2c8      	uxtb	r0, r1
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	7148      	strb	r0, [r1, #5]
 8000d58:	4413      	add	r3, r2
 8000d5a:	2255      	movs	r2, #85	@ 0x55
 8000d5c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	795a      	ldrb	r2, [r3, #5]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	799b      	ldrb	r3, [r3, #6]
 8000d66:	4013      	ands	r3, r2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	795b      	ldrb	r3, [r3, #5]
 8000d76:	1c59      	adds	r1, r3, #1
 8000d78:	b2c8      	uxtb	r0, r1
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	7148      	strb	r0, [r1, #5]
 8000d7e:	4413      	add	r3, r2
 8000d80:	224e      	movs	r2, #78	@ 0x4e
 8000d82:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	795a      	ldrb	r2, [r3, #5]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	795b      	ldrb	r3, [r3, #5]
 8000d9c:	1c59      	adds	r1, r3, #1
 8000d9e:	b2c8      	uxtb	r0, r1
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	7148      	strb	r0, [r1, #5]
 8000da4:	4413      	add	r3, r2
 8000da6:	2245      	movs	r2, #69	@ 0x45
 8000da8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795a      	ldrb	r2, [r3, #5]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	799b      	ldrb	r3, [r3, #6]
 8000db2:	4013      	ands	r3, r2
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	1c59      	adds	r1, r3, #1
 8000dc4:	b2c8      	uxtb	r0, r1
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	7148      	strb	r0, [r1, #5]
 8000dca:	4413      	add	r3, r2
 8000dcc:	2252      	movs	r2, #82	@ 0x52
 8000dce:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	795a      	ldrb	r2, [r3, #5]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	799b      	ldrb	r3, [r3, #6]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	1c59      	adds	r1, r3, #1
 8000dea:	b2c8      	uxtb	r0, r1
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	7148      	strb	r0, [r1, #5]
 8000df0:	4413      	add	r3, r2
 8000df2:	78ba      	ldrb	r2, [r7, #2]
 8000df4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	795a      	ldrb	r2, [r3, #5]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	799b      	ldrb	r3, [r3, #6]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	795b      	ldrb	r3, [r3, #5]
 8000e0e:	1c59      	adds	r1, r3, #1
 8000e10:	b2c8      	uxtb	r0, r1
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	7148      	strb	r0, [r1, #5]
 8000e16:	4413      	add	r3, r2
 8000e18:	223a      	movs	r2, #58	@ 0x3a
 8000e1a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	795a      	ldrb	r2, [r3, #5]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	799b      	ldrb	r3, [r3, #6]
 8000e24:	4013      	ands	r3, r2
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	795b      	ldrb	r3, [r3, #5]
 8000e34:	1c59      	adds	r1, r3, #1
 8000e36:	b2c8      	uxtb	r0, r1
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	7148      	strb	r0, [r1, #5]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	795a      	ldrb	r2, [r3, #5]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	799b      	ldrb	r3, [r3, #6]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2207      	movs	r2, #7
 8000e56:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7a5a      	ldrb	r2, [r3, #9]
 8000e5c:	78b9      	ldrb	r1, [r7, #2]
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	404b      	eors	r3, r1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4053      	eors	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7a5b      	ldrb	r3, [r3, #9]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	79db      	ldrb	r3, [r3, #7]
 8000e92:	3301      	adds	r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	795b      	ldrb	r3, [r3, #5]
 8000ea2:	1c59      	adds	r1, r3, #1
 8000ea4:	b2c8      	uxtb	r0, r1
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	7148      	strb	r0, [r1, #5]
 8000eaa:	4413      	add	r3, r2
 8000eac:	78fa      	ldrb	r2, [r7, #3]
 8000eae:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	795a      	ldrb	r2, [r3, #5]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a5a      	ldrb	r2, [r3, #9]
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	4053      	eors	r3, r2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7a5b      	ldrb	r3, [r3, #9]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000ede:	b490      	push	{r4, r7}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000eec:	e02c      	b.n	8000f48 <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	79db      	ldrb	r3, [r3, #7]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	441a      	add	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	795b      	ldrb	r3, [r3, #5]
 8000f0c:	1c58      	adds	r0, r3, #1
 8000f0e:	b2c4      	uxtb	r4, r0
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	7144      	strb	r4, [r0, #5]
 8000f14:	440b      	add	r3, r1
 8000f16:	7812      	ldrb	r2, [r2, #0]
 8000f18:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	795a      	ldrb	r2, [r3, #5]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	799b      	ldrb	r3, [r3, #6]
 8000f22:	4013      	ands	r3, r2
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	73fa      	strb	r2, [r7, #15]
 8000f34:	461a      	mov	r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7a5b      	ldrb	r3, [r3, #9]
 8000f40:	4053      	eors	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ca      	bne.n	8000eee <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7a5b      	ldrb	r3, [r3, #9]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc90      	pop	{r4, r7}
 8000f64:	4770      	bx	lr
	...

08000f68 <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	795b      	ldrb	r3, [r3, #5]
 8000f78:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000f7a:	e0e4      	b.n	8001146 <decodeHeader+0x1de>
        switch(header)
 8000f7c:	4b78      	ldr	r3, [pc, #480]	@ (8001160 <decodeHeader+0x1f8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	f200 80c9 	bhi.w	8001118 <decodeHeader+0x1b0>
 8000f86:	a201      	add	r2, pc, #4	@ (adr r2, 8000f8c <decodeHeader+0x24>)
 8000f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f8c:	08000fad 	.word	0x08000fad
 8000f90:	08000fc7 	.word	0x08000fc7
 8000f94:	08001005 	.word	0x08001005
 8000f98:	08001031 	.word	0x08001031
 8000f9c:	0800105d 	.word	0x0800105d
 8000fa0:	08001073 	.word	0x08001073
 8000fa4:	08001119 	.word	0x08001119
 8000fa8:	080010d5 	.word	0x080010d5
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	7912      	ldrb	r2, [r2, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b55      	cmp	r3, #85	@ 0x55
 8000fba:	f040 80b1 	bne.w	8001120 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8000fbe:	4b68      	ldr	r3, [pc, #416]	@ (8001160 <decodeHeader+0x1f8>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
                }
            break;
 8000fc4:	e0ac      	b.n	8001120 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7912      	ldrb	r2, [r2, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b4e      	cmp	r3, #78	@ 0x4e
 8000fd4:	d103      	bne.n	8000fde <decodeHeader+0x76>
                    header = HEADER_E;
 8000fd6:	4b62      	ldr	r3, [pc, #392]	@ (8001160 <decodeHeader+0x1f8>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8000fdc:	e0a2      	b.n	8001124 <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	7912      	ldrb	r2, [r2, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b55      	cmp	r3, #85	@ 0x55
 8000fec:	f000 809a 	beq.w	8001124 <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8000ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8001160 <decodeHeader+0x1f8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	791b      	ldrb	r3, [r3, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	711a      	strb	r2, [r3, #4]
            break;
 8001002:	e08f      	b.n	8001124 <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7912      	ldrb	r2, [r2, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b45      	cmp	r3, #69	@ 0x45
 8001012:	d103      	bne.n	800101c <decodeHeader+0xb4>
                    header = HEADER_R;
 8001014:	4b52      	ldr	r3, [pc, #328]	@ (8001160 <decodeHeader+0x1f8>)
 8001016:	2203      	movs	r2, #3
 8001018:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800101a:	e086      	b.n	800112a <decodeHeader+0x1c2>
                    header = HEADER_U;
 800101c:	4b50      	ldr	r3, [pc, #320]	@ (8001160 <decodeHeader+0x1f8>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	791b      	ldrb	r3, [r3, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	b2da      	uxtb	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	711a      	strb	r2, [r3, #4]
            break;
 800102e:	e07c      	b.n	800112a <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	7912      	ldrb	r2, [r2, #4]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b52      	cmp	r3, #82	@ 0x52
 800103e:	d103      	bne.n	8001048 <decodeHeader+0xe0>
                    header = NBYTES;
 8001040:	4b47      	ldr	r3, [pc, #284]	@ (8001160 <decodeHeader+0x1f8>)
 8001042:	2204      	movs	r2, #4
 8001044:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001046:	e070      	b.n	800112a <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001048:	4b45      	ldr	r3, [pc, #276]	@ (8001160 <decodeHeader+0x1f8>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	711a      	strb	r2, [r3, #4]
            break;
 800105a:	e066      	b.n	800112a <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	7912      	ldrb	r2, [r2, #4]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 800106a:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <decodeHeader+0x1f8>)
 800106c:	2205      	movs	r2, #5
 800106e:	701a      	strb	r2, [r3, #0]
            break;
 8001070:	e05b      	b.n	800112a <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	7912      	ldrb	r2, [r2, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001080:	d11e      	bne.n	80010c0 <decodeHeader+0x158>
                    header = PAYLOAD;
 8001082:	4b37      	ldr	r3, [pc, #220]	@ (8001160 <decodeHeader+0x1f8>)
 8001084:	2207      	movs	r2, #7
 8001086:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	791b      	ldrb	r3, [r3, #4]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7a1a      	ldrb	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	4013      	ands	r3, r2
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7a5a      	ldrb	r2, [r3, #9]
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	4053      	eors	r3, r2
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80010be:	e034      	b.n	800112a <decodeHeader+0x1c2>
                    header = HEADER_U;
 80010c0:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <decodeHeader+0x1f8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	791b      	ldrb	r3, [r3, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	711a      	strb	r2, [r3, #4]
            break;
 80010d2:	e02a      	b.n	800112a <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00c      	beq.n	80010fa <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7a5a      	ldrb	r2, [r3, #9]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	7909      	ldrb	r1, [r1, #4]
 80010ec:	440b      	add	r3, r1
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4053      	eors	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 80010f8:	e016      	b.n	8001128 <decodeHeader+0x1c0>
                    header = HEADER_U;
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <decodeHeader+0x1f8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	7912      	ldrb	r2, [r2, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a5b      	ldrb	r3, [r3, #9]
 8001110:	429a      	cmp	r2, r3
 8001112:	d109      	bne.n	8001128 <decodeHeader+0x1c0>
                        return TRUE;
 8001114:	2301      	movs	r3, #1
 8001116:	e01d      	b.n	8001154 <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <decodeHeader+0x1f8>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
            break;
 800111e:	e004      	b.n	800112a <decodeHeader+0x1c2>
            break;
 8001120:	bf00      	nop
 8001122:	e002      	b.n	800112a <decodeHeader+0x1c2>
            break;
 8001124:	bf00      	nop
 8001126:	e000      	b.n	800112a <decodeHeader+0x1c2>
            break;
 8001128:	bf00      	nop
        }
        dataRx->indexR++;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	791b      	ldrb	r3, [r3, #4]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	791a      	ldrb	r2, [r3, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	799b      	ldrb	r3, [r3, #6]
 800113e:	4013      	ands	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	791b      	ldrb	r3, [r3, #4]
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	429a      	cmp	r2, r3
 800114e:	f47f af15 	bne.w	8000f7c <decodeHeader+0x14>
    }
    return FALSE;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000593 	.word	0x20000593

08001164 <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2200      	movs	r2, #0
 800117c:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	22ff      	movs	r2, #255	@ 0xff
 8001194:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2200      	movs	r2, #0
 80011a6:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2200      	movs	r2, #0
 80011ac:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	2200      	movs	r2, #0
 80011b2:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2200      	movs	r2, #0
 80011b8:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	22ff      	movs	r2, #255	@ 0xff
 80011be:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2200      	movs	r2, #0
 80011c4:	725a      	strb	r2, [r3, #9]

}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 80011da:	f000 f91b 	bl	8001414 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 80011de:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80011e2:	2201      	movs	r2, #1
 80011e4:	2178      	movs	r1, #120	@ 0x78
 80011e6:	4858      	ldr	r0, [pc, #352]	@ (8001348 <SSD1306_Init+0x174>)
 80011e8:	f002 fbe0 	bl	80039ac <HAL_I2C_IsDeviceReady>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SSD1306_Init+0x22>
		return 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e0a4      	b.n	8001340 <SSD1306_Init+0x16c>
	}

	uint32_t p = 2500;
 80011f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80011fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011fc:	e002      	b.n	8001204 <SSD1306_Init+0x30>
		p--;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3b01      	subs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f9      	bne.n	80011fe <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE); // Comando para apagar la pantalla (Display OFF). Es común apagarla antes de reconfigurar.
 800120a:	22ae      	movs	r2, #174	@ 0xae
 800120c:	2100      	movs	r1, #0
 800120e:	2078      	movs	r0, #120	@ 0x78
 8001210:	f000 f934 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); // Configura el modo de direccionamiento de memoria.
 8001214:	2220      	movs	r2, #32
 8001216:	2100      	movs	r1, #0
 8001218:	2078      	movs	r0, #120	@ 0x78
 800121a:	f000 f92f 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x01); //  0x10 para modo de direccionamiento de página (Page Addressing Mode).
 800121e:	2201      	movs	r2, #1
 8001220:	2100      	movs	r1, #0
 8001222:	2078      	movs	r0, #120	@ 0x78
 8001224:	f000 f92a 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); // Establece la dirección de inicio de página para el modo de página (Set Page Start Address for Page Addressing Mode). (0xB0 a 0xB7)
 8001228:	22b0      	movs	r2, #176	@ 0xb0
 800122a:	2100      	movs	r1, #0
 800122c:	2078      	movs	r0, #120	@ 0x78
 800122e:	f000 f925 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); // Establece la dirección de salida de COM escaneada en modo remapeado (Set COM Output Scan Direction normal/remapped). 0xC0 es normal, 0xC8 es remapeado (invertido verticalmente).
 8001232:	22c8      	movs	r2, #200	@ 0xc8
 8001234:	2100      	movs	r1, #0
 8001236:	2078      	movs	r0, #120	@ 0x78
 8001238:	f000 f920 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); // Establece la columna baja de la dirección de inicio de la pantalla (Set Lower Column Start Address for Page Addressing Mode).
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2078      	movs	r0, #120	@ 0x78
 8001242:	f000 f91b 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); // Establece la columna alta de la dirección de inicio de la pantalla (Set Higher Column Start Address for Page Addressing Mode).
 8001246:	2210      	movs	r2, #16
 8001248:	2100      	movs	r1, #0
 800124a:	2078      	movs	r0, #120	@ 0x78
 800124c:	f000 f916 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); // Establece la línea de inicio de la pantalla (Set Display Start Line). (0x40 a 0x7F)
 8001250:	2240      	movs	r2, #64	@ 0x40
 8001252:	2100      	movs	r1, #0
 8001254:	2078      	movs	r0, #120	@ 0x78
 8001256:	f000 f911 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); // Comando para configurar el contraste.
 800125a:	2281      	movs	r2, #129	@ 0x81
 800125c:	2100      	movs	r1, #0
 800125e:	2078      	movs	r0, #120	@ 0x78
 8001260:	f000 f90c 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF); //   Valor de contraste (0x00 a 0xFF). 0xFF es el máximo contraste.
 8001264:	22ff      	movs	r2, #255	@ 0xff
 8001266:	2100      	movs	r1, #0
 8001268:	2078      	movs	r0, #120	@ 0x78
 800126a:	f000 f907 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); // Establece el remapeo del segmento (Set Segment Re-map). 0xA0 es normal, 0xA1 es remapeado (invertido horizontalmente).
 800126e:	22a1      	movs	r2, #161	@ 0xa1
 8001270:	2100      	movs	r1, #0
 8001272:	2078      	movs	r0, #120	@ 0x78
 8001274:	f000 f902 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); // Establece el modo de visualización normal/inverso. 0xA6 es normal (píxel encendido es luz), 0xA7 es inverso (píxel encendido es oscuro).
 8001278:	22a6      	movs	r2, #166	@ 0xa6
 800127a:	2100      	movs	r1, #0
 800127c:	2078      	movs	r0, #120	@ 0x78
 800127e:	f000 f8fd 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); // Comando para configurar el ratio de multiplexación.
 8001282:	22a8      	movs	r2, #168	@ 0xa8
 8001284:	2100      	movs	r1, #0
 8001286:	2078      	movs	r0, #120	@ 0x78
 8001288:	f000 f8f8 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //   Valor del ratio de multiplexación (de 16 a 63). 0x3F (63) es común para pantallas de 128x64.
 800128c:	223f      	movs	r2, #63	@ 0x3f
 800128e:	2100      	movs	r1, #0
 8001290:	2078      	movs	r0, #120	@ 0x78
 8001292:	f000 f8f3 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); // Reanuda la visualización siguiendo el contenido de la RAM (Entire Display ON from RAM). 0xA5 fuerza todos los píxeles a ON ignorando la RAM.
 8001296:	22a4      	movs	r2, #164	@ 0xa4
 8001298:	2100      	movs	r1, #0
 800129a:	2078      	movs	r0, #120	@ 0x78
 800129c:	f000 f8ee 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); // Comando para configurar el offset de la pantalla.
 80012a0:	22d3      	movs	r2, #211	@ 0xd3
 80012a2:	2100      	movs	r1, #0
 80012a4:	2078      	movs	r0, #120	@ 0x78
 80012a6:	f000 f8e9 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //   Valor del offset vertical (sin offset).
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2078      	movs	r0, #120	@ 0x78
 80012b0:	f000 f8e4 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); // Comando para configurar el reloj del oscilador y el factor de división.
 80012b4:	22d5      	movs	r2, #213	@ 0xd5
 80012b6:	2100      	movs	r1, #0
 80012b8:	2078      	movs	r0, #120	@ 0x78
 80012ba:	f000 f8df 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //   Valor sugerido por defecto. Divide la frecuencia del oscilador.
 80012be:	22f0      	movs	r2, #240	@ 0xf0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2078      	movs	r0, #120	@ 0x78
 80012c4:	f000 f8da 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); // Comando para configurar el período de pre-carga.
 80012c8:	22d9      	movs	r2, #217	@ 0xd9
 80012ca:	2100      	movs	r1, #0
 80012cc:	2078      	movs	r0, #120	@ 0x78
 80012ce:	f000 f8d5 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //   Fase 1 y Fase 2 del período.
 80012d2:	2222      	movs	r2, #34	@ 0x22
 80012d4:	2100      	movs	r1, #0
 80012d6:	2078      	movs	r0, #120	@ 0x78
 80012d8:	f000 f8d0 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); // Comando para configurar los pines COM.
 80012dc:	22da      	movs	r2, #218	@ 0xda
 80012de:	2100      	movs	r1, #0
 80012e0:	2078      	movs	r0, #120	@ 0x78
 80012e2:	f000 f8cb 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12); //   Configuración de hardware de los pines COM. Depende del tipo de pantalla.
 80012e6:	2212      	movs	r2, #18
 80012e8:	2100      	movs	r1, #0
 80012ea:	2078      	movs	r0, #120	@ 0x78
 80012ec:	f000 f8c6 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); // Comando para configurar el nivel de deselección de VCOMH.
 80012f0:	22db      	movs	r2, #219	@ 0xdb
 80012f2:	2100      	movs	r1, #0
 80012f4:	2078      	movs	r0, #120	@ 0x78
 80012f6:	f000 f8c1 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //   Valor del nivel de VCOMH. (aproximadamente 0.77 * Vcc)
 80012fa:	2220      	movs	r2, #32
 80012fc:	2100      	movs	r1, #0
 80012fe:	2078      	movs	r0, #120	@ 0x78
 8001300:	f000 f8bc 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); // Comando para la configuración de la bomba de carga.
 8001304:	228d      	movs	r2, #141	@ 0x8d
 8001306:	2100      	movs	r1, #0
 8001308:	2078      	movs	r0, #120	@ 0x78
 800130a:	f000 f8b7 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //   Habilita la bomba de carga (0x14 para encender, 0x10 para apagar). Es necesaria para generar el voltaje de la pantalla.
 800130e:	2214      	movs	r2, #20
 8001310:	2100      	movs	r1, #0
 8001312:	2078      	movs	r0, #120	@ 0x78
 8001314:	f000 f8b2 	bl	800147c <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); // Comando para encender la pantalla (Display ON).
 8001318:	22af      	movs	r2, #175	@ 0xaf
 800131a:	2100      	movs	r1, #0
 800131c:	2078      	movs	r0, #120	@ 0x78
 800131e:	f000 f8ad 	bl	800147c <SSD1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL); // Desactiva cualquier configuración de scroll que pudiera estar activa.
 8001322:	222e      	movs	r2, #46	@ 0x2e
 8001324:	2100      	movs	r1, #0
 8001326:	2078      	movs	r0, #120	@ 0x78
 8001328:	f000 f8a8 	bl	800147c <SSD1306_I2C_Write>


//	SSD1306_Fill(WHITE);
//	SSD1306_UpdateScreen();
	SSD1306.CurrentX = 0;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <SSD1306_Init+0x178>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SSD1306_Init+0x178>)
 8001334:	2200      	movs	r2, #0
 8001336:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <SSD1306_Init+0x178>)
 800133a:	2201      	movs	r2, #1
 800133c:	715a      	strb	r2, [r3, #5]
	return 1;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200001f8 	.word	0x200001f8
 800134c:	20000994 	.word	0x20000994

08001350 <SSD1306_UpdateScreen_NB>:
		SSD1306_WRITECOMMAND(0x10);
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
	}
}

void SSD1306_UpdateScreen_NB(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	if (SSD1306_TxCplt || state == 1) {
 8001354:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <SSD1306_UpdateScreen_NB+0xb4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d103      	bne.n	8001366 <SSD1306_UpdateScreen_NB+0x16>
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <SSD1306_UpdateScreen_NB+0xb8>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d14c      	bne.n	8001400 <SSD1306_UpdateScreen_NB+0xb0>
		SSD1306_TxCplt = 0;
 8001366:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <SSD1306_UpdateScreen_NB+0xb4>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]

		switch (state) {
 800136c:	4b26      	ldr	r3, [pc, #152]	@ (8001408 <SSD1306_UpdateScreen_NB+0xb8>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	3b01      	subs	r3, #1
 8001372:	2b03      	cmp	r3, #3
 8001374:	d844      	bhi.n	8001400 <SSD1306_UpdateScreen_NB+0xb0>
 8001376:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <SSD1306_UpdateScreen_NB+0x2c>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	0800138d 	.word	0x0800138d
 8001380:	080013a7 	.word	0x080013a7
 8001384:	080013b9 	.word	0x080013b9
 8001388:	080013cb 	.word	0x080013cb
		case 1:  // Setea la direccion de la pagina
			SSD1306_WRITECOMMAND_DMA(0xB0 + current_page);
 800138c:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <SSD1306_UpdateScreen_NB+0xbc>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	3b50      	subs	r3, #80	@ 0x50
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	@ 0x78
 800139a:	f000 f88d 	bl	80014b8 <SSD1306_I2C_Write_DMA>
			state = 2;
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <SSD1306_UpdateScreen_NB+0xb8>)
 80013a0:	2202      	movs	r2, #2
 80013a2:	701a      	strb	r2, [r3, #0]
			break;
 80013a4:	e02c      	b.n	8001400 <SSD1306_UpdateScreen_NB+0xb0>
		case 2:  // Setea nibble-bajo de la columna
			SSD1306_WRITECOMMAND_DMA(0x00);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2078      	movs	r0, #120	@ 0x78
 80013ac:	f000 f884 	bl	80014b8 <SSD1306_I2C_Write_DMA>
			state = 3;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <SSD1306_UpdateScreen_NB+0xb8>)
 80013b2:	2203      	movs	r2, #3
 80013b4:	701a      	strb	r2, [r3, #0]
			break;
 80013b6:	e023      	b.n	8001400 <SSD1306_UpdateScreen_NB+0xb0>
		case 3:  // Setea nibble-alto de la columna
			SSD1306_WRITECOMMAND_DMA(0x10);
 80013b8:	2210      	movs	r2, #16
 80013ba:	2100      	movs	r1, #0
 80013bc:	2078      	movs	r0, #120	@ 0x78
 80013be:	f000 f87b 	bl	80014b8 <SSD1306_I2C_Write_DMA>
			state = 4;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <SSD1306_UpdateScreen_NB+0xb8>)
 80013c4:	2204      	movs	r2, #4
 80013c6:	701a      	strb	r2, [r3, #0]
			break;
 80013c8:	e01a      	b.n	8001400 <SSD1306_UpdateScreen_NB+0xb0>
		case 4:  // Escribimos datos en la pagina
			SSD1306_I2C_WriteMulti_DMA(SSD1306_I2C_ADDR, 0x40,
					&SSD1306_Buffer[SSD1306_WIDTH * current_page],
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <SSD1306_UpdateScreen_NB+0xbc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	01db      	lsls	r3, r3, #7
			SSD1306_I2C_WriteMulti_DMA(SSD1306_I2C_ADDR, 0x40,
 80013d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <SSD1306_UpdateScreen_NB+0xc0>)
 80013d2:	441a      	add	r2, r3
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	2140      	movs	r1, #64	@ 0x40
 80013d8:	2078      	movs	r0, #120	@ 0x78
 80013da:	f000 f831 	bl	8001440 <SSD1306_I2C_WriteMulti_DMA>
					SSD1306_WIDTH);
			current_page++;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <SSD1306_UpdateScreen_NB+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <SSD1306_UpdateScreen_NB+0xbc>)
 80013e8:	701a      	strb	r2, [r3, #0]
			if (current_page > 7) {
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <SSD1306_UpdateScreen_NB+0xbc>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d902      	bls.n	80013f8 <SSD1306_UpdateScreen_NB+0xa8>
				current_page = 0;
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <SSD1306_UpdateScreen_NB+0xbc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
			}
			state = 1;
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <SSD1306_UpdateScreen_NB+0xb8>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
			break;
 80013fe:	bf00      	nop
		}
	}
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000591 	.word	0x20000591
 8001408:	2000002c 	.word	0x2000002c
 800140c:	2000099a 	.word	0x2000099a
 8001410:	20000594 	.word	0x20000594

08001414 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 800141a:	4b08      	ldr	r3, [pc, #32]	@ (800143c <SSD1306_I2C_Init+0x28>)
 800141c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800141e:	e002      	b.n	8001426 <SSD1306_I2C_Init+0x12>
		p--;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <SSD1306_I2C_Init+0xc>
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	0003d090 	.word	0x0003d090

08001440 <SSD1306_I2C_WriteMulti_DMA>:
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 20);
}


void SSD1306_I2C_WriteMulti_DMA(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
 8001446:	603a      	str	r2, [r7, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address, reg, 1, data, count);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	b299      	uxth	r1, r3
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	b29a      	uxth	r2, r3
 800145e:	88bb      	ldrh	r3, [r7, #4]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <SSD1306_I2C_WriteMulti_DMA+0x38>)
 800146a:	f002 f941 	bl	80036f0 <HAL_I2C_Mem_Write_DMA>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001f8 	.word	0x200001f8

0800147c <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	460b      	mov	r3, r1
 8001488:	71bb      	strb	r3, [r7, #6]
 800148a:	4613      	mov	r3, r2
 800148c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001492:	797b      	ldrb	r3, [r7, #5]
 8001494:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 20);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	b299      	uxth	r1, r3
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	2314      	movs	r3, #20
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <SSD1306_I2C_Write+0x38>)
 80014a6:	f002 f825 	bl	80034f4 <HAL_I2C_Master_Transmit>
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200001f8 	.word	0x200001f8

080014b8 <SSD1306_I2C_Write_DMA>:


void SSD1306_I2C_Write_DMA(uint8_t address, uint8_t reg, uint8_t data)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	460b      	mov	r3, r1
 80014c4:	71bb      	strb	r3, [r7, #6]
 80014c6:	4613      	mov	r3, r2
 80014c8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address, reg, 1, data, 1);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	b299      	uxth	r1, r3
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	797b      	ldrb	r3, [r7, #5]
 80014d4:	4618      	mov	r0, r3
 80014d6:	2301      	movs	r3, #1
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9000      	str	r0, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <SSD1306_I2C_Write_DMA+0x34>)
 80014e0:	f002 f906 	bl	80036f0 <HAL_I2C_Mem_Write_DMA>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001f8 	.word	0x200001f8

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <HAL_MspInit+0x4c>)
 8001500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001504:	6453      	str	r3, [r2, #68]	@ 0x44
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <HAL_MspInit+0x4c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_MspInit+0x4c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_MspInit+0x4c>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a32      	ldr	r2, [pc, #200]	@ (8001628 <HAL_ADC_MspInit+0xe8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d15e      	bne.n	8001620 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <HAL_ADC_MspInit+0xec>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156a:	4a30      	ldr	r2, [pc, #192]	@ (800162c <HAL_ADC_MspInit+0xec>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	6453      	str	r3, [r2, #68]	@ 0x44
 8001572:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <HAL_ADC_MspInit+0xec>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <HAL_ADC_MspInit+0xec>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a29      	ldr	r2, [pc, #164]	@ (800162c <HAL_ADC_MspInit+0xec>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <HAL_ADC_MspInit+0xec>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800159a:	23ff      	movs	r3, #255	@ 0xff
 800159c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800159e:	2303      	movs	r3, #3
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4820      	ldr	r0, [pc, #128]	@ (8001630 <HAL_ADC_MspInit+0xf0>)
 80015ae:	f001 fc8f 	bl	8002ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015b4:	4a20      	ldr	r2, [pc, #128]	@ (8001638 <HAL_ADC_MspInit+0xf8>)
 80015b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ee:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015f4:	480f      	ldr	r0, [pc, #60]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 80015f6:	f001 f8bf 	bl	8002778 <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001600:	f7ff fb8a 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 8001608:	639a      	str	r2, [r3, #56]	@ 0x38
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_ADC_MspInit+0xf4>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2012      	movs	r0, #18
 8001616:	f001 f878 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800161a:	2012      	movs	r0, #18
 800161c:	f001 f891 	bl	8002742 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	@ 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40012000 	.word	0x40012000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	20000198 	.word	0x20000198
 8001638:	40026410 	.word	0x40026410

0800163c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4f      	ldr	r2, [pc, #316]	@ (8001798 <HAL_I2C_MspInit+0x15c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	f040 8097 	bne.w	800178e <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	4b4d      	ldr	r3, [pc, #308]	@ (800179c <HAL_I2C_MspInit+0x160>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001668:	4a4c      	ldr	r2, [pc, #304]	@ (800179c <HAL_I2C_MspInit+0x160>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001670:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <HAL_I2C_MspInit+0x160>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167c:	23c0      	movs	r3, #192	@ 0xc0
 800167e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168c:	2304      	movs	r3, #4
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4842      	ldr	r0, [pc, #264]	@ (80017a0 <HAL_I2C_MspInit+0x164>)
 8001698:	f001 fc1a 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b3e      	ldr	r3, [pc, #248]	@ (800179c <HAL_I2C_MspInit+0x160>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a3d      	ldr	r2, [pc, #244]	@ (800179c <HAL_I2C_MspInit+0x160>)
 80016a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_I2C_MspInit+0x160>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016b8:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016ba:	4a3b      	ldr	r2, [pc, #236]	@ (80017a8 <HAL_I2C_MspInit+0x16c>)
 80016bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016be:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c6:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016cc:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d2:	4b34      	ldr	r3, [pc, #208]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016da:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e0:	4b30      	ldr	r3, [pc, #192]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016e6:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f2:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016f8:	482a      	ldr	r0, [pc, #168]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 80016fa:	f001 f83d 	bl	8002778 <HAL_DMA_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001704:	f7ff fb08 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 800170c:	639a      	str	r2, [r3, #56]	@ 0x38
 800170e:	4a25      	ldr	r2, [pc, #148]	@ (80017a4 <HAL_I2C_MspInit+0x168>)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001714:	4b25      	ldr	r3, [pc, #148]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001716:	4a26      	ldr	r2, [pc, #152]	@ (80017b0 <HAL_I2C_MspInit+0x174>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001720:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 800172e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001732:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001752:	4816      	ldr	r0, [pc, #88]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001754:	f001 f810 	bl	8002778 <HAL_DMA_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800175e:	f7ff fadb 	bl	8000d18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a11      	ldr	r2, [pc, #68]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34
 8001768:	4a10      	ldr	r2, [pc, #64]	@ (80017ac <HAL_I2C_MspInit+0x170>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	201f      	movs	r0, #31
 8001774:	f000 ffc9 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001778:	201f      	movs	r0, #31
 800177a:	f000 ffe2 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2020      	movs	r0, #32
 8001784:	f000 ffc1 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001788:	2020      	movs	r0, #32
 800178a:	f000 ffda 	bl	8002742 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40005400 	.word	0x40005400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400
 80017a4:	2000024c 	.word	0x2000024c
 80017a8:	40026010 	.word	0x40026010
 80017ac:	200002ac 	.word	0x200002ac
 80017b0:	40026028 	.word	0x40026028

080017b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <HAL_TIM_Base_MspInit+0x78>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12d      	bne.n	8001822 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <HAL_TIM_Base_MspInit+0x7c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a18      	ldr	r2, [pc, #96]	@ (8001830 <HAL_TIM_Base_MspInit+0x7c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <HAL_TIM_Base_MspInit+0x7c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2018      	movs	r0, #24
 80017e8:	f000 ff8f 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017ec:	2018      	movs	r0, #24
 80017ee:	f000 ffa8 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2019      	movs	r0, #25
 80017f8:	f000 ff87 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017fc:	2019      	movs	r0, #25
 80017fe:	f000 ffa0 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	201a      	movs	r0, #26
 8001808:	f000 ff7f 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800180c:	201a      	movs	r0, #26
 800180e:	f000 ff98 	bl	8002742 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	201b      	movs	r0, #27
 8001818:	f000 ff77 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800181c:	201b      	movs	r0, #27
 800181e:	f000 ff90 	bl	8002742 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40010000 	.word	0x40010000
 8001830:	40023800 	.word	0x40023800

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 f8ff 	bl	8001a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <DMA1_Stream0_IRQHandler+0x10>)
 800189a:	f001 f895 	bl	80029c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000024c 	.word	0x2000024c

080018a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <DMA1_Stream1_IRQHandler+0x10>)
 80018ae:	f001 f88b 	bl	80029c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200002ac 	.word	0x200002ac

080018bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <ADC_IRQHandler+0x10>)
 80018c2:	f000 f96a 	bl	8001b9a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000150 	.word	0x20000150

080018d0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80018d6:	f006 f9d9 	bl	8007c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000030c 	.word	0x2000030c

080018e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80018ea:	f006 f9cf 	bl	8007c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000030c 	.word	0x2000030c

080018f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80018fe:	f006 f9c5 	bl	8007c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000030c 	.word	0x2000030c

0800190c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <TIM1_CC_IRQHandler+0x10>)
 8001912:	f006 f9bb 	bl	8007c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000030c 	.word	0x2000030c

08001920 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <I2C1_EV_IRQHandler+0x10>)
 8001926:	f002 f96f 	bl	8003c08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200001f8 	.word	0x200001f8

08001934 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <I2C1_ER_IRQHandler+0x10>)
 800193a:	f002 fad6 	bl	8003eea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200001f8 	.word	0x200001f8

08001948 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA2_Stream0_IRQHandler+0x10>)
 800194e:	f001 f83b 	bl	80029c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000198 	.word	0x20000198

0800195c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <OTG_FS_IRQHandler+0x10>)
 8001962:	f004 fb8f 	bl	8006084 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20001284 	.word	0x20001284

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	@ (80019d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019c2:	f00a fe7b 	bl	800c6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7fe ff11 	bl	80007ec <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 80019d8:	0800c7a4 	.word	0x0800c7a4
  ldr r2, =_sbss
 80019dc:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 80019e0:	20001988 	.word	0x20001988

080019e4 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <DMA1_Stream2_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 fe6f 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	200f      	movs	r0, #15
 8001a18:	f000 f808 	bl	8001a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fd68 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_InitTick+0x54>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_InitTick+0x58>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fe87 	bl	800275e <HAL_SYSTICK_Config>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00e      	b.n	8001a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d80a      	bhi.n	8001a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a60:	2200      	movs	r2, #0
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f000 fe4f 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a6c:	4a06      	ldr	r2, [pc, #24]	@ (8001a88 <HAL_InitTick+0x5c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000030 	.word	0x20000030
 8001a84:	20000038 	.word	0x20000038
 8001a88:	20000034 	.word	0x20000034

08001a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_IncTick+0x20>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <HAL_IncTick+0x24>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <HAL_IncTick+0x24>)
 8001a9e:	6013      	str	r3, [r2, #0]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000038 	.word	0x20000038
 8001ab0:	2000099c 	.word	0x2000099c

08001ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <HAL_GetTick+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2000099c 	.word	0x2000099c

08001acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff ffee 	bl	8001ab4 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d005      	beq.n	8001af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <HAL_Delay+0x44>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4413      	add	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001af2:	bf00      	nop
 8001af4:	f7ff ffde 	bl	8001ab4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d8f7      	bhi.n	8001af4 <HAL_Delay+0x28>
  {
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000038 	.word	0x20000038

08001b14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e033      	b.n	8001b92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fd04 	bl	8001540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b5a:	f023 0302 	bic.w	r3, r3, #2
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fb6c 	bl	8002244 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b82:	e001      	b.n	8001b88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d049      	beq.n	8001c64 <HAL_ADC_IRQHandler+0xca>
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d046      	beq.n	8001c64 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d105      	bne.n	8001bee <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d12b      	bne.n	8001c54 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d127      	bne.n	8001c54 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d006      	beq.n	8001c20 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d119      	bne.n	8001c54 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0220 	bic.w	r2, r2, #32
 8001c2e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7fe fc55 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0212 	mvn.w	r2, #18
 8001c62:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c72:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d057      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x190>
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d054      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d105      	bne.n	8001c98 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d139      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cac:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12b      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d124      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11d      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d119      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cf4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fc10 	bl	8002540 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 020c 	mvn.w	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x1d6>
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d014      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10d      	bne.n	8001d70 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f929 	bl	8001fb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 0201 	mvn.w	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d7e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d015      	beq.n	8001db2 <HAL_ADC_IRQHandler+0x218>
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d012      	beq.n	8001db2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0220 	mvn.w	r2, #32
 8001da0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f912 	bl	8001fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0220 	mvn.w	r2, #32
 8001db0:	601a      	str	r2, [r3, #0]
  }
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_ADC_Start_DMA+0x22>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e0d0      	b.n	8001f80 <HAL_ADC_Start_DMA+0x1c4>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d018      	beq.n	8001e26 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e04:	4b60      	ldr	r3, [pc, #384]	@ (8001f88 <HAL_ADC_Start_DMA+0x1cc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a60      	ldr	r2, [pc, #384]	@ (8001f8c <HAL_ADC_Start_DMA+0x1d0>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0c9a      	lsrs	r2, r3, #18
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e34:	d107      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e44:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	f040 8088 	bne.w	8001f66 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e94:	d106      	bne.n	8001ea4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f023 0206 	bic.w	r2, r3, #6
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb2:	4b37      	ldr	r3, [pc, #220]	@ (8001f90 <HAL_ADC_Start_DMA+0x1d4>)
 8001eb4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eba:	4a36      	ldr	r2, [pc, #216]	@ (8001f94 <HAL_ADC_Start_DMA+0x1d8>)
 8001ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec2:	4a35      	ldr	r2, [pc, #212]	@ (8001f98 <HAL_ADC_Start_DMA+0x1dc>)
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eca:	4a34      	ldr	r2, [pc, #208]	@ (8001f9c <HAL_ADC_Start_DMA+0x1e0>)
 8001ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ed6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001ee6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	334c      	adds	r3, #76	@ 0x4c
 8001f02:	4619      	mov	r1, r3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f000 fce4 	bl	80028d4 <HAL_DMA_Start_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10f      	bne.n	8001f3c <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d129      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e020      	b.n	8001f7e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_ADC_Start_DMA+0x1e4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11b      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x1c2>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d114      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	e00b      	b.n	8001f7e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000030 	.word	0x20000030
 8001f8c:	431bde83 	.word	0x431bde83
 8001f90:	40012300 	.word	0x40012300
 8001f94:	0800243d 	.word	0x0800243d
 8001f98:	080024f7 	.word	0x080024f7
 8001f9c:	08002513 	.word	0x08002513
 8001fa0:	40012000 	.word	0x40012000

08001fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e113      	b.n	8002224 <HAL_ADC_ConfigChannel+0x244>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b09      	cmp	r3, #9
 800200a:	d925      	bls.n	8002058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68d9      	ldr	r1, [r3, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	2207      	movs	r2, #7
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43da      	mvns	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	400a      	ands	r2, r1
 8002030:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68d9      	ldr	r1, [r3, #12]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	4618      	mov	r0, r3
 8002044:	4603      	mov	r3, r0
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4403      	add	r3, r0
 800204a:	3b1e      	subs	r3, #30
 800204c:	409a      	lsls	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	e022      	b.n	800209e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	2207      	movs	r2, #7
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43da      	mvns	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	400a      	ands	r2, r1
 800207a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	4603      	mov	r3, r0
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4403      	add	r3, r0
 8002094:	409a      	lsls	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d824      	bhi.n	80020f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b05      	subs	r3, #5
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b05      	subs	r3, #5
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ee:	e04c      	b.n	800218a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	d824      	bhi.n	8002142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b23      	subs	r3, #35	@ 0x23
 800210a:	221f      	movs	r2, #31
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43da      	mvns	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	400a      	ands	r2, r1
 8002118:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	4618      	mov	r0, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b23      	subs	r3, #35	@ 0x23
 8002134:	fa00 f203 	lsl.w	r2, r0, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002140:	e023      	b.n	800218a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3b41      	subs	r3, #65	@ 0x41
 8002154:	221f      	movs	r2, #31
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	400a      	ands	r2, r1
 8002162:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	4618      	mov	r0, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b41      	subs	r3, #65	@ 0x41
 800217e:	fa00 f203 	lsl.w	r2, r0, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218a:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <HAL_ADC_ConfigChannel+0x250>)
 800218c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a28      	ldr	r2, [pc, #160]	@ (8002234 <HAL_ADC_ConfigChannel+0x254>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d10f      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b12      	cmp	r3, #18
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002234 <HAL_ADC_ConfigChannel+0x254>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d12b      	bne.n	800221a <HAL_ADC_ConfigChannel+0x23a>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_ADC_ConfigChannel+0x258>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d003      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x1f4>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b11      	cmp	r3, #17
 80021d2:	d122      	bne.n	800221a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_ADC_ConfigChannel+0x258>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d111      	bne.n	800221a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_ADC_ConfigChannel+0x25c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <HAL_ADC_ConfigChannel+0x260>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9a      	lsrs	r2, r3, #18
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800220c:	e002      	b.n	8002214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	3b01      	subs	r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1f9      	bne.n	800220e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40012300 	.word	0x40012300
 8002234:	40012000 	.word	0x40012000
 8002238:	10000012 	.word	0x10000012
 800223c:	20000030 	.word	0x20000030
 8002240:	431bde83 	.word	0x431bde83

08002244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224c:	4b79      	ldr	r3, [pc, #484]	@ (8002434 <ADC_Init+0x1f0>)
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	431a      	orrs	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	021a      	lsls	r2, r3, #8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800229c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6899      	ldr	r1, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d6:	4a58      	ldr	r2, [pc, #352]	@ (8002438 <ADC_Init+0x1f4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d022      	beq.n	8002322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800230c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e00f      	b.n	8002342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002340:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0202 	bic.w	r2, r2, #2
 8002350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e1b      	ldrb	r3, [r3, #24]
 800235c:	005a      	lsls	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800237e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800238e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6859      	ldr	r1, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	3b01      	subs	r3, #1
 800239c:	035a      	lsls	r2, r3, #13
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e007      	b.n	80023b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	051a      	lsls	r2, r3, #20
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023fa:	025a      	lsls	r2, r3, #9
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	029a      	lsls	r2, r3, #10
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40012300 	.word	0x40012300
 8002438:	0f000001 	.word	0x0f000001

0800243c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002448:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002452:	2b00      	cmp	r3, #0
 8002454:	d13c      	bne.n	80024d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d12b      	bne.n	80024c8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002474:	2b00      	cmp	r3, #0
 8002476:	d127      	bne.n	80024c8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002490:	2b00      	cmp	r3, #0
 8002492:	d119      	bne.n	80024c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0220 	bic.w	r2, r2, #32
 80024a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0201 	orr.w	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7fe f81b 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024ce:	e00e      	b.n	80024ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fd75 	bl	8001fcc <HAL_ADC_ErrorCallback>
}
 80024e2:	e004      	b.n	80024ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	4798      	blx	r3
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002502:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f7ff fd4d 	bl	8001fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2240      	movs	r2, #64	@ 0x40
 8002524:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	f043 0204 	orr.w	r2, r3, #4
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff fd4a 	bl	8001fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002538:	bf00      	nop
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	@ (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	@ (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	@ (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	@ (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	@ 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	@ 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	@ (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff f996 	bl	8001ab4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e099      	b.n	80028c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027b4:	e00f      	b.n	80027d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027b6:	f7ff f97d 	bl	8001ab4 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d908      	bls.n	80027d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e078      	b.n	80028c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e8      	bne.n	80027b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_DMA_Init+0x158>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	2b04      	cmp	r3, #4
 800282e:	d107      	bne.n	8002840 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002838:	4313      	orrs	r3, r2
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0307 	bic.w	r3, r3, #7
 8002856:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002866:	2b04      	cmp	r3, #4
 8002868:	d117      	bne.n	800289a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 faab 	bl	8002dd8 <DMA_CheckFifoParam>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2240      	movs	r2, #64	@ 0x40
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002896:	2301      	movs	r3, #1
 8002898:	e016      	b.n	80028c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fa62 	bl	8002d6c <DMA_CalcBaseAndBitshift>
 80028a8:	4603      	mov	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	223f      	movs	r2, #63	@ 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	f010803f 	.word	0xf010803f

080028d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Start_IT+0x26>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e040      	b.n	800297c <HAL_DMA_Start_IT+0xa8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d12f      	bne.n	800296e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2202      	movs	r2, #2
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f9f4 	bl	8002d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	223f      	movs	r2, #63	@ 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0216 	orr.w	r2, r2, #22
 8002942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e005      	b.n	800297a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800297a:	7dfb      	ldrb	r3, [r7, #23]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d004      	beq.n	80029a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e00c      	b.n	80029bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2205      	movs	r2, #5
 80029a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c10 <HAL_DMA_IRQHandler+0x248>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002c14 <HAL_DMA_IRQHandler+0x24c>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0a9b      	lsrs	r3, r3, #10
 80029e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f2:	2208      	movs	r2, #8
 80029f4:	409a      	lsls	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d01a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0204 	bic.w	r2, r2, #4
 8002a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	2208      	movs	r2, #8
 8002a22:	409a      	lsls	r2, r3
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a38:	2201      	movs	r2, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d012      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a56:	2201      	movs	r2, #1
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	2204      	movs	r2, #4
 8002a70:	409a      	lsls	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00b      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d043      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03c      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d018      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d108      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
 8002af6:	e01f      	b.n	8002b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01b      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
 8002b08:	e016      	b.n	8002b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0208 	bic.w	r2, r2, #8
 8002b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 808f 	beq.w	8002c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 8087 	beq.w	8002c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5e:	2220      	movs	r2, #32
 8002b60:	409a      	lsls	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d136      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0216 	bic.w	r2, r2, #22
 8002b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <HAL_DMA_IRQHandler+0x1da>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb6:	223f      	movs	r2, #63	@ 0x3f
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d07e      	beq.n	8002cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
        }
        return;
 8002bde:	e079      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d01d      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10d      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d031      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e02c      	b.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
 8002c0e:	bf00      	nop
 8002c10:	20000030 	.word	0x20000030
 8002c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
 8002c28:	e01e      	b.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10f      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0210 	bic.w	r2, r2, #16
 8002c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d032      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d022      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2205      	movs	r2, #5
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d307      	bcc.n	8002cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f2      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x2cc>
 8002cae:	e000      	b.n	8002cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	4798      	blx	r3
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cd4:	bf00      	nop
    }
  }
}
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cea:	b2db      	uxtb	r3, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b40      	cmp	r3, #64	@ 0x40
 8002d3c:	d108      	bne.n	8002d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d4e:	e007      	b.n	8002d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3b10      	subs	r3, #16
 8002d7c:	4a14      	ldr	r2, [pc, #80]	@ (8002dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	091b      	lsrs	r3, r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d909      	bls.n	8002dae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	1d1a      	adds	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dac:	e007      	b.n	8002dbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	aaaaaaab 	.word	0xaaaaaaab
 8002dd4:	0800c78c 	.word	0x0800c78c

08002dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d11f      	bne.n	8002e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d856      	bhi.n	8002ea6 <DMA_CheckFifoParam+0xce>
 8002df8:	a201      	add	r2, pc, #4	@ (adr r2, 8002e00 <DMA_CheckFifoParam+0x28>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e23 	.word	0x08002e23
 8002e08:	08002e11 	.word	0x08002e11
 8002e0c:	08002ea7 	.word	0x08002ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d046      	beq.n	8002eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e20:	e043      	b.n	8002eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e2a:	d140      	bne.n	8002eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e30:	e03d      	b.n	8002eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e3a:	d121      	bne.n	8002e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d837      	bhi.n	8002eb2 <DMA_CheckFifoParam+0xda>
 8002e42:	a201      	add	r2, pc, #4	@ (adr r2, 8002e48 <DMA_CheckFifoParam+0x70>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e5f 	.word	0x08002e5f
 8002e50:	08002e59 	.word	0x08002e59
 8002e54:	08002e71 	.word	0x08002e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5c:	e030      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d025      	beq.n	8002eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6e:	e022      	b.n	8002eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e78:	d11f      	bne.n	8002eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e7e:	e01c      	b.n	8002eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d903      	bls.n	8002e8e <DMA_CheckFifoParam+0xb6>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d003      	beq.n	8002e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e8c:	e018      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      break;
 8002e92:	e015      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e00b      	b.n	8002ebe <DMA_CheckFifoParam+0xe6>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e00a      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e008      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e006      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e004      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e002      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e159      	b.n	80031a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eec:	2201      	movs	r2, #1
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f040 8148 	bne.w	800319a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d005      	beq.n	8002f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d130      	bne.n	8002f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 0201 	and.w	r2, r3, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d017      	beq.n	8002fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	2203      	movs	r2, #3
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d123      	bne.n	8003014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	08da      	lsrs	r2, r3, #3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3208      	adds	r2, #8
 8002fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	08da      	lsrs	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3208      	adds	r2, #8
 800300e:	69b9      	ldr	r1, [r7, #24]
 8003010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 80a2 	beq.w	800319a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b57      	ldr	r3, [pc, #348]	@ (80031b8 <HAL_GPIO_Init+0x2e8>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	4a56      	ldr	r2, [pc, #344]	@ (80031b8 <HAL_GPIO_Init+0x2e8>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003064:	6453      	str	r3, [r2, #68]	@ 0x44
 8003066:	4b54      	ldr	r3, [pc, #336]	@ (80031b8 <HAL_GPIO_Init+0x2e8>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003072:	4a52      	ldr	r2, [pc, #328]	@ (80031bc <HAL_GPIO_Init+0x2ec>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a49      	ldr	r2, [pc, #292]	@ (80031c0 <HAL_GPIO_Init+0x2f0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d019      	beq.n	80030d2 <HAL_GPIO_Init+0x202>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a48      	ldr	r2, [pc, #288]	@ (80031c4 <HAL_GPIO_Init+0x2f4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_GPIO_Init+0x1fe>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a47      	ldr	r2, [pc, #284]	@ (80031c8 <HAL_GPIO_Init+0x2f8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00d      	beq.n	80030ca <HAL_GPIO_Init+0x1fa>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a46      	ldr	r2, [pc, #280]	@ (80031cc <HAL_GPIO_Init+0x2fc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <HAL_GPIO_Init+0x1f6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a45      	ldr	r2, [pc, #276]	@ (80031d0 <HAL_GPIO_Init+0x300>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <HAL_GPIO_Init+0x1f2>
 80030be:	2304      	movs	r3, #4
 80030c0:	e008      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030c2:	2307      	movs	r3, #7
 80030c4:	e006      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e004      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e002      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_GPIO_Init+0x204>
 80030d2:	2300      	movs	r3, #0
 80030d4:	69fa      	ldr	r2, [r7, #28]
 80030d6:	f002 0203 	and.w	r2, r2, #3
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	4093      	lsls	r3, r2
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e4:	4935      	ldr	r1, [pc, #212]	@ (80031bc <HAL_GPIO_Init+0x2ec>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030f2:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003116:	4a2f      	ldr	r2, [pc, #188]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800311c:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003140:	4a24      	ldr	r2, [pc, #144]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003146:	4b23      	ldr	r3, [pc, #140]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800316a:	4a1a      	ldr	r2, [pc, #104]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003170:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003194:	4a0f      	ldr	r2, [pc, #60]	@ (80031d4 <HAL_GPIO_Init+0x304>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3301      	adds	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	f67f aea2 	bls.w	8002eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3724      	adds	r7, #36	@ 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40013800 	.word	0x40013800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40020400 	.word	0x40020400
 80031c8:	40020800 	.word	0x40020800
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40013c00 	.word	0x40013c00

080031d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e8:	787b      	ldrb	r3, [r7, #1]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f4:	e003      	b.n	80031fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031f6:	887b      	ldrh	r3, [r7, #2]
 80031f8:	041a      	lsls	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	619a      	str	r2, [r3, #24]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800320a:	b480      	push	{r7}
 800320c:	b085      	sub	sp, #20
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800321c:	887a      	ldrh	r2, [r7, #2]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	041a      	lsls	r2, r3, #16
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43d9      	mvns	r1, r3
 8003228:	887b      	ldrh	r3, [r7, #2]
 800322a:	400b      	ands	r3, r1
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12b      	b.n	80034aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe f9e8 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	@ 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a4:	f004 fc2c 	bl	8007b00 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a81      	ldr	r2, [pc, #516]	@ (80034b4 <HAL_I2C_Init+0x274>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <HAL_I2C_Init+0x84>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a80      	ldr	r2, [pc, #512]	@ (80034b8 <HAL_I2C_Init+0x278>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e006      	b.n	80032d2 <HAL_I2C_Init+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a7d      	ldr	r2, [pc, #500]	@ (80034bc <HAL_I2C_Init+0x27c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e7      	b.n	80034aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a78      	ldr	r2, [pc, #480]	@ (80034c0 <HAL_I2C_Init+0x280>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a6a      	ldr	r2, [pc, #424]	@ (80034b4 <HAL_I2C_Init+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <HAL_I2C_Init+0xd4>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	e009      	b.n	8003328 <HAL_I2C_Init+0xe8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a69      	ldr	r2, [pc, #420]	@ (80034c4 <HAL_I2C_Init+0x284>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800333a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	495c      	ldr	r1, [pc, #368]	@ (80034b4 <HAL_I2C_Init+0x274>)
 8003344:	428b      	cmp	r3, r1
 8003346:	d819      	bhi.n	800337c <HAL_I2C_Init+0x13c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e59      	subs	r1, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fbb1 f3f3 	udiv	r3, r1, r3
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800335c:	400b      	ands	r3, r1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_I2C_Init+0x138>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e59      	subs	r1, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	e051      	b.n	800341c <HAL_I2C_Init+0x1dc>
 8003378:	2304      	movs	r3, #4
 800337a:	e04f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_I2C_Init+0x168>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_I2C_Init+0x18e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x196>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e022      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10e      	bne.n	80033fc <HAL_I2C_Init+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e58      	subs	r0, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	440b      	add	r3, r1
 80033ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033fa:	e00f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800344a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6911      	ldr	r1, [r2, #16]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68d2      	ldr	r2, [r2, #12]
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	000186a0 	.word	0x000186a0
 80034b8:	001e847f 	.word	0x001e847f
 80034bc:	003d08ff 	.word	0x003d08ff
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	10624dd3 	.word	0x10624dd3

080034c8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034da:	2b80      	cmp	r3, #128	@ 0x80
 80034dc:	d103      	bne.n	80034e6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]
  }
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	461a      	mov	r2, r3
 8003500:	460b      	mov	r3, r1
 8003502:	817b      	strh	r3, [r7, #10]
 8003504:	4613      	mov	r3, r2
 8003506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7fe fad4 	bl	8001ab4 <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b20      	cmp	r3, #32
 8003518:	f040 80e0 	bne.w	80036dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2319      	movs	r3, #25
 8003522:	2201      	movs	r2, #1
 8003524:	4970      	ldr	r1, [pc, #448]	@ (80036e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f002 fa42 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
 8003534:	e0d3      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_I2C_Master_Transmit+0x50>
 8003540:	2302      	movs	r3, #2
 8003542:	e0cc      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ea>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d007      	beq.n	800356a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2221      	movs	r2, #33	@ 0x21
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2210      	movs	r2, #16
 8003586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	893a      	ldrh	r2, [r7, #8]
 800359a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4a50      	ldr	r2, [pc, #320]	@ (80036ec <HAL_I2C_Master_Transmit+0x1f8>)
 80035aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035ac:	8979      	ldrh	r1, [r7, #10]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f001 ff20 	bl	80053f8 <I2C_MasterRequestWrite>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e08d      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035d8:	e066      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	6a39      	ldr	r1, [r7, #32]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f002 fb00 	bl	8005be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d107      	bne.n	8003602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06b      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d11b      	bne.n	800367c <HAL_I2C_Master_Transmit+0x188>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	6a39      	ldr	r1, [r7, #32]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f002 faf7 	bl	8005c74 <I2C_WaitOnBTFFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00d      	beq.n	80036a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	2b04      	cmp	r3, #4
 8003692:	d107      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e01a      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d194      	bne.n	80035da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	00100002 	.word	0x00100002
 80036ec:	ffff0000 	.word	0xffff0000

080036f0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	@ 0x28
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370e:	f7fe f9d1 	bl	8001ab4 <HAL_GetTick>
 8003712:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 8136 	bne.w	800398e <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003722:	4b9d      	ldr	r3, [pc, #628]	@ (8003998 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	08db      	lsrs	r3, r3, #3
 8003728:	4a9c      	ldr	r2, [pc, #624]	@ (800399c <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	0a1a      	lsrs	r2, r3, #8
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009a      	lsls	r2, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3b01      	subs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d112      	bne.n	800376e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
 800376c:	e110      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d0df      	beq.n	800373c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_I2C_Mem_Write_DMA+0x9a>
 8003786:	2302      	movs	r3, #2
 8003788:	e102      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b01      	cmp	r3, #1
 800379e:	d007      	beq.n	80037b0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2221      	movs	r2, #33	@ 0x21
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2240      	movs	r2, #64	@ 0x40
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a6c      	ldr	r2, [pc, #432]	@ (80039a0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80037f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80037f2:	897a      	ldrh	r2, [r7, #10]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80a9 	beq.w	8003966 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003818:	2b00      	cmp	r3, #0
 800381a:	d02a      	beq.n	8003872 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	4a60      	ldr	r2, [pc, #384]	@ (80039a4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8003822:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	4a5f      	ldr	r2, [pc, #380]	@ (80039a8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800382a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003830:	2200      	movs	r2, #0
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003840:	2200      	movs	r2, #0
 8003842:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	2200      	movs	r2, #0
 800384a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	4619      	mov	r1, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3310      	adds	r3, #16
 800385c:	461a      	mov	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	f7ff f837 	bl	80028d4 <HAL_DMA_Start_IT>
 8003866:	4603      	mov	r3, r0
 8003868:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800386a:	7efb      	ldrb	r3, [r7, #27]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d166      	bne.n	800393e <HAL_I2C_Mem_Write_DMA+0x24e>
 8003870:	e013      	b.n	800389a <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07a      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800389a:	88f8      	ldrh	r0, [r7, #6]
 800389c:	893a      	ldrh	r2, [r7, #8]
 800389e:	8979      	ldrh	r1, [r7, #10]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2323      	movs	r3, #35	@ 0x23
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	4603      	mov	r3, r0
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f001 fe26 	bl	80054fc <I2C_RequestMemoryWrite>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d022      	beq.n	80038fc <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff f862 	bl	8002984 <HAL_DMA_Abort_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	2200      	movs	r2, #0
 80038ca:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038da:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e049      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003928:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003938:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e028      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e014      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000030 	.word	0x20000030
 800399c:	14f8b589 	.word	0x14f8b589
 80039a0:	ffff0000 	.word	0xffff0000
 80039a4:	08005629 	.word	0x08005629
 80039a8:	080057e7 	.word	0x080057e7

080039ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	@ 0x28
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	460b      	mov	r3, r1
 80039ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039bc:	f7fe f87a 	bl	8001ab4 <HAL_GetTick>
 80039c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f040 8111 	bne.w	8003bf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2319      	movs	r3, #25
 80039da:	2201      	movs	r2, #1
 80039dc:	4988      	ldr	r1, [pc, #544]	@ (8003c00 <HAL_I2C_IsDeviceReady+0x254>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f001 ffe6 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
 80039ec:	e104      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_I2C_IsDeviceReady+0x50>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0fd      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d007      	beq.n	8003a22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2224      	movs	r2, #36	@ 0x24
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a70      	ldr	r2, [pc, #448]	@ (8003c04 <HAL_I2C_IsDeviceReady+0x258>)
 8003a44:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f001 ffa4 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7c:	d103      	bne.n	8003a86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0b6      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a8a:	897b      	ldrh	r3, [r7, #10]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe f80b 	bl	8001ab4 <HAL_GetTick>
 8003a9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2301      	moveq	r3, #1
 8003ac8:	2300      	movne	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ace:	e025      	b.n	8003b1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ad0:	f7fd fff0 	bl	8001ab4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <HAL_I2C_IsDeviceReady+0x13a>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	22a0      	movs	r2, #160	@ 0xa0
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b26:	d005      	beq.n	8003b34 <HAL_I2C_IsDeviceReady+0x188>
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_I2C_IsDeviceReady+0x188>
 8003b2e:	7dbb      	ldrb	r3, [r7, #22]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0cd      	beq.n	8003ad0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d129      	bne.n	8003b9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2319      	movs	r3, #25
 8003b76:	2201      	movs	r2, #1
 8003b78:	4921      	ldr	r1, [pc, #132]	@ (8003c00 <HAL_I2C_IsDeviceReady+0x254>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f001 ff18 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e036      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e02c      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2319      	movs	r3, #25
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	490f      	ldr	r1, [pc, #60]	@ (8003c00 <HAL_I2C_IsDeviceReady+0x254>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f001 fef4 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e012      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	f4ff af32 	bcc.w	8003a46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000

08003c08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d003      	beq.n	8003c40 <HAL_I2C_EV_IRQHandler+0x38>
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	f040 80c1 	bne.w	8003dc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003c60:	d003      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0x62>
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c68:	d101      	bne.n	8003c6e <HAL_I2C_EV_IRQHandler+0x66>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <HAL_I2C_EV_IRQHandler+0x68>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	f000 8132 	beq.w	8003eda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00c      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x92>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	0a5b      	lsrs	r3, r3, #9
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f002 f89a 	bl	8005dc6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fd91 	bl	80047ba <I2C_Master_SB>
 8003c98:	e092      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	08db      	lsrs	r3, r3, #3
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0xb2>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	0a5b      	lsrs	r3, r3, #9
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fe07 	bl	80048c6 <I2C_Master_ADD10>
 8003cb8:	e082      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0xd2>
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	0a5b      	lsrs	r3, r3, #9
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fe21 	bl	800491a <I2C_Master_ADDR>
 8003cd8:	e072      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03b      	beq.n	8003d5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf4:	f000 80f3 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	09db      	lsrs	r3, r3, #7
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	0a9b      	lsrs	r3, r3, #10
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f9e9 	bl	80040f4 <I2C_MasterTransmit_TXE>
 8003d22:	e04d      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80d6 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	0a5b      	lsrs	r3, r3, #9
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80cf 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d40:	7bbb      	ldrb	r3, [r7, #14]
 8003d42:	2b21      	cmp	r3, #33	@ 0x21
 8003d44:	d103      	bne.n	8003d4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fa70 	bl	800422c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d4c:	e0c7      	b.n	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b40      	cmp	r3, #64	@ 0x40
 8003d52:	f040 80c4 	bne.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fade 	bl	8004318 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d5c:	e0bf      	b.n	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d6c:	f000 80b7 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00f      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x194>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	0a9b      	lsrs	r3, r3, #10
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d009      	beq.n	8003d9c <HAL_I2C_EV_IRQHandler+0x194>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d103      	bne.n	8003d9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb57 	bl	8004448 <I2C_MasterReceive_RXNE>
 8003d9a:	e011      	b.n	8003dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 809a 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8093 	beq.w	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fc0d 	bl	80045d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dbe:	e08e      	b.n	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8003dc0:	e08d      	b.n	8003ede <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	e007      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d012      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x20e>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	0a5b      	lsrs	r3, r3, #9
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00c      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ffd2 	bl	8004db8 <I2C_Slave_ADDR>
 8003e14:	e066      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_I2C_EV_IRQHandler+0x22e>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	0a5b      	lsrs	r3, r3, #9
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 f80c 	bl	8004e4c <I2C_Slave_STOPF>
 8003e34:	e056      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e36:	7bbb      	ldrb	r3, [r7, #14]
 8003e38:	2b21      	cmp	r3, #33	@ 0x21
 8003e3a:	d002      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x23a>
 8003e3c:	7bbb      	ldrb	r3, [r7, #14]
 8003e3e:	2b29      	cmp	r3, #41	@ 0x29
 8003e40:	d125      	bne.n	8003e8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	09db      	lsrs	r3, r3, #7
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00f      	beq.n	8003e6e <HAL_I2C_EV_IRQHandler+0x266>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	0a9b      	lsrs	r3, r3, #10
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_I2C_EV_IRQHandler+0x266>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fee8 	bl	8004c3c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6c:	e039      	b.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d033      	beq.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	0a5b      	lsrs	r3, r3, #9
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d02d      	beq.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 ff15 	bl	8004cb6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8c:	e029      	b.n	8003ee2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00f      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	0a9b      	lsrs	r3, r3, #10
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d103      	bne.n	8003eba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 ff20 	bl	8004cf8 <I2C_SlaveReceive_RXNE>
 8003eb8:	e014      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 ff4e 	bl	8004d74 <I2C_SlaveReceive_BTF>
 8003ed8:	e004      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003eda:	bf00      	nop
 8003edc:	e002      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ee4:	3720      	adds	r7, #32
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b08a      	sub	sp, #40	@ 0x28
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00e      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x4e>
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d008      	beq.n	8003f38 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	0a5b      	lsrs	r3, r3, #9
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <HAL_I2C_ER_IRQHandler+0x78>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	f043 0302 	orr.w	r3, r3, #2
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003f60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	0a9b      	lsrs	r3, r3, #10
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d03f      	beq.n	8003fee <HAL_I2C_ER_IRQHandler+0x104>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d039      	beq.n	8003fee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003f7a:	7efb      	ldrb	r3, [r7, #27]
 8003f7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f94:	7ebb      	ldrb	r3, [r7, #26]
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d112      	bne.n	8003fc0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10f      	bne.n	8003fc0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b21      	cmp	r3, #33	@ 0x21
 8003fa4:	d008      	beq.n	8003fb8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	2b29      	cmp	r3, #41	@ 0x29
 8003faa:	d005      	beq.n	8003fb8 <HAL_I2C_ER_IRQHandler+0xce>
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b28      	cmp	r3, #40	@ 0x28
 8003fb0:	d106      	bne.n	8003fc0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b21      	cmp	r3, #33	@ 0x21
 8003fb6:	d103      	bne.n	8003fc0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f001 f877 	bl	80050ac <I2C_Slave_AF>
 8003fbe:	e016      	b.n	8003fee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fc8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fd2:	7efb      	ldrb	r3, [r7, #27]
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d002      	beq.n	8003fde <HAL_I2C_ER_IRQHandler+0xf4>
 8003fd8:	7efb      	ldrb	r3, [r7, #27]
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d107      	bne.n	8003fee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	0adb      	lsrs	r3, r3, #11
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00e      	beq.n	8004018 <HAL_I2C_ER_IRQHandler+0x12e>
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004016:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f001 f8b2 	bl	8005194 <I2C_ITError>
  }
}
 8004030:	bf00      	nop
 8004032:	3728      	adds	r7, #40	@ 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
 8004094:	4613      	mov	r3, r2
 8004096:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004102:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800410a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d150      	bne.n	80041bc <I2C_MasterTransmit_TXE+0xc8>
 800411a:	7bfb      	ldrb	r3, [r7, #15]
 800411c:	2b21      	cmp	r3, #33	@ 0x21
 800411e:	d14d      	bne.n	80041bc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b08      	cmp	r3, #8
 8004124:	d01d      	beq.n	8004162 <I2C_MasterTransmit_TXE+0x6e>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b20      	cmp	r3, #32
 800412a:	d01a      	beq.n	8004162 <I2C_MasterTransmit_TXE+0x6e>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004132:	d016      	beq.n	8004162 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004142:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2211      	movs	r2, #17
 8004148:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff6c 	bl	8004038 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004160:	e060      	b.n	8004224 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004170:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004180:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b40      	cmp	r3, #64	@ 0x40
 800419a:	d107      	bne.n	80041ac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7fc f9cd 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041aa:	e03b      	b.n	8004224 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff ff3f 	bl	8004038 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041ba:	e033      	b.n	8004224 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b21      	cmp	r3, #33	@ 0x21
 80041c0:	d005      	beq.n	80041ce <I2C_MasterTransmit_TXE+0xda>
 80041c2:	7bbb      	ldrb	r3, [r7, #14]
 80041c4:	2b40      	cmp	r3, #64	@ 0x40
 80041c6:	d12d      	bne.n	8004224 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b22      	cmp	r3, #34	@ 0x22
 80041cc:	d12a      	bne.n	8004224 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d108      	bne.n	80041ea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041e8:	e01c      	b.n	8004224 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b40      	cmp	r3, #64	@ 0x40
 80041f4:	d103      	bne.n	80041fe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f88e 	bl	8004318 <I2C_MemoryTransmit_TXE_BTF>
}
 80041fc:	e012      	b.n	8004224 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004222:	e7ff      	b.n	8004224 <I2C_MasterTransmit_TXE+0x130>
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b21      	cmp	r3, #33	@ 0x21
 8004244:	d164      	bne.n	8004310 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004274:	e04c      	b.n	8004310 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d01d      	beq.n	80042b8 <I2C_MasterTransmit_BTF+0x8c>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b20      	cmp	r3, #32
 8004280:	d01a      	beq.n	80042b8 <I2C_MasterTransmit_BTF+0x8c>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004288:	d016      	beq.n	80042b8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004298:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2211      	movs	r2, #17
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fec1 	bl	8004038 <HAL_I2C_MasterTxCpltCallback>
}
 80042b6:	e02b      	b.n	8004310 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042c6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b40      	cmp	r3, #64	@ 0x40
 80042f0:	d107      	bne.n	8004302 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc f922 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 8004300:	e006      	b.n	8004310 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fe94 	bl	8004038 <HAL_I2C_MasterTxCpltCallback>
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004326:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11d      	bne.n	800436c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10b      	bne.n	8004350 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433c:	b2da      	uxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800434e:	e077      	b.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004354:	b29b      	uxth	r3, r3
 8004356:	121b      	asrs	r3, r3, #8
 8004358:	b2da      	uxtb	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800436a:	e069      	b.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10b      	bne.n	800438c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004378:	b2da      	uxtb	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800438a:	e059      	b.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004390:	2b02      	cmp	r3, #2
 8004392:	d152      	bne.n	800443a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b22      	cmp	r3, #34	@ 0x22
 8004398:	d10d      	bne.n	80043b6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043b4:	e044      	b.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d015      	beq.n	80043ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b21      	cmp	r3, #33	@ 0x21
 80043c4:	d112      	bne.n	80043ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043ea:	e029      	b.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d124      	bne.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	2b21      	cmp	r3, #33	@ 0x21
 80043fa:	d121      	bne.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800440a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc f886 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 8004438:	e002      	b.n	8004440 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff f844 	bl	80034c8 <I2C_Flush_DR>
}
 8004440:	bf00      	nop
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b22      	cmp	r3, #34	@ 0x22
 800445a:	f040 80b9 	bne.w	80045d0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d921      	bls.n	80044b6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b03      	cmp	r3, #3
 80044a0:	f040 8096 	bne.w	80045d0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044b4:	e08c      	b.n	80045d0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d07f      	beq.n	80045be <I2C_MasterReceive_RXNE+0x176>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <I2C_MasterReceive_RXNE+0x82>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d179      	bne.n	80045be <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f001 fc1a 	bl	8005d04 <I2C_WaitOnSTOPRequestThroughIT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d14c      	bne.n	8004570 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b40      	cmp	r3, #64	@ 0x40
 800452e:	d10a      	bne.n	8004546 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fdba 	bl	80040b8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004544:	e044      	b.n	80045d0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b08      	cmp	r3, #8
 8004552:	d002      	beq.n	800455a <I2C_MasterReceive_RXNE+0x112>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b20      	cmp	r3, #32
 8004558:	d103      	bne.n	8004562 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004560:	e002      	b.n	8004568 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2212      	movs	r2, #18
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff fd6f 	bl	800404c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800456e:	e02f      	b.n	80045d0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800457e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fd88 	bl	80040cc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045bc:	e008      	b.n	80045d0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045cc:	605a      	str	r2, [r3, #4]
}
 80045ce:	e7ff      	b.n	80045d0 <I2C_MasterReceive_RXNE+0x188>
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d11b      	bne.n	8004628 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004626:	e0c4      	b.n	80047b2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b03      	cmp	r3, #3
 8004630:	d129      	bne.n	8004686 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004640:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b04      	cmp	r3, #4
 8004646:	d00a      	beq.n	800465e <I2C_MasterReceive_BTF+0x86>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d007      	beq.n	800465e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004684:	e095      	b.n	80047b2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d17d      	bne.n	800478c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d002      	beq.n	800469c <I2C_MasterReceive_BTF+0xc4>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b10      	cmp	r3, #16
 800469a:	d108      	bne.n	80046ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e016      	b.n	80046dc <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d002      	beq.n	80046ba <I2C_MasterReceive_BTF+0xe2>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d108      	bne.n	80046cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	e007      	b.n	80046dc <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004736:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d10a      	bne.n	8004762 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fcac 	bl	80040b8 <HAL_I2C_MemRxCpltCallback>
}
 8004760:	e027      	b.n	80047b2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b08      	cmp	r3, #8
 800476e:	d002      	beq.n	8004776 <I2C_MasterReceive_BTF+0x19e>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b20      	cmp	r3, #32
 8004774:	d103      	bne.n	800477e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
 800477c:	e002      	b.n	8004784 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2212      	movs	r2, #18
 8004782:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff fc61 	bl	800404c <HAL_I2C_MasterRxCpltCallback>
}
 800478a:	e012      	b.n	80047b2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d117      	bne.n	80047fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047e8:	e067      	b.n	80048ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	611a      	str	r2, [r3, #16]
}
 80047fc:	e05d      	b.n	80048ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004806:	d133      	bne.n	8004870 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b21      	cmp	r3, #33	@ 0x21
 8004812:	d109      	bne.n	8004828 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004824:	611a      	str	r2, [r3, #16]
 8004826:	e008      	b.n	800483a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <I2C_Master_SB+0x92>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d108      	bne.n	800485e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	2b00      	cmp	r3, #0
 8004852:	d032      	beq.n	80048ba <I2C_Master_SB+0x100>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d02d      	beq.n	80048ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486c:	605a      	str	r2, [r3, #4]
}
 800486e:	e024      	b.n	80048ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10e      	bne.n	8004896 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	b29b      	uxth	r3, r3
 800487e:	11db      	asrs	r3, r3, #7
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0306 	and.w	r3, r3, #6
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f063 030f 	orn	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]
}
 8004894:	e011      	b.n	80048ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10d      	bne.n	80048ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	11db      	asrs	r3, r3, #7
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 0306 	and.w	r3, r3, #6
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f063 030e 	orn	r3, r3, #14
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	611a      	str	r2, [r3, #16]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <I2C_Master_ADD10+0x26>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <I2C_Master_ADD10+0x48>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490c:	605a      	str	r2, [r3, #4]
  }
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800491a:	b480      	push	{r7}
 800491c:	b091      	sub	sp, #68	@ 0x44
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004928:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b22      	cmp	r3, #34	@ 0x22
 8004942:	f040 8169 	bne.w	8004c18 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10f      	bne.n	800496e <I2C_Master_ADDR+0x54>
 800494e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d10b      	bne.n	800496e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	633b      	str	r3, [r7, #48]	@ 0x30
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	633b      	str	r3, [r7, #48]	@ 0x30
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	633b      	str	r3, [r7, #48]	@ 0x30
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	e160      	b.n	8004c30 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <I2C_Master_ADDR+0x98>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800497e:	d118      	bne.n	80049b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b0:	e13e      	b.n	8004c30 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d113      	bne.n	80049e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049bc:	2300      	movs	r3, #0
 80049be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e115      	b.n	8004c10 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	f040 808a 	bne.w	8004b04 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049f6:	d137      	bne.n	8004a68 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a06:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a16:	d113      	bne.n	8004a40 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a26:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	e0e7      	b.n	8004c10 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a40:	2300      	movs	r3, #0
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e0d3      	b.n	8004c10 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d02e      	beq.n	8004acc <I2C_Master_ADDR+0x1b2>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d02b      	beq.n	8004acc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a76:	2b12      	cmp	r3, #18
 8004a78:	d102      	bne.n	8004a80 <I2C_Master_ADDR+0x166>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d125      	bne.n	8004acc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d00e      	beq.n	8004aa4 <I2C_Master_ADDR+0x18a>
 8004a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d00b      	beq.n	8004aa4 <I2C_Master_ADDR+0x18a>
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d008      	beq.n	8004aa4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	e007      	b.n	8004ab4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ab2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	e0a1      	b.n	8004c10 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ada:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004adc:	2300      	movs	r3, #0
 8004ade:	61bb      	str	r3, [r7, #24]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e085      	b.n	8004c10 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d14d      	bne.n	8004baa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d016      	beq.n	8004b42 <I2C_Master_ADDR+0x228>
 8004b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d013      	beq.n	8004b42 <I2C_Master_ADDR+0x228>
 8004b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d010      	beq.n	8004b42 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e007      	b.n	8004b52 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b50:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b60:	d117      	bne.n	8004b92 <I2C_Master_ADDR+0x278>
 8004b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b68:	d00b      	beq.n	8004b82 <I2C_Master_ADDR+0x268>
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d008      	beq.n	8004b82 <I2C_Master_ADDR+0x268>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d005      	beq.n	8004b82 <I2C_Master_ADDR+0x268>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d002      	beq.n	8004b82 <I2C_Master_ADDR+0x268>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d107      	bne.n	8004b92 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	e032      	b.n	8004c10 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc8:	d117      	bne.n	8004bfa <I2C_Master_ADDR+0x2e0>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bd0:	d00b      	beq.n	8004bea <I2C_Master_ADDR+0x2d0>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d008      	beq.n	8004bea <I2C_Master_ADDR+0x2d0>
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d005      	beq.n	8004bea <I2C_Master_ADDR+0x2d0>
 8004bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be0:	2b10      	cmp	r3, #16
 8004be2:	d002      	beq.n	8004bea <I2C_Master_ADDR+0x2d0>
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d107      	bne.n	8004bfa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bf8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c16:	e00b      	b.n	8004c30 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
}
 8004c2e:	e7ff      	b.n	8004c30 <I2C_Master_ADDR+0x316>
 8004c30:	bf00      	nop
 8004c32:	3744      	adds	r7, #68	@ 0x44
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d02b      	beq.n	8004cae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d114      	bne.n	8004cae <I2C_SlaveTransmit_TXE+0x72>
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	2b29      	cmp	r3, #41	@ 0x29
 8004c88:	d111      	bne.n	8004cae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c98:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2221      	movs	r2, #33	@ 0x21
 8004c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2228      	movs	r2, #40	@ 0x28
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff f9d9 	bl	8004060 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d011      	beq.n	8004cec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02c      	beq.n	8004d6c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d114      	bne.n	8004d6c <I2C_SlaveReceive_RXNE+0x74>
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d46:	d111      	bne.n	8004d6c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d56:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2222      	movs	r2, #34	@ 0x22
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2228      	movs	r2, #40	@ 0x28
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff f984 	bl	8004074 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d012      	beq.n	8004dac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dd2:	2b28      	cmp	r3, #40	@ 0x28
 8004dd4:	d127      	bne.n	8004e26 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	09db      	lsrs	r3, r3, #7
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	81bb      	strh	r3, [r7, #12]
 8004e08:	e002      	b.n	8004e10 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e18:	89ba      	ldrh	r2, [r7, #12]
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff f932 	bl	8004088 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e24:	e00e      	b.n	8004e44 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea8:	d172      	bne.n	8004f90 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b22      	cmp	r3, #34	@ 0x22
 8004eae:	d002      	beq.n	8004eb6 <I2C_Slave_STOPF+0x6a>
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb4:	d135      	bne.n	8004f22 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f043 0204 	orr.w	r2, r3, #4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd fef4 	bl	8002cdc <HAL_DMA_GetState>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d049      	beq.n	8004f8e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	4a69      	ldr	r2, [pc, #420]	@ (80050a4 <I2C_Slave_STOPF+0x258>)
 8004f00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd fd3c 	bl	8002984 <HAL_DMA_Abort_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d03d      	beq.n	8004f8e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f20:	e035      	b.n	8004f8e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	f043 0204 	orr.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd febe 	bl	8002cdc <HAL_DMA_GetState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d014      	beq.n	8004f90 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80050a4 <I2C_Slave_STOPF+0x258>)
 8004f6c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd fd06 	bl	8002984 <HAL_DMA_Abort_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
 8004f8c:	e000      	b.n	8004f90 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d03e      	beq.n	8005018 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d112      	bne.n	8004fce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b40      	cmp	r3, #64	@ 0x40
 8004fda:	d112      	bne.n	8005002 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f043 0204 	orr.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f8b7 	bl	8005194 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005026:	e039      	b.n	800509c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b2a      	cmp	r3, #42	@ 0x2a
 800502c:	d109      	bne.n	8005042 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2228      	movs	r2, #40	@ 0x28
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff f819 	bl	8004074 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b28      	cmp	r3, #40	@ 0x28
 800504c:	d111      	bne.n	8005072 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a15      	ldr	r2, [pc, #84]	@ (80050a8 <I2C_Slave_STOPF+0x25c>)
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff f81a 	bl	80040a4 <HAL_I2C_ListenCpltCallback>
}
 8005070:	e014      	b.n	800509c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	2b22      	cmp	r3, #34	@ 0x22
 8005078:	d002      	beq.n	8005080 <I2C_Slave_STOPF+0x234>
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b22      	cmp	r3, #34	@ 0x22
 800507e:	d10d      	bne.n	800509c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe ffec 	bl	8004074 <HAL_I2C_SlaveRxCpltCallback>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08005861 	.word	0x08005861
 80050a8:	ffff0000 	.word	0xffff0000

080050ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d002      	beq.n	80050ce <I2C_Slave_AF+0x22>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d129      	bne.n	8005122 <I2C_Slave_AF+0x76>
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b28      	cmp	r3, #40	@ 0x28
 80050d2:	d126      	bne.n	8005122 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <I2C_Slave_AF+0xe4>)
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005102:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe ffc2 	bl	80040a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005120:	e031      	b.n	8005186 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b21      	cmp	r3, #33	@ 0x21
 8005126:	d129      	bne.n	800517c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <I2C_Slave_AF+0xe4>)
 800512c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2221      	movs	r2, #33	@ 0x21
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005152:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800515c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fe f9aa 	bl	80034c8 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe ff73 	bl	8004060 <HAL_I2C_SlaveTxCpltCallback>
}
 800517a:	e004      	b.n	8005186 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005184:	615a      	str	r2, [r3, #20]
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	ffff0000 	.word	0xffff0000

08005194 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d002      	beq.n	80051b8 <I2C_ITError+0x24>
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d10a      	bne.n	80051ce <I2C_ITError+0x3a>
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b22      	cmp	r3, #34	@ 0x22
 80051bc:	d107      	bne.n	80051ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051d4:	2b28      	cmp	r3, #40	@ 0x28
 80051d6:	d107      	bne.n	80051e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2228      	movs	r2, #40	@ 0x28
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051e6:	e015      	b.n	8005214 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f6:	d00a      	beq.n	800520e <I2C_ITError+0x7a>
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b60      	cmp	r3, #96	@ 0x60
 80051fc:	d007      	beq.n	800520e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005222:	d162      	bne.n	80052ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005232:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d020      	beq.n	8005284 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005246:	4a6a      	ldr	r2, [pc, #424]	@ (80053f0 <I2C_ITError+0x25c>)
 8005248:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fb98 	bl	8002984 <HAL_DMA_Abort_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8089 	beq.w	800536e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800527e:	4610      	mov	r0, r2
 8005280:	4798      	blx	r3
 8005282:	e074      	b.n	800536e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	4a59      	ldr	r2, [pc, #356]	@ (80053f0 <I2C_ITError+0x25c>)
 800528a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	4618      	mov	r0, r3
 8005292:	f7fd fb77 	bl	8002984 <HAL_DMA_Abort_IT>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d068      	beq.n	800536e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d10b      	bne.n	80052c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	e041      	b.n	800536e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b60      	cmp	r3, #96	@ 0x60
 80052f4:	d125      	bne.n	8005342 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	d10b      	bne.n	800532a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fe fed0 	bl	80040e0 <HAL_I2C_AbortCpltCallback>
 8005340:	e015      	b.n	800536e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d10b      	bne.n	8005368 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe feaf 	bl	80040cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10e      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d113      	bne.n	80053e8 <I2C_ITError+0x254>
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b28      	cmp	r3, #40	@ 0x28
 80053c4:	d110      	bne.n	80053e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <I2C_ITError+0x260>)
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fe5e 	bl	80040a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08005861 	.word	0x08005861
 80053f4:	ffff0000 	.word	0xffff0000

080053f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	460b      	mov	r3, r1
 8005406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d006      	beq.n	8005422 <I2C_MasterRequestWrite+0x2a>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d003      	beq.n	8005422 <I2C_MasterRequestWrite+0x2a>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005420:	d108      	bne.n	8005434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e00b      	b.n	800544c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005438:	2b12      	cmp	r3, #18
 800543a:	d107      	bne.n	800544c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800544a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 faa9 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005472:	d103      	bne.n	800547c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800547a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e035      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005488:	d108      	bne.n	800549c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800548a:	897b      	ldrh	r3, [r7, #10]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005498:	611a      	str	r2, [r3, #16]
 800549a:	e01b      	b.n	80054d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800549c:	897b      	ldrh	r3, [r7, #10]
 800549e:	11db      	asrs	r3, r3, #7
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0306 	and.w	r3, r3, #6
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f063 030f 	orn	r3, r3, #15
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	490e      	ldr	r1, [pc, #56]	@ (80054f4 <I2C_MasterRequestWrite+0xfc>)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 faf2 	bl	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e010      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4907      	ldr	r1, [pc, #28]	@ (80054f8 <I2C_MasterRequestWrite+0x100>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fae2 	bl	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	00010008 	.word	0x00010008
 80054f8:	00010002 	.word	0x00010002

080054fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4603      	mov	r3, r0
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	460b      	mov	r3, r1
 8005510:	813b      	strh	r3, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2200      	movs	r2, #0
 800552e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fa3c 	bl	80059b0 <I2C_WaitOnFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554c:	d103      	bne.n	8005556 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005554:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e05f      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	492d      	ldr	r1, [pc, #180]	@ (8005624 <I2C_RequestMemoryWrite+0x128>)
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fa97 	bl	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e04c      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005598:	6a39      	ldr	r1, [r7, #32]
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fb22 	bl	8005be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00d      	beq.n	80055c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d107      	bne.n	80055be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e02b      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d105      	bne.n	80055d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c8:	893b      	ldrh	r3, [r7, #8]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	611a      	str	r2, [r3, #16]
 80055d2:	e021      	b.n	8005618 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055d4:	893b      	ldrh	r3, [r7, #8]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e4:	6a39      	ldr	r1, [r7, #32]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fafc 	bl	8005be4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d107      	bne.n	800560a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e005      	b.n	800561a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800560e:	893b      	ldrh	r3, [r7, #8]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	00010002 	.word	0x00010002

08005628 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005644:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800565a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005668:	2200      	movs	r2, #0
 800566a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	2200      	movs	r2, #0
 800567a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005682:	2b21      	cmp	r3, #33	@ 0x21
 8005684:	d007      	beq.n	8005696 <I2C_DMAXferCplt+0x6e>
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800568c:	2b22      	cmp	r3, #34	@ 0x22
 800568e:	d131      	bne.n	80056f4 <I2C_DMAXferCplt+0xcc>
 8005690:	7cbb      	ldrb	r3, [r7, #18]
 8005692:	2b20      	cmp	r3, #32
 8005694:	d12e      	bne.n	80056f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	2b29      	cmp	r3, #41	@ 0x29
 80056b0:	d10a      	bne.n	80056c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2221      	movs	r2, #33	@ 0x21
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2228      	movs	r2, #40	@ 0x28
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056c0:	6978      	ldr	r0, [r7, #20]
 80056c2:	f7fe fccd 	bl	8004060 <HAL_I2C_SlaveTxCpltCallback>
 80056c6:	e00c      	b.n	80056e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80056cc:	d109      	bne.n	80056e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2222      	movs	r2, #34	@ 0x22
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2228      	movs	r2, #40	@ 0x28
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056dc:	6978      	ldr	r0, [r7, #20]
 80056de:	f7fe fcc9 	bl	8004074 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80056f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056f2:	e074      	b.n	80057de <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d06e      	beq.n	80057de <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d107      	bne.n	800571a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005718:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005728:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005730:	d009      	beq.n	8005746 <I2C_DMAXferCplt+0x11e>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d006      	beq.n	8005746 <I2C_DMAXferCplt+0x11e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800573e:	d002      	beq.n	8005746 <I2C_DMAXferCplt+0x11e>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b20      	cmp	r3, #32
 8005744:	d107      	bne.n	8005756 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005754:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005764:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005774:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2200      	movs	r2, #0
 800577a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005784:	6978      	ldr	r0, [r7, #20]
 8005786:	f7fe fca1 	bl	80040cc <HAL_I2C_ErrorCallback>
}
 800578a:	e028      	b.n	80057de <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b40      	cmp	r3, #64	@ 0x40
 800579e:	d10a      	bne.n	80057b6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2200      	movs	r2, #0
 80057ac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80057ae:	6978      	ldr	r0, [r7, #20]
 80057b0:	f7fe fc82 	bl	80040b8 <HAL_I2C_MemRxCpltCallback>
}
 80057b4:	e013      	b.n	80057de <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d002      	beq.n	80057ca <I2C_DMAXferCplt+0x1a2>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d103      	bne.n	80057d2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80057d0:	e002      	b.n	80057d8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2212      	movs	r2, #18
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80057d8:	6978      	ldr	r0, [r7, #20]
 80057da:	f7fe fc37 	bl	800404c <HAL_I2C_MasterRxCpltCallback>
}
 80057de:	bf00      	nop
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d003      	beq.n	8005804 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	2200      	movs	r2, #0
 8005802:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	2200      	movs	r2, #0
 8005812:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7fd fa6f 	bl	8002cf8 <HAL_DMA_GetError>
 800581a:	4603      	mov	r3, r0
 800581c:	2b02      	cmp	r3, #2
 800581e:	d01b      	beq.n	8005858 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	f043 0210 	orr.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7fe fc3a 	bl	80040cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005878:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800587a:	4b4b      	ldr	r3, [pc, #300]	@ (80059a8 <I2C_DMAAbort+0x148>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	08db      	lsrs	r3, r3, #3
 8005880:	4a4a      	ldr	r2, [pc, #296]	@ (80059ac <I2C_DMAAbort+0x14c>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	0a1a      	lsrs	r2, r3, #8
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	00da      	lsls	r2, r3, #3
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80058a6:	e00a      	b.n	80058be <I2C_DMAAbort+0x5e>
    }
    count--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058bc:	d0ea      	beq.n	8005894 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	2200      	movs	r2, #0
 80058cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	2200      	movs	r2, #0
 80058dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005900:	2200      	movs	r2, #0
 8005902:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	2200      	movs	r2, #0
 8005912:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0201 	bic.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b60      	cmp	r3, #96	@ 0x60
 800592e:	d10e      	bne.n	800594e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005946:	6978      	ldr	r0, [r7, #20]
 8005948:	f7fe fbca 	bl	80040e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800594c:	e027      	b.n	800599e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800594e:	7cfb      	ldrb	r3, [r7, #19]
 8005950:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005954:	2b28      	cmp	r3, #40	@ 0x28
 8005956:	d117      	bne.n	8005988 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005976:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2200      	movs	r2, #0
 800597c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2228      	movs	r2, #40	@ 0x28
 8005982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005986:	e007      	b.n	8005998 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005998:	6978      	ldr	r0, [r7, #20]
 800599a:	f7fe fb97 	bl	80040cc <HAL_I2C_ErrorCallback>
}
 800599e:	bf00      	nop
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000030 	.word	0x20000030
 80059ac:	14f8b589 	.word	0x14f8b589

080059b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	603b      	str	r3, [r7, #0]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c0:	e048      	b.n	8005a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d044      	beq.n	8005a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ca:	f7fc f873 	bl	8001ab4 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d139      	bne.n	8005a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	0c1b      	lsrs	r3, r3, #16
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d10d      	bne.n	8005a06 <I2C_WaitOnFlagUntilTimeout+0x56>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	43da      	mvns	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4013      	ands	r3, r2
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	e00c      	b.n	8005a20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	43da      	mvns	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4013      	ands	r3, r2
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	79fb      	ldrb	r3, [r7, #7]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d116      	bne.n	8005a54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e023      	b.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10d      	bne.n	8005a7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	43da      	mvns	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	e00c      	b.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	43da      	mvns	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4013      	ands	r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf0c      	ite	eq
 8005a8c:	2301      	moveq	r3, #1
 8005a8e:	2300      	movne	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d093      	beq.n	80059c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ab2:	e071      	b.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac2:	d123      	bne.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005adc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	f043 0204 	orr.w	r2, r3, #4
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e067      	b.n	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d041      	beq.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b14:	f7fb ffce 	bl	8001ab4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d302      	bcc.n	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d136      	bne.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d10c      	bne.n	8005b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bf14      	ite	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	2300      	moveq	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	e00b      	b.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	43da      	mvns	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e021      	b.n	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d10c      	bne.n	8005bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	43da      	mvns	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4013      	ands	r3, r2
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e00b      	b.n	8005bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f af6d 	bne.w	8005ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf0:	e034      	b.n	8005c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 f8b8 	bl	8005d68 <I2C_IsAcknowledgeFailed>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e034      	b.n	8005c6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d028      	beq.n	8005c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7fb ff53 	bl	8001ab4 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11d      	bne.n	8005c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b80      	cmp	r3, #128	@ 0x80
 8005c2c:	d016      	beq.n	8005c5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e007      	b.n	8005c6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c66:	2b80      	cmp	r3, #128	@ 0x80
 8005c68:	d1c3      	bne.n	8005bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c80:	e034      	b.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f870 	bl	8005d68 <I2C_IsAcknowledgeFailed>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e034      	b.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d028      	beq.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c9a:	f7fb ff0b 	bl	8001ab4 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11d      	bne.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d016      	beq.n	8005cec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd8:	f043 0220 	orr.w	r2, r3, #32
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e007      	b.n	8005cfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d1c3      	bne.n	8005c82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d10:	4b13      	ldr	r3, [pc, #76]	@ (8005d60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	08db      	lsrs	r3, r3, #3
 8005d16:	4a13      	ldr	r2, [pc, #76]	@ (8005d64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	0a1a      	lsrs	r2, r3, #8
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	f043 0220 	orr.w	r2, r3, #32
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e008      	b.n	8005d54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d50:	d0e9      	beq.n	8005d26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	20000030 	.word	0x20000030
 8005d64:	14f8b589 	.word	0x14f8b589

08005d68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d7e:	d11b      	bne.n	8005db8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	f043 0204 	orr.w	r2, r3, #4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b083      	sub	sp, #12
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005dd6:	d103      	bne.n	8005de0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dde:	e007      	b.n	8005df0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005de8:	d102      	bne.n	8005df0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2208      	movs	r2, #8
 8005dee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b086      	sub	sp, #24
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e101      	b.n	8006012 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f006 f935 	bl	800c098 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2203      	movs	r2, #3
 8005e32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e3c:	d102      	bne.n	8005e44 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f002 fc8c 	bl	8008766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7c1a      	ldrb	r2, [r3, #16]
 8005e56:	f88d 2000 	strb.w	r2, [sp]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e5e:	f002 fb6b 	bl	8008538 <USB_CoreInit>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0ce      	b.n	8006012 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f002 fc84 	bl	8008788 <USB_SetCurrentMode>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e0bf      	b.n	8006012 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	e04a      	b.n	8005f2e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	3315      	adds	r3, #21
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	3314      	adds	r3, #20
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ec0:	7bfa      	ldrb	r2, [r7, #15]
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	b298      	uxth	r0, r3
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	332e      	adds	r3, #46	@ 0x2e
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ed8:	7bfa      	ldrb	r2, [r7, #15]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005eec:	7bfa      	ldrb	r2, [r7, #15]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	331c      	adds	r3, #28
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3320      	adds	r3, #32
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	00db      	lsls	r3, r3, #3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3324      	adds	r3, #36	@ 0x24
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	791b      	ldrb	r3, [r3, #4]
 8005f32:	7bfa      	ldrb	r2, [r7, #15]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d3af      	bcc.n	8005e98 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	73fb      	strb	r3, [r7, #15]
 8005f3c:	e044      	b.n	8005fc8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f3e:	7bfa      	ldrb	r2, [r7, #15]
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	440b      	add	r3, r1
 8005f4c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f6a:	7bfa      	ldrb	r2, [r7, #15]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f80:	7bfa      	ldrb	r2, [r7, #15]
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fac:	7bfa      	ldrb	r2, [r7, #15]
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	73fb      	strb	r3, [r7, #15]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	791b      	ldrb	r3, [r3, #4]
 8005fcc:	7bfa      	ldrb	r2, [r7, #15]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d3b5      	bcc.n	8005f3e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6818      	ldr	r0, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	7c1a      	ldrb	r2, [r3, #16]
 8005fda:	f88d 2000 	strb.w	r2, [sp]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fe2:	f002 fc1d 	bl	8008820 <USB_DevInit>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e00c      	b.n	8006012 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f003 fc67 	bl	80098de <USB_DevDisconnect>

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_PCD_Start+0x1c>
 8006032:	2302      	movs	r3, #2
 8006034:	e022      	b.n	800607c <HAL_PCD_Start+0x62>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d009      	beq.n	800605e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800604e:	2b01      	cmp	r3, #1
 8006050:	d105      	bne.n	800605e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f002 fb6e 	bl	8008744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f003 fc15 	bl	800989c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b08d      	sub	sp, #52	@ 0x34
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f003 fcd3 	bl	8009a46 <USB_GetMode>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 848c 	bne.w	80069c0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f003 fc37 	bl	8009920 <USB_ReadInterrupts>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8482 	beq.w	80069be <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	0a1b      	lsrs	r3, r3, #8
 80060c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 fc24 	bl	8009920 <USB_ReadInterrupts>
 80060d8:	4603      	mov	r3, r0
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d107      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 0202 	and.w	r2, r2, #2
 80060f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f003 fc12 	bl	8009920 <USB_ReadInterrupts>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b10      	cmp	r3, #16
 8006104:	d161      	bne.n	80061ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	699a      	ldr	r2, [r3, #24]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0210 	bic.w	r2, r2, #16
 8006114:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f003 020f 	and.w	r2, r3, #15
 8006122:	4613      	mov	r3, r2
 8006124:	00db      	lsls	r3, r3, #3
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	3304      	adds	r3, #4
 8006134:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800613c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006140:	d124      	bne.n	800618c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006148:	4013      	ands	r3, r2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d035      	beq.n	80061ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	6a38      	ldr	r0, [r7, #32]
 8006162:	f003 fa49 	bl	80095f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006172:	441a      	add	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	695a      	ldr	r2, [r3, #20]
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006184:	441a      	add	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	615a      	str	r2, [r3, #20]
 800618a:	e016      	b.n	80061ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006192:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006196:	d110      	bne.n	80061ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800619e:	2208      	movs	r2, #8
 80061a0:	4619      	mov	r1, r3
 80061a2:	6a38      	ldr	r0, [r7, #32]
 80061a4:	f003 fa28 	bl	80095f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	091b      	lsrs	r3, r3, #4
 80061b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b4:	441a      	add	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0210 	orr.w	r2, r2, #16
 80061c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f003 fba6 	bl	8009920 <USB_ReadInterrupts>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80061de:	f040 80a7 	bne.w	8006330 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f003 fbab 	bl	8009946 <USB_ReadDevAllOutEpInterrupt>
 80061f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80061f2:	e099      	b.n	8006328 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 808e 	beq.w	800631c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f003 fbcf 	bl	80099ae <USB_ReadDevOutEPInterrupt>
 8006210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006228:	461a      	mov	r2, r3
 800622a:	2301      	movs	r3, #1
 800622c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800622e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fea3 	bl	8006f7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00c      	beq.n	800625a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624c:	461a      	mov	r2, r3
 800624e:	2308      	movs	r3, #8
 8006250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006252:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 ff79 	bl	800714c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006270:	461a      	mov	r2, r3
 8006272:	2310      	movs	r3, #16
 8006274:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d030      	beq.n	80062e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006288:	2b80      	cmp	r3, #128	@ 0x80
 800628a:	d109      	bne.n	80062a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800629a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800629e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80062a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	3304      	adds	r3, #4
 80062b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d108      	bne.n	80062d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	4619      	mov	r1, r3
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f005 ffe0 	bl	800c290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062dc:	461a      	mov	r2, r3
 80062de:	2302      	movs	r3, #2
 80062e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d008      	beq.n	80062fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f8:	461a      	mov	r2, r3
 80062fa:	2320      	movs	r3, #32
 80062fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800631a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	3301      	adds	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	f47f af62 	bne.w	80061f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f003 faf3 	bl	8009920 <USB_ReadInterrupts>
 800633a:	4603      	mov	r3, r0
 800633c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006340:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006344:	f040 80db 	bne.w	80064fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f003 fb14 	bl	800997a <USB_ReadDevAllInEpInterrupt>
 8006352:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006358:	e0cd      	b.n	80064f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80c2 	beq.w	80064ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f003 fb3a 	bl	80099ea <USB_ReadDevInEPInterrupt>
 8006376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d057      	beq.n	8006432 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	2201      	movs	r2, #1
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	69f9      	ldr	r1, [r7, #28]
 800639e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063a2:	4013      	ands	r3, r2
 80063a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b2:	461a      	mov	r2, r3
 80063b4:	2301      	movs	r3, #1
 80063b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	799b      	ldrb	r3, [r3, #6]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d132      	bne.n	8006426 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	3320      	adds	r3, #32
 80063d0:	6819      	ldr	r1, [r3, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4403      	add	r3, r0
 80063e0:	331c      	adds	r3, #28
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4419      	add	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4403      	add	r3, r0
 80063f4:	3320      	adds	r3, #32
 80063f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d113      	bne.n	8006426 <HAL_PCD_IRQHandler+0x3a2>
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	440b      	add	r3, r1
 800640c:	3324      	adds	r3, #36	@ 0x24
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d108      	bne.n	8006426 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800641e:	461a      	mov	r2, r3
 8006420:	2101      	movs	r1, #1
 8006422:	f003 fb41 	bl	8009aa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f005 feb4 	bl	800c19a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006448:	461a      	mov	r2, r3
 800644a:	2308      	movs	r3, #8
 800644c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006464:	461a      	mov	r2, r3
 8006466:	2310      	movs	r3, #16
 8006468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006480:	461a      	mov	r2, r3
 8006482:	2340      	movs	r3, #64	@ 0x40
 8006484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d023      	beq.n	80064d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006492:	6a38      	ldr	r0, [r7, #32]
 8006494:	f002 fb28 	bl	8008ae8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800649a:	4613      	mov	r3, r2
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	3310      	adds	r3, #16
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	4413      	add	r3, r2
 80064a8:	3304      	adds	r3, #4
 80064aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d108      	bne.n	80064c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f005 fef7 	bl	800c2b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064d2:	461a      	mov	r2, r3
 80064d4:	2302      	movs	r3, #2
 80064d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80064e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fcbd 	bl	8006e64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ec:	3301      	adds	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80064f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f2:	085b      	lsrs	r3, r3, #1
 80064f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f47f af2e 	bne.w	800635a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f003 fa0c 	bl	8009920 <USB_ReadInterrupts>
 8006508:	4603      	mov	r3, r0
 800650a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800650e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006512:	d122      	bne.n	800655a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800652e:	2b01      	cmp	r3, #1
 8006530:	d108      	bne.n	8006544 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800653a:	2100      	movs	r1, #0
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fea3 	bl	8007288 <HAL_PCDEx_LPM_Callback>
 8006542:	e002      	b.n	800654a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f005 fe95 	bl	800c274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f003 f9de 	bl	8009920 <USB_ReadInterrupts>
 8006564:	4603      	mov	r3, r0
 8006566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800656a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800656e:	d112      	bne.n	8006596 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b01      	cmp	r3, #1
 800657e:	d102      	bne.n	8006586 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f005 fe51 	bl	800c228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006594:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f003 f9c0 	bl	8009920 <USB_ReadInterrupts>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065aa:	f040 80b7 	bne.w	800671c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065bc:	f023 0301 	bic.w	r3, r3, #1
 80065c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2110      	movs	r1, #16
 80065c8:	4618      	mov	r0, r3
 80065ca:	f002 fa8d 	bl	8008ae8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ce:	2300      	movs	r3, #0
 80065d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d2:	e046      	b.n	8006662 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80065d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e0:	461a      	mov	r2, r3
 80065e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006602:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006606:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006614:	461a      	mov	r2, r3
 8006616:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800661a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006636:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800663a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006656:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800665a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800665c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665e:	3301      	adds	r3, #1
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	791b      	ldrb	r3, [r3, #4]
 8006666:	461a      	mov	r2, r3
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	4293      	cmp	r3, r2
 800666c:	d3b2      	bcc.n	80065d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800667c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006680:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7bdb      	ldrb	r3, [r3, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006690:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800669a:	f043 030b 	orr.w	r3, r3, #11
 800669e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066b0:	f043 030b 	orr.w	r3, r3, #11
 80066b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80066b6:	e015      	b.n	80066e4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80066ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80066ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	69fa      	ldr	r2, [r7, #28]
 80066da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066de:	f043 030b 	orr.w	r3, r3, #11
 80066e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69fa      	ldr	r2, [r7, #28]
 80066ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80066f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006706:	461a      	mov	r2, r3
 8006708:	f003 f9ce 	bl	8009aa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800671a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f003 f8fd 	bl	8009920 <USB_ReadInterrupts>
 8006726:	4603      	mov	r3, r0
 8006728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006730:	d123      	bne.n	800677a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f003 f993 	bl	8009a62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f002 fa4a 	bl	8008bda <USB_GetDevSpeed>
 8006746:	4603      	mov	r3, r0
 8006748:	461a      	mov	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681c      	ldr	r4, [r3, #0]
 8006752:	f001 f9c9 	bl	8007ae8 <HAL_RCC_GetHCLKFreq>
 8006756:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800675c:	461a      	mov	r2, r3
 800675e:	4620      	mov	r0, r4
 8006760:	f001 ff4e 	bl	8008600 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f005 fd40 	bl	800c1ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695a      	ldr	r2, [r3, #20]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006778:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f003 f8ce 	bl	8009920 <USB_ReadInterrupts>
 8006784:	4603      	mov	r3, r0
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b08      	cmp	r3, #8
 800678c:	d10a      	bne.n	80067a4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f005 fd1d 	bl	800c1ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695a      	ldr	r2, [r3, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f002 0208 	and.w	r2, r2, #8
 80067a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f003 f8b9 	bl	8009920 <USB_ReadInterrupts>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b4:	2b80      	cmp	r3, #128	@ 0x80
 80067b6:	d123      	bne.n	8006800 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067c4:	2301      	movs	r3, #1
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c8:	e014      	b.n	80067f4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d105      	bne.n	80067ee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fb0a 	bl	8006e02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	3301      	adds	r3, #1
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	791b      	ldrb	r3, [r3, #4]
 80067f8:	461a      	mov	r2, r3
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d3e4      	bcc.n	80067ca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f003 f88b 	bl	8009920 <USB_ReadInterrupts>
 800680a:	4603      	mov	r3, r0
 800680c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006814:	d13c      	bne.n	8006890 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006816:	2301      	movs	r3, #1
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
 800681a:	e02b      	b.n	8006874 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006830:	4613      	mov	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	3318      	adds	r3, #24
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d115      	bne.n	800686e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006842:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006844:	2b00      	cmp	r3, #0
 8006846:	da12      	bge.n	800686e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684c:	4613      	mov	r3, r2
 800684e:	00db      	lsls	r3, r3, #3
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	3317      	adds	r3, #23
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 faca 	bl	8006e02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	3301      	adds	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	@ 0x24
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	791b      	ldrb	r3, [r3, #4]
 8006878:	461a      	mov	r2, r3
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	4293      	cmp	r3, r2
 800687e:	d3cd      	bcc.n	800681c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800688e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f003 f843 	bl	8009920 <USB_ReadInterrupts>
 800689a:	4603      	mov	r3, r0
 800689c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068a4:	d156      	bne.n	8006954 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80068a6:	2301      	movs	r3, #1
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068aa:	e045      	b.n	8006938 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d12e      	bne.n	8006932 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da2b      	bge.n	8006932 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	0c1a      	lsrs	r2, r3, #16
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80068e4:	4053      	eors	r3, r2
 80068e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d121      	bne.n	8006932 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f2:	4613      	mov	r3, r2
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	4413      	add	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	440b      	add	r3, r1
 80068fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006900:	2201      	movs	r2, #1
 8006902:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800692a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800692e:	6053      	str	r3, [r2, #4]
            break;
 8006930:	e008      	b.n	8006944 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	3301      	adds	r3, #1
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	791b      	ldrb	r3, [r3, #4]
 800693c:	461a      	mov	r2, r3
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	4293      	cmp	r3, r2
 8006942:	d3b3      	bcc.n	80068ac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695a      	ldr	r2, [r3, #20]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f002 ffe1 	bl	8009920 <USB_ReadInterrupts>
 800695e:	4603      	mov	r3, r0
 8006960:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006968:	d10a      	bne.n	8006980 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f005 fcb4 	bl	800c2d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800697e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f002 ffcb 	bl	8009920 <USB_ReadInterrupts>
 800698a:	4603      	mov	r3, r0
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b04      	cmp	r3, #4
 8006992:	d115      	bne.n	80069c0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f005 fca4 	bl	800c2f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6859      	ldr	r1, [r3, #4]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
 80069bc:	e000      	b.n	80069c0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80069be:	bf00      	nop
    }
  }
}
 80069c0:	3734      	adds	r7, #52	@ 0x34
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}

080069c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b082      	sub	sp, #8
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_PCD_SetAddress+0x1a>
 80069dc:	2302      	movs	r3, #2
 80069de:	e012      	b.n	8006a06 <HAL_PCD_SetAddress+0x40>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 ff2a 	bl	8009850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	4608      	mov	r0, r1
 8006a18:	4611      	mov	r1, r2
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	70fb      	strb	r3, [r7, #3]
 8006a20:	460b      	mov	r3, r1
 8006a22:	803b      	strh	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	da0f      	bge.n	8006a54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	3310      	adds	r3, #16
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4413      	add	r3, r2
 8006a48:	3304      	adds	r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	705a      	strb	r2, [r3, #1]
 8006a52:	e00f      	b.n	8006a74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	f003 020f 	and.w	r2, r3, #15
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006a80:	883b      	ldrh	r3, [r7, #0]
 8006a82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	78ba      	ldrb	r2, [r7, #2]
 8006a8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006aa2:	78bb      	ldrb	r3, [r7, #2]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d102      	bne.n	8006aae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_PCD_EP_Open+0xae>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e00e      	b.n	8006ada <HAL_PCD_EP_Open+0xcc>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 f8aa 	bl	8008c24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006ad8:	7afb      	ldrb	r3, [r7, #11]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	da0f      	bge.n	8006b16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 020f 	and.w	r2, r3, #15
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	3310      	adds	r3, #16
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	705a      	strb	r2, [r3, #1]
 8006b14:	e00f      	b.n	8006b36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b36:	78fb      	ldrb	r3, [r7, #3]
 8006b38:	f003 030f 	and.w	r3, r3, #15
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_PCD_EP_Close+0x6e>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e00e      	b.n	8006b6e <HAL_PCD_EP_Close+0x8c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f002 f8e8 	bl	8008d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	607a      	str	r2, [r7, #4]
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	460b      	mov	r3, r1
 8006b84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4413      	add	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bb8:	7afb      	ldrb	r3, [r7, #11]
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	799b      	ldrb	r3, [r3, #6]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d102      	bne.n	8006bd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	799b      	ldrb	r3, [r3, #6]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	f002 f985 	bl	8008eec <USB_EPStartXfer>

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	f003 020f 	and.w	r2, r3, #15
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	4613      	mov	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006c0e:	681b      	ldr	r3, [r3, #0]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c2c:	7afb      	ldrb	r3, [r7, #11]
 8006c2e:	f003 020f 	and.w	r2, r3, #15
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	3310      	adds	r3, #16
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	3304      	adds	r3, #4
 8006c42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2200      	movs	r2, #0
 8006c54:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	799b      	ldrb	r3, [r3, #6]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d102      	bne.n	8006c76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	799b      	ldrb	r3, [r3, #6]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6979      	ldr	r1, [r7, #20]
 8006c82:	f002 f933 	bl	8008eec <USB_EPStartXfer>

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c9c:	78fb      	ldrb	r3, [r7, #3]
 8006c9e:	f003 030f 	and.w	r3, r3, #15
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	7912      	ldrb	r2, [r2, #4]
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e04f      	b.n	8006d4e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da0f      	bge.n	8006cd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	f003 020f 	and.w	r2, r3, #15
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	4413      	add	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	3304      	adds	r3, #4
 8006ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	705a      	strb	r2, [r3, #1]
 8006cd4:	e00d      	b.n	8006cf2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3304      	adds	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_PCD_EP_SetStall+0x82>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e01d      	b.n	8006d4e <HAL_PCD_EP_SetStall+0xbe>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f002 fcc1 	bl	80096a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	f003 030f 	and.w	r3, r3, #15
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d109      	bne.n	8006d44 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	7999      	ldrb	r1, [r3, #6]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f002 feb2 	bl	8009aa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	7912      	ldrb	r2, [r2, #4]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d901      	bls.n	8006d74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e042      	b.n	8006dfa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	da0f      	bge.n	8006d9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	3310      	adds	r3, #16
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	3304      	adds	r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	705a      	strb	r2, [r3, #1]
 8006d9a:	e00f      	b.n	8006dbc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	f003 020f 	and.w	r2, r3, #15
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	3304      	adds	r3, #4
 8006db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_PCD_EP_ClrStall+0x86>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e00e      	b.n	8006dfa <HAL_PCD_EP_ClrStall+0xa4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f002 fcca 	bl	8009784 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da0c      	bge.n	8006e30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	f003 020f 	and.w	r2, r3, #15
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	3310      	adds	r3, #16
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e00c      	b.n	8006e4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	4613      	mov	r3, r2
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	4413      	add	r3, r2
 8006e46:	3304      	adds	r3, #4
 8006e48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 fae9 	bl	8009428 <USB_EPStopXfer>
 8006e56:	4603      	mov	r3, r0
 8006e58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	@ 0x28
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	3310      	adds	r3, #16
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	4413      	add	r3, r2
 8006e88:	3304      	adds	r3, #4
 8006e8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d901      	bls.n	8006e9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e06b      	b.n	8006f74 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d902      	bls.n	8006eb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	3303      	adds	r3, #3
 8006ebc:	089b      	lsrs	r3, r3, #2
 8006ebe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ec0:	e02a      	b.n	8006f18 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d902      	bls.n	8006ede <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	089b      	lsrs	r3, r3, #2
 8006ee4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	68d9      	ldr	r1, [r3, #12]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	4603      	mov	r3, r0
 8006efa:	6978      	ldr	r0, [r7, #20]
 8006efc:	f002 fb3e 	bl	800957c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68da      	ldr	r2, [r3, #12]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	441a      	add	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	441a      	add	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d809      	bhi.n	8006f42 <PCD_WriteEmptyTxFifo+0xde>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	695a      	ldr	r2, [r3, #20]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d203      	bcs.n	8006f42 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1bf      	bne.n	8006ec2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d811      	bhi.n	8006f72 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	2201      	movs	r2, #1
 8006f56:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	43db      	mvns	r3, r3
 8006f68:	6939      	ldr	r1, [r7, #16]
 8006f6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f6e:	4013      	ands	r3, r2
 8006f70:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	333c      	adds	r3, #60	@ 0x3c
 8006f94:	3304      	adds	r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	799b      	ldrb	r3, [r3, #6]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d17b      	bne.n	80070aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d015      	beq.n	8006fe8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4a61      	ldr	r2, [pc, #388]	@ (8007144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	f240 80b9 	bls.w	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80b3 	beq.w	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fe4:	6093      	str	r3, [r2, #8]
 8006fe6:	e0a7      	b.n	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffe:	461a      	mov	r2, r3
 8007000:	2320      	movs	r3, #32
 8007002:	6093      	str	r3, [r2, #8]
 8007004:	e098      	b.n	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 8093 	bne.w	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	4a4b      	ldr	r2, [pc, #300]	@ (8007144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d90f      	bls.n	800703a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007030:	461a      	mov	r2, r3
 8007032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007036:	6093      	str	r3, [r2, #8]
 8007038:	e07e      	b.n	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	4413      	add	r3, r2
 800704c:	3304      	adds	r3, #4
 800704e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	0159      	lsls	r1, r3, #5
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	440b      	add	r3, r1
 800705c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d114      	bne.n	800709c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007084:	461a      	mov	r2, r3
 8007086:	2101      	movs	r1, #1
 8007088:	f002 fd0e 	bl	8009aa8 <USB_EP0_OutStart>
 800708c:	e006      	b.n	800709c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	441a      	add	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f005 f85e 	bl	800c164 <HAL_PCD_DataOutStageCallback>
 80070a8:	e046      	b.n	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4a26      	ldr	r2, [pc, #152]	@ (8007148 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d124      	bne.n	80070fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c8:	461a      	mov	r2, r3
 80070ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ce:	6093      	str	r3, [r2, #8]
 80070d0:	e032      	b.n	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e8:	461a      	mov	r2, r3
 80070ea:	2320      	movs	r3, #32
 80070ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f005 f835 	bl	800c164 <HAL_PCD_DataOutStageCallback>
 80070fa:	e01d      	b.n	8007138 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d114      	bne.n	800712c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	4613      	mov	r3, r2
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007124:	461a      	mov	r2, r3
 8007126:	2100      	movs	r1, #0
 8007128:	f002 fcbe 	bl	8009aa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f005 f816 	bl	800c164 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	4f54300a 	.word	0x4f54300a
 8007148:	4f54310a 	.word	0x4f54310a

0800714c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	333c      	adds	r3, #60	@ 0x3c
 8007164:	3304      	adds	r3, #4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a15      	ldr	r2, [pc, #84]	@ (80071d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d90e      	bls.n	80071a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007188:	2b00      	cmp	r3, #0
 800718a:	d009      	beq.n	80071a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007198:	461a      	mov	r2, r3
 800719a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f004 ffcd 	bl	800c140 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4a0a      	ldr	r2, [pc, #40]	@ (80071d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d90c      	bls.n	80071c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	799b      	ldrb	r3, [r3, #6]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d108      	bne.n	80071c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071c0:	461a      	mov	r2, r3
 80071c2:	2101      	movs	r1, #1
 80071c4:	f002 fc70 	bl	8009aa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	4f54300a 	.word	0x4f54300a

080071d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
 80071e4:	4613      	mov	r3, r2
 80071e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80071f6:	883b      	ldrh	r3, [r7, #0]
 80071f8:	0419      	lsls	r1, r3, #16
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	430a      	orrs	r2, r1
 8007202:	629a      	str	r2, [r3, #40]	@ 0x28
 8007204:	e028      	b.n	8007258 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	4413      	add	r3, r2
 8007212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
 8007218:	e00d      	b.n	8007236 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	3340      	adds	r3, #64	@ 0x40
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	0c1b      	lsrs	r3, r3, #16
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	4413      	add	r3, r2
 800722e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	3301      	adds	r3, #1
 8007234:	73fb      	strb	r3, [r7, #15]
 8007236:	7bfa      	ldrb	r2, [r7, #15]
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	3b01      	subs	r3, #1
 800723c:	429a      	cmp	r2, r3
 800723e:	d3ec      	bcc.n	800721a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007240:	883b      	ldrh	r3, [r7, #0]
 8007242:	0418      	lsls	r0, r3, #16
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6819      	ldr	r1, [r3, #0]
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	3b01      	subs	r3, #1
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4302      	orrs	r2, r0
 8007250:	3340      	adds	r3, #64	@ 0x40
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	440b      	add	r3, r1
 8007256:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	887a      	ldrh	r2, [r7, #2]
 8007278:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e267      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d075      	beq.n	80073aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072be:	4b88      	ldr	r3, [pc, #544]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f003 030c 	and.w	r3, r3, #12
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d00c      	beq.n	80072e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ca:	4b85      	ldr	r3, [pc, #532]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d112      	bne.n	80072fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072d6:	4b82      	ldr	r3, [pc, #520]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072e2:	d10b      	bne.n	80072fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e4:	4b7e      	ldr	r3, [pc, #504]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d05b      	beq.n	80073a8 <HAL_RCC_OscConfig+0x108>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d157      	bne.n	80073a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e242      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d106      	bne.n	8007314 <HAL_RCC_OscConfig+0x74>
 8007306:	4b76      	ldr	r3, [pc, #472]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a75      	ldr	r2, [pc, #468]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800730c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e01d      	b.n	8007350 <HAL_RCC_OscConfig+0xb0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800731c:	d10c      	bne.n	8007338 <HAL_RCC_OscConfig+0x98>
 800731e:	4b70      	ldr	r3, [pc, #448]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6f      	ldr	r2, [pc, #444]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4b6d      	ldr	r3, [pc, #436]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6c      	ldr	r2, [pc, #432]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e00b      	b.n	8007350 <HAL_RCC_OscConfig+0xb0>
 8007338:	4b69      	ldr	r3, [pc, #420]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a68      	ldr	r2, [pc, #416]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800733e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	4b66      	ldr	r3, [pc, #408]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a65      	ldr	r2, [pc, #404]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800734a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800734e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007358:	f7fa fbac 	bl	8001ab4 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007360:	f7fa fba8 	bl	8001ab4 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	@ 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e207      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007372:	4b5b      	ldr	r3, [pc, #364]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0xc0>
 800737e:	e014      	b.n	80073aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007380:	f7fa fb98 	bl	8001ab4 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007388:	f7fa fb94 	bl	8001ab4 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b64      	cmp	r3, #100	@ 0x64
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e1f3      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739a:	4b51      	ldr	r3, [pc, #324]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0xe8>
 80073a6:	e000      	b.n	80073aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d063      	beq.n	800747e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073b6:	4b4a      	ldr	r3, [pc, #296]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c2:	4b47      	ldr	r3, [pc, #284]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d11c      	bne.n	8007408 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ce:	4b44      	ldr	r3, [pc, #272]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073da:	4b41      	ldr	r3, [pc, #260]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_RCC_OscConfig+0x152>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d001      	beq.n	80073f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e1c7      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f2:	4b3b      	ldr	r3, [pc, #236]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4937      	ldr	r1, [pc, #220]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007406:	e03a      	b.n	800747e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d020      	beq.n	8007452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007410:	4b34      	ldr	r3, [pc, #208]	@ (80074e4 <HAL_RCC_OscConfig+0x244>)
 8007412:	2201      	movs	r2, #1
 8007414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007416:	f7fa fb4d 	bl	8001ab4 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741e:	f7fa fb49 	bl	8001ab4 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e1a8      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007430:	4b2b      	ldr	r3, [pc, #172]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0f0      	beq.n	800741e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743c:	4b28      	ldr	r3, [pc, #160]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	4925      	ldr	r1, [pc, #148]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 800744c:	4313      	orrs	r3, r2
 800744e:	600b      	str	r3, [r1, #0]
 8007450:	e015      	b.n	800747e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007452:	4b24      	ldr	r3, [pc, #144]	@ (80074e4 <HAL_RCC_OscConfig+0x244>)
 8007454:	2200      	movs	r2, #0
 8007456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fa fb2c 	bl	8001ab4 <HAL_GetTick>
 800745c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007460:	f7fa fb28 	bl	8001ab4 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e187      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007472:	4b1b      	ldr	r3, [pc, #108]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f0      	bne.n	8007460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d036      	beq.n	80074f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d016      	beq.n	80074c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007492:	4b15      	ldr	r3, [pc, #84]	@ (80074e8 <HAL_RCC_OscConfig+0x248>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007498:	f7fa fb0c 	bl	8001ab4 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074a0:	f7fa fb08 	bl	8001ab4 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e167      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b2:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <HAL_RCC_OscConfig+0x240>)
 80074b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x200>
 80074be:	e01b      	b.n	80074f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074c0:	4b09      	ldr	r3, [pc, #36]	@ (80074e8 <HAL_RCC_OscConfig+0x248>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074c6:	f7fa faf5 	bl	8001ab4 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074cc:	e00e      	b.n	80074ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ce:	f7fa faf1 	bl	8001ab4 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d907      	bls.n	80074ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e150      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
 80074e0:	40023800 	.word	0x40023800
 80074e4:	42470000 	.word	0x42470000
 80074e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074ec:	4b88      	ldr	r3, [pc, #544]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80074ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1ea      	bne.n	80074ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8097 	beq.w	8007634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800750a:	4b81      	ldr	r3, [pc, #516]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10f      	bne.n	8007536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	4b7d      	ldr	r3, [pc, #500]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751e:	4a7c      	ldr	r2, [pc, #496]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007524:	6413      	str	r3, [r2, #64]	@ 0x40
 8007526:	4b7a      	ldr	r3, [pc, #488]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007536:	4b77      	ldr	r3, [pc, #476]	@ (8007714 <HAL_RCC_OscConfig+0x474>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d118      	bne.n	8007574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007542:	4b74      	ldr	r3, [pc, #464]	@ (8007714 <HAL_RCC_OscConfig+0x474>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a73      	ldr	r2, [pc, #460]	@ (8007714 <HAL_RCC_OscConfig+0x474>)
 8007548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800754c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800754e:	f7fa fab1 	bl	8001ab4 <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007554:	e008      	b.n	8007568 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007556:	f7fa faad 	bl	8001ab4 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	2b02      	cmp	r3, #2
 8007562:	d901      	bls.n	8007568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007564:	2303      	movs	r3, #3
 8007566:	e10c      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007568:	4b6a      	ldr	r3, [pc, #424]	@ (8007714 <HAL_RCC_OscConfig+0x474>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0f0      	beq.n	8007556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d106      	bne.n	800758a <HAL_RCC_OscConfig+0x2ea>
 800757c:	4b64      	ldr	r3, [pc, #400]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007580:	4a63      	ldr	r2, [pc, #396]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007582:	f043 0301 	orr.w	r3, r3, #1
 8007586:	6713      	str	r3, [r2, #112]	@ 0x70
 8007588:	e01c      	b.n	80075c4 <HAL_RCC_OscConfig+0x324>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d10c      	bne.n	80075ac <HAL_RCC_OscConfig+0x30c>
 8007592:	4b5f      	ldr	r3, [pc, #380]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007596:	4a5e      	ldr	r2, [pc, #376]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007598:	f043 0304 	orr.w	r3, r3, #4
 800759c:	6713      	str	r3, [r2, #112]	@ 0x70
 800759e:	4b5c      	ldr	r3, [pc, #368]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a2:	4a5b      	ldr	r2, [pc, #364]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075a4:	f043 0301 	orr.w	r3, r3, #1
 80075a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075aa:	e00b      	b.n	80075c4 <HAL_RCC_OscConfig+0x324>
 80075ac:	4b58      	ldr	r3, [pc, #352]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b0:	4a57      	ldr	r2, [pc, #348]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075b2:	f023 0301 	bic.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b8:	4b55      	ldr	r3, [pc, #340]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075bc:	4a54      	ldr	r2, [pc, #336]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075be:	f023 0304 	bic.w	r3, r3, #4
 80075c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d015      	beq.n	80075f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075cc:	f7fa fa72 	bl	8001ab4 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075d2:	e00a      	b.n	80075ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d4:	f7fa fa6e 	bl	8001ab4 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d901      	bls.n	80075ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e0cb      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ea:	4b49      	ldr	r3, [pc, #292]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0ee      	beq.n	80075d4 <HAL_RCC_OscConfig+0x334>
 80075f6:	e014      	b.n	8007622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075f8:	f7fa fa5c 	bl	8001ab4 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075fe:	e00a      	b.n	8007616 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007600:	f7fa fa58 	bl	8001ab4 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e0b5      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007616:	4b3e      	ldr	r3, [pc, #248]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	f003 0302 	and.w	r3, r3, #2
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ee      	bne.n	8007600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007622:	7dfb      	ldrb	r3, [r7, #23]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d105      	bne.n	8007634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007628:	4b39      	ldr	r3, [pc, #228]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762c:	4a38      	ldr	r2, [pc, #224]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 800762e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007632:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80a1 	beq.w	8007780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800763e:	4b34      	ldr	r3, [pc, #208]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 030c 	and.w	r3, r3, #12
 8007646:	2b08      	cmp	r3, #8
 8007648:	d05c      	beq.n	8007704 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d141      	bne.n	80076d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007652:	4b31      	ldr	r3, [pc, #196]	@ (8007718 <HAL_RCC_OscConfig+0x478>)
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007658:	f7fa fa2c 	bl	8001ab4 <HAL_GetTick>
 800765c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007660:	f7fa fa28 	bl	8001ab4 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d901      	bls.n	8007672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e087      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007672:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69da      	ldr	r2, [r3, #28]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	019b      	lsls	r3, r3, #6
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	085b      	lsrs	r3, r3, #1
 8007696:	3b01      	subs	r3, #1
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	431a      	orrs	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	061b      	lsls	r3, r3, #24
 80076a2:	491b      	ldr	r1, [pc, #108]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80076a4:	4313      	orrs	r3, r2
 80076a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <HAL_RCC_OscConfig+0x478>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ae:	f7fa fa01 	bl	8001ab4 <HAL_GetTick>
 80076b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b4:	e008      	b.n	80076c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b6:	f7fa f9fd 	bl	8001ab4 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e05c      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c8:	4b11      	ldr	r3, [pc, #68]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_RCC_OscConfig+0x416>
 80076d4:	e054      	b.n	8007780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d6:	4b10      	ldr	r3, [pc, #64]	@ (8007718 <HAL_RCC_OscConfig+0x478>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076dc:	f7fa f9ea 	bl	8001ab4 <HAL_GetTick>
 80076e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e4:	f7fa f9e6 	bl	8001ab4 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e045      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f6:	4b06      	ldr	r3, [pc, #24]	@ (8007710 <HAL_RCC_OscConfig+0x470>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f0      	bne.n	80076e4 <HAL_RCC_OscConfig+0x444>
 8007702:	e03d      	b.n	8007780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d107      	bne.n	800771c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e038      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
 8007710:	40023800 	.word	0x40023800
 8007714:	40007000 	.word	0x40007000
 8007718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800771c:	4b1b      	ldr	r3, [pc, #108]	@ (800778c <HAL_RCC_OscConfig+0x4ec>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d028      	beq.n	800777c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007734:	429a      	cmp	r2, r3
 8007736:	d121      	bne.n	800777c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007742:	429a      	cmp	r2, r3
 8007744:	d11a      	bne.n	800777c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800774c:	4013      	ands	r3, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007754:	4293      	cmp	r3, r2
 8007756:	d111      	bne.n	800777c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	3b01      	subs	r3, #1
 8007766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007768:	429a      	cmp	r2, r3
 800776a:	d107      	bne.n	800777c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007778:	429a      	cmp	r2, r3
 800777a:	d001      	beq.n	8007780 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40023800 	.word	0x40023800

08007790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e0cc      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077a4:	4b68      	ldr	r3, [pc, #416]	@ (8007948 <HAL_RCC_ClockConfig+0x1b8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d90c      	bls.n	80077cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077b2:	4b65      	ldr	r3, [pc, #404]	@ (8007948 <HAL_RCC_ClockConfig+0x1b8>)
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ba:	4b63      	ldr	r3, [pc, #396]	@ (8007948 <HAL_RCC_ClockConfig+0x1b8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d001      	beq.n	80077cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e0b8      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d020      	beq.n	800781a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077e4:	4b59      	ldr	r3, [pc, #356]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	4a58      	ldr	r2, [pc, #352]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 80077ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0308 	and.w	r3, r3, #8
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d005      	beq.n	8007808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077fc:	4b53      	ldr	r3, [pc, #332]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4a52      	ldr	r2, [pc, #328]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007808:	4b50      	ldr	r3, [pc, #320]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	494d      	ldr	r1, [pc, #308]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	4313      	orrs	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b00      	cmp	r3, #0
 8007824:	d044      	beq.n	80078b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d107      	bne.n	800783e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800782e:	4b47      	ldr	r3, [pc, #284]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d119      	bne.n	800786e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e07f      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d003      	beq.n	800784e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800784a:	2b03      	cmp	r3, #3
 800784c:	d107      	bne.n	800785e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800784e:	4b3f      	ldr	r3, [pc, #252]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d109      	bne.n	800786e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e06f      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800785e:	4b3b      	ldr	r3, [pc, #236]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e067      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800786e:	4b37      	ldr	r3, [pc, #220]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f023 0203 	bic.w	r2, r3, #3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4934      	ldr	r1, [pc, #208]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 800787c:	4313      	orrs	r3, r2
 800787e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007880:	f7fa f918 	bl	8001ab4 <HAL_GetTick>
 8007884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007886:	e00a      	b.n	800789e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007888:	f7fa f914 	bl	8001ab4 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007896:	4293      	cmp	r3, r2
 8007898:	d901      	bls.n	800789e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e04f      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789e:	4b2b      	ldr	r3, [pc, #172]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f003 020c 	and.w	r2, r3, #12
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d1eb      	bne.n	8007888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078b0:	4b25      	ldr	r3, [pc, #148]	@ (8007948 <HAL_RCC_ClockConfig+0x1b8>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d20c      	bcs.n	80078d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078be:	4b22      	ldr	r3, [pc, #136]	@ (8007948 <HAL_RCC_ClockConfig+0x1b8>)
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c6:	4b20      	ldr	r3, [pc, #128]	@ (8007948 <HAL_RCC_ClockConfig+0x1b8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d001      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e032      	b.n	800793e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d008      	beq.n	80078f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078e4:	4b19      	ldr	r3, [pc, #100]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	4916      	ldr	r1, [pc, #88]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0308 	and.w	r3, r3, #8
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d009      	beq.n	8007916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007902:	4b12      	ldr	r3, [pc, #72]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	490e      	ldr	r1, [pc, #56]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 8007912:	4313      	orrs	r3, r2
 8007914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007916:	f000 f821 	bl	800795c <HAL_RCC_GetSysClockFreq>
 800791a:	4602      	mov	r2, r0
 800791c:	4b0b      	ldr	r3, [pc, #44]	@ (800794c <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	091b      	lsrs	r3, r3, #4
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	490a      	ldr	r1, [pc, #40]	@ (8007950 <HAL_RCC_ClockConfig+0x1c0>)
 8007928:	5ccb      	ldrb	r3, [r1, r3]
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	4a09      	ldr	r2, [pc, #36]	@ (8007954 <HAL_RCC_ClockConfig+0x1c4>)
 8007930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007932:	4b09      	ldr	r3, [pc, #36]	@ (8007958 <HAL_RCC_ClockConfig+0x1c8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4618      	mov	r0, r3
 8007938:	f7fa f878 	bl	8001a2c <HAL_InitTick>

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40023c00 	.word	0x40023c00
 800794c:	40023800 	.word	0x40023800
 8007950:	0800c774 	.word	0x0800c774
 8007954:	20000030 	.word	0x20000030
 8007958:	20000034 	.word	0x20000034

0800795c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800795c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007960:	b090      	sub	sp, #64	@ 0x40
 8007962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007974:	4b59      	ldr	r3, [pc, #356]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x180>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f003 030c 	and.w	r3, r3, #12
 800797c:	2b08      	cmp	r3, #8
 800797e:	d00d      	beq.n	800799c <HAL_RCC_GetSysClockFreq+0x40>
 8007980:	2b08      	cmp	r3, #8
 8007982:	f200 80a1 	bhi.w	8007ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <HAL_RCC_GetSysClockFreq+0x34>
 800798a:	2b04      	cmp	r3, #4
 800798c:	d003      	beq.n	8007996 <HAL_RCC_GetSysClockFreq+0x3a>
 800798e:	e09b      	b.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007990:	4b53      	ldr	r3, [pc, #332]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007992:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007994:	e09b      	b.n	8007ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007996:	4b53      	ldr	r3, [pc, #332]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007998:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800799a:	e098      	b.n	8007ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800799c:	4b4f      	ldr	r3, [pc, #316]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x180>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079a6:	4b4d      	ldr	r3, [pc, #308]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x180>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d028      	beq.n	8007a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079b2:	4b4a      	ldr	r3, [pc, #296]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x180>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	099b      	lsrs	r3, r3, #6
 80079b8:	2200      	movs	r2, #0
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079c4:	2100      	movs	r1, #0
 80079c6:	4b47      	ldr	r3, [pc, #284]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80079c8:	fb03 f201 	mul.w	r2, r3, r1
 80079cc:	2300      	movs	r3, #0
 80079ce:	fb00 f303 	mul.w	r3, r0, r3
 80079d2:	4413      	add	r3, r2
 80079d4:	4a43      	ldr	r2, [pc, #268]	@ (8007ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80079d6:	fba0 1202 	umull	r1, r2, r0, r2
 80079da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079dc:	460a      	mov	r2, r1
 80079de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80079e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079e2:	4413      	add	r3, r2
 80079e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e8:	2200      	movs	r2, #0
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	61fa      	str	r2, [r7, #28]
 80079ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079f6:	f7f8 fbef 	bl	80001d8 <__aeabi_uldivmod>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4613      	mov	r3, r2
 8007a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a02:	e053      	b.n	8007aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a04:	4b35      	ldr	r3, [pc, #212]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x180>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	099b      	lsrs	r3, r3, #6
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	613b      	str	r3, [r7, #16]
 8007a0e:	617a      	str	r2, [r7, #20]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a16:	f04f 0b00 	mov.w	fp, #0
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	f04f 0000 	mov.w	r0, #0
 8007a22:	f04f 0100 	mov.w	r1, #0
 8007a26:	0159      	lsls	r1, r3, #5
 8007a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a2c:	0150      	lsls	r0, r2, #5
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	ebb2 080a 	subs.w	r8, r2, sl
 8007a36:	eb63 090b 	sbc.w	r9, r3, fp
 8007a3a:	f04f 0200 	mov.w	r2, #0
 8007a3e:	f04f 0300 	mov.w	r3, #0
 8007a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8007a52:	eb63 0509 	sbc.w	r5, r3, r9
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	00eb      	lsls	r3, r5, #3
 8007a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a64:	00e2      	lsls	r2, r4, #3
 8007a66:	4614      	mov	r4, r2
 8007a68:	461d      	mov	r5, r3
 8007a6a:	eb14 030a 	adds.w	r3, r4, sl
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	eb45 030b 	adc.w	r3, r5, fp
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a82:	4629      	mov	r1, r5
 8007a84:	028b      	lsls	r3, r1, #10
 8007a86:	4621      	mov	r1, r4
 8007a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	028a      	lsls	r2, r1, #10
 8007a90:	4610      	mov	r0, r2
 8007a92:	4619      	mov	r1, r3
 8007a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a96:	2200      	movs	r2, #0
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	60fa      	str	r2, [r7, #12]
 8007a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007aa0:	f7f8 fb9a 	bl	80001d8 <__aeabi_uldivmod>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007aac:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x180>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007abc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ac6:	e002      	b.n	8007ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ac8:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3740      	adds	r7, #64	@ 0x40
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ada:	bf00      	nop
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	00f42400 	.word	0x00f42400
 8007ae4:	017d7840 	.word	0x017d7840

08007ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007aec:	4b03      	ldr	r3, [pc, #12]	@ (8007afc <HAL_RCC_GetHCLKFreq+0x14>)
 8007aee:	681b      	ldr	r3, [r3, #0]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20000030 	.word	0x20000030

08007b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b04:	f7ff fff0 	bl	8007ae8 <HAL_RCC_GetHCLKFreq>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	4b05      	ldr	r3, [pc, #20]	@ (8007b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	0a9b      	lsrs	r3, r3, #10
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	4903      	ldr	r1, [pc, #12]	@ (8007b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b16:	5ccb      	ldrb	r3, [r1, r3]
 8007b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	40023800 	.word	0x40023800
 8007b24:	0800c784 	.word	0x0800c784

08007b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e041      	b.n	8007bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7f9 fe30 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f000 fab2 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
	...

08007bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d001      	beq.n	8007be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e044      	b.n	8007c6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007c78 <HAL_TIM_Base_Start_IT+0xb0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d018      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x6c>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0a:	d013      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x6c>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a1a      	ldr	r2, [pc, #104]	@ (8007c7c <HAL_TIM_Base_Start_IT+0xb4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00e      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x6c>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a19      	ldr	r2, [pc, #100]	@ (8007c80 <HAL_TIM_Base_Start_IT+0xb8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d009      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x6c>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a17      	ldr	r2, [pc, #92]	@ (8007c84 <HAL_TIM_Base_Start_IT+0xbc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d004      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x6c>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a16      	ldr	r2, [pc, #88]	@ (8007c88 <HAL_TIM_Base_Start_IT+0xc0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d111      	bne.n	8007c58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b06      	cmp	r3, #6
 8007c44:	d010      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0201 	orr.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	e007      	b.n	8007c68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800
 8007c84:	40000c00 	.word	0x40000c00
 8007c88:	40014000 	.word	0x40014000

08007c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d020      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01b      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0202 	mvn.w	r2, #2
 8007cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f9db 	bl	8008092 <HAL_TIM_IC_CaptureCallback>
 8007cdc:	e005      	b.n	8007cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f9cd 	bl	800807e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9de 	bl	80080a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d020      	beq.n	8007d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01b      	beq.n	8007d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0204 	mvn.w	r2, #4
 8007d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9b5 	bl	8008092 <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9a7 	bl	800807e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9b8 	bl	80080a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d020      	beq.n	8007d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0308 	and.w	r3, r3, #8
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01b      	beq.n	8007d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0208 	mvn.w	r2, #8
 8007d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f003 0303 	and.w	r3, r3, #3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f98f 	bl	8008092 <HAL_TIM_IC_CaptureCallback>
 8007d74:	e005      	b.n	8007d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f981 	bl	800807e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f992 	bl	80080a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0310 	and.w	r3, r3, #16
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d020      	beq.n	8007dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0310 	and.w	r3, r3, #16
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01b      	beq.n	8007dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0210 	mvn.w	r2, #16
 8007da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2208      	movs	r2, #8
 8007daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f969 	bl	8008092 <HAL_TIM_IC_CaptureCallback>
 8007dc0:	e005      	b.n	8007dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f95b 	bl	800807e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f96c 	bl	80080a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00c      	beq.n	8007df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d007      	beq.n	8007df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0201 	mvn.w	r2, #1
 8007df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7f8 fbb6 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00c      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fb84 	bl	8008524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f93d 	bl	80080ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00c      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d007      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0220 	mvn.w	r2, #32
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fb56 	bl	8008510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_TIM_ConfigClockSource+0x1c>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e0b4      	b.n	8007ff2 <HAL_TIM_ConfigClockSource+0x186>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec0:	d03e      	beq.n	8007f40 <HAL_TIM_ConfigClockSource+0xd4>
 8007ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec6:	f200 8087 	bhi.w	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ece:	f000 8086 	beq.w	8007fde <HAL_TIM_ConfigClockSource+0x172>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed6:	d87f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed8:	2b70      	cmp	r3, #112	@ 0x70
 8007eda:	d01a      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0xa6>
 8007edc:	2b70      	cmp	r3, #112	@ 0x70
 8007ede:	d87b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee0:	2b60      	cmp	r3, #96	@ 0x60
 8007ee2:	d050      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x11a>
 8007ee4:	2b60      	cmp	r3, #96	@ 0x60
 8007ee6:	d877      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee8:	2b50      	cmp	r3, #80	@ 0x50
 8007eea:	d03c      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0xfa>
 8007eec:	2b50      	cmp	r3, #80	@ 0x50
 8007eee:	d873      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef0:	2b40      	cmp	r3, #64	@ 0x40
 8007ef2:	d058      	beq.n	8007fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d86f      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b30      	cmp	r3, #48	@ 0x30
 8007efa:	d064      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007efc:	2b30      	cmp	r3, #48	@ 0x30
 8007efe:	d86b      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d060      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d867      	bhi.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d05c      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d05a      	beq.n	8007fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8007f10:	e062      	b.n	8007fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f22:	f000 fa66 	bl	80083f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	609a      	str	r2, [r3, #8]
      break;
 8007f3e:	e04f      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f50:	f000 fa4f 	bl	80083f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f62:	609a      	str	r2, [r3, #8]
      break;
 8007f64:	e03c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 f9c3 	bl	80082fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2150      	movs	r1, #80	@ 0x50
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fa1c 	bl	80083bc <TIM_ITRx_SetConfig>
      break;
 8007f84:	e02c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f92:	461a      	mov	r2, r3
 8007f94:	f000 f9e2 	bl	800835c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2160      	movs	r1, #96	@ 0x60
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fa0c 	bl	80083bc <TIM_ITRx_SetConfig>
      break;
 8007fa4:	e01c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f000 f9a3 	bl	80082fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2140      	movs	r1, #64	@ 0x40
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f9fc 	bl	80083bc <TIM_ITRx_SetConfig>
      break;
 8007fc4:	e00c      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	f000 f9f3 	bl	80083bc <TIM_ITRx_SetConfig>
      break;
 8007fd6:	e003      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	73fb      	strb	r3, [r7, #15]
      break;
 8007fdc:	e000      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_TIM_SlaveConfigSynchro+0x18>
 800800e:	2302      	movs	r3, #2
 8008010:	e031      	b.n	8008076 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8d9 	bl	80081dc <TIM_SlaveTimer_SetConfig>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e018      	b.n	8008076 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68da      	ldr	r2, [r3, #12]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008052:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008062:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080ba:	b480      	push	{r7}
 80080bc:	b083      	sub	sp, #12
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080c2:	bf00      	nop
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a37      	ldr	r2, [pc, #220]	@ (80081c0 <TIM_Base_SetConfig+0xf0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00f      	beq.n	8008108 <TIM_Base_SetConfig+0x38>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ee:	d00b      	beq.n	8008108 <TIM_Base_SetConfig+0x38>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a34      	ldr	r2, [pc, #208]	@ (80081c4 <TIM_Base_SetConfig+0xf4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d007      	beq.n	8008108 <TIM_Base_SetConfig+0x38>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a33      	ldr	r2, [pc, #204]	@ (80081c8 <TIM_Base_SetConfig+0xf8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_Base_SetConfig+0x38>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a32      	ldr	r2, [pc, #200]	@ (80081cc <TIM_Base_SetConfig+0xfc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d108      	bne.n	800811a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800810e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a28      	ldr	r2, [pc, #160]	@ (80081c0 <TIM_Base_SetConfig+0xf0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d01b      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008128:	d017      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a25      	ldr	r2, [pc, #148]	@ (80081c4 <TIM_Base_SetConfig+0xf4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d013      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a24      	ldr	r2, [pc, #144]	@ (80081c8 <TIM_Base_SetConfig+0xf8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d00f      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a23      	ldr	r2, [pc, #140]	@ (80081cc <TIM_Base_SetConfig+0xfc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00b      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a22      	ldr	r2, [pc, #136]	@ (80081d0 <TIM_Base_SetConfig+0x100>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d007      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a21      	ldr	r2, [pc, #132]	@ (80081d4 <TIM_Base_SetConfig+0x104>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d003      	beq.n	800815a <TIM_Base_SetConfig+0x8a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a20      	ldr	r2, [pc, #128]	@ (80081d8 <TIM_Base_SetConfig+0x108>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d108      	bne.n	800816c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	4313      	orrs	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a0c      	ldr	r2, [pc, #48]	@ (80081c0 <TIM_Base_SetConfig+0xf0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d103      	bne.n	800819a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f043 0204 	orr.w	r2, r3, #4
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	601a      	str	r2, [r3, #0]
}
 80081b2:	bf00      	nop
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40000400 	.word	0x40000400
 80081c8:	40000800 	.word	0x40000800
 80081cc:	40000c00 	.word	0x40000c00
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400
 80081d8:	40014800 	.word	0x40014800

080081dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b70      	cmp	r3, #112	@ 0x70
 8008224:	d01a      	beq.n	800825c <TIM_SlaveTimer_SetConfig+0x80>
 8008226:	2b70      	cmp	r3, #112	@ 0x70
 8008228:	d860      	bhi.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
 800822a:	2b60      	cmp	r3, #96	@ 0x60
 800822c:	d054      	beq.n	80082d8 <TIM_SlaveTimer_SetConfig+0xfc>
 800822e:	2b60      	cmp	r3, #96	@ 0x60
 8008230:	d85c      	bhi.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
 8008232:	2b50      	cmp	r3, #80	@ 0x50
 8008234:	d046      	beq.n	80082c4 <TIM_SlaveTimer_SetConfig+0xe8>
 8008236:	2b50      	cmp	r3, #80	@ 0x50
 8008238:	d858      	bhi.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
 800823a:	2b40      	cmp	r3, #64	@ 0x40
 800823c:	d019      	beq.n	8008272 <TIM_SlaveTimer_SetConfig+0x96>
 800823e:	2b40      	cmp	r3, #64	@ 0x40
 8008240:	d854      	bhi.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
 8008242:	2b30      	cmp	r3, #48	@ 0x30
 8008244:	d055      	beq.n	80082f2 <TIM_SlaveTimer_SetConfig+0x116>
 8008246:	2b30      	cmp	r3, #48	@ 0x30
 8008248:	d850      	bhi.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
 800824a:	2b20      	cmp	r3, #32
 800824c:	d051      	beq.n	80082f2 <TIM_SlaveTimer_SetConfig+0x116>
 800824e:	2b20      	cmp	r3, #32
 8008250:	d84c      	bhi.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d04d      	beq.n	80082f2 <TIM_SlaveTimer_SetConfig+0x116>
 8008256:	2b10      	cmp	r3, #16
 8008258:	d04b      	beq.n	80082f2 <TIM_SlaveTimer_SetConfig+0x116>
 800825a:	e047      	b.n	80082ec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800826c:	f000 f8c1 	bl	80083f2 <TIM_ETR_SetConfig>
      break;
 8008270:	e040      	b.n	80082f4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b05      	cmp	r3, #5
 8008278:	d101      	bne.n	800827e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e03b      	b.n	80082f6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082a4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	621a      	str	r2, [r3, #32]
      break;
 80082c2:	e017      	b.n	80082f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082d0:	461a      	mov	r2, r3
 80082d2:	f000 f814 	bl	80082fe <TIM_TI1_ConfigInputStage>
      break;
 80082d6:	e00d      	b.n	80082f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082e4:	461a      	mov	r2, r3
 80082e6:	f000 f839 	bl	800835c <TIM_TI2_ConfigInputStage>
      break;
 80082ea:	e003      	b.n	80082f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
      break;
 80082f0:	e000      	b.n	80082f4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80082f2:	bf00      	nop
  }

  return status;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082fe:	b480      	push	{r7}
 8008300:	b087      	sub	sp, #28
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a1b      	ldr	r3, [r3, #32]
 800830e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	f023 0201 	bic.w	r2, r3, #1
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f023 030a 	bic.w	r3, r3, #10
 800833a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	621a      	str	r2, [r3, #32]
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f023 0210 	bic.w	r2, r3, #16
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	031b      	lsls	r3, r3, #12
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008398:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	621a      	str	r2, [r3, #32]
}
 80083b0:	bf00      	nop
 80083b2:	371c      	adds	r7, #28
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	f043 0307 	orr.w	r3, r3, #7
 80083de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	609a      	str	r2, [r3, #8]
}
 80083e6:	bf00      	nop
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800840c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	021a      	lsls	r2, r3, #8
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	431a      	orrs	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4313      	orrs	r3, r2
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	609a      	str	r2, [r3, #8]
}
 8008426:	bf00      	nop
 8008428:	371c      	adds	r7, #28
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
	...

08008434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008448:	2302      	movs	r3, #2
 800844a:	e050      	b.n	80084ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2202      	movs	r2, #2
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4313      	orrs	r3, r2
 800847c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1c      	ldr	r2, [pc, #112]	@ (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d018      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008498:	d013      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a18      	ldr	r2, [pc, #96]	@ (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00e      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a16      	ldr	r2, [pc, #88]	@ (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d009      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a15      	ldr	r2, [pc, #84]	@ (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d004      	beq.n	80084c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a13      	ldr	r2, [pc, #76]	@ (800850c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10c      	bne.n	80084dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800
 8008508:	40000c00 	.word	0x40000c00
 800850c:	40014000 	.word	0x40014000

08008510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008538:	b084      	sub	sp, #16
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	f107 001c 	add.w	r0, r7, #28
 8008546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800854a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800854e:	2b01      	cmp	r3, #1
 8008550:	d123      	bne.n	800859a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008556:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800857a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800857e:	2b01      	cmp	r3, #1
 8008580:	d105      	bne.n	800858e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 fae8 	bl	8009b64 <USB_CoreReset>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
 8008598:	e01b      	b.n	80085d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fadc 	bl	8009b64 <USB_CoreReset>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80085b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80085c4:	e005      	b.n	80085d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085d2:	7fbb      	ldrb	r3, [r7, #30]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d10b      	bne.n	80085f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f043 0206 	orr.w	r2, r3, #6
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	f043 0220 	orr.w	r2, r3, #32
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085fc:	b004      	add	sp, #16
 80085fe:	4770      	bx	lr

08008600 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d165      	bne.n	80086e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4a41      	ldr	r2, [pc, #260]	@ (800871c <USB_SetTurnaroundTime+0x11c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d906      	bls.n	800862a <USB_SetTurnaroundTime+0x2a>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4a40      	ldr	r2, [pc, #256]	@ (8008720 <USB_SetTurnaroundTime+0x120>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d202      	bcs.n	800862a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008624:	230f      	movs	r3, #15
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	e062      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	4a3c      	ldr	r2, [pc, #240]	@ (8008720 <USB_SetTurnaroundTime+0x120>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d306      	bcc.n	8008640 <USB_SetTurnaroundTime+0x40>
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4a3b      	ldr	r2, [pc, #236]	@ (8008724 <USB_SetTurnaroundTime+0x124>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d202      	bcs.n	8008640 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800863a:	230e      	movs	r3, #14
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e057      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4a38      	ldr	r2, [pc, #224]	@ (8008724 <USB_SetTurnaroundTime+0x124>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d306      	bcc.n	8008656 <USB_SetTurnaroundTime+0x56>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4a37      	ldr	r2, [pc, #220]	@ (8008728 <USB_SetTurnaroundTime+0x128>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d202      	bcs.n	8008656 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008650:	230d      	movs	r3, #13
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e04c      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4a33      	ldr	r2, [pc, #204]	@ (8008728 <USB_SetTurnaroundTime+0x128>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d306      	bcc.n	800866c <USB_SetTurnaroundTime+0x6c>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4a32      	ldr	r2, [pc, #200]	@ (800872c <USB_SetTurnaroundTime+0x12c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d802      	bhi.n	800866c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008666:	230c      	movs	r3, #12
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e041      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4a2f      	ldr	r2, [pc, #188]	@ (800872c <USB_SetTurnaroundTime+0x12c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d906      	bls.n	8008682 <USB_SetTurnaroundTime+0x82>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4a2e      	ldr	r2, [pc, #184]	@ (8008730 <USB_SetTurnaroundTime+0x130>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d802      	bhi.n	8008682 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800867c:	230b      	movs	r3, #11
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e036      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4a2a      	ldr	r2, [pc, #168]	@ (8008730 <USB_SetTurnaroundTime+0x130>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d906      	bls.n	8008698 <USB_SetTurnaroundTime+0x98>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4a29      	ldr	r2, [pc, #164]	@ (8008734 <USB_SetTurnaroundTime+0x134>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d802      	bhi.n	8008698 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008692:	230a      	movs	r3, #10
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e02b      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4a26      	ldr	r2, [pc, #152]	@ (8008734 <USB_SetTurnaroundTime+0x134>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d906      	bls.n	80086ae <USB_SetTurnaroundTime+0xae>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4a25      	ldr	r2, [pc, #148]	@ (8008738 <USB_SetTurnaroundTime+0x138>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d202      	bcs.n	80086ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80086a8:	2309      	movs	r3, #9
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	e020      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4a21      	ldr	r2, [pc, #132]	@ (8008738 <USB_SetTurnaroundTime+0x138>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d306      	bcc.n	80086c4 <USB_SetTurnaroundTime+0xc4>
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4a20      	ldr	r2, [pc, #128]	@ (800873c <USB_SetTurnaroundTime+0x13c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d802      	bhi.n	80086c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80086be:	2308      	movs	r3, #8
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	e015      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4a1d      	ldr	r2, [pc, #116]	@ (800873c <USB_SetTurnaroundTime+0x13c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d906      	bls.n	80086da <USB_SetTurnaroundTime+0xda>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008740 <USB_SetTurnaroundTime+0x140>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d202      	bcs.n	80086da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80086d4:	2307      	movs	r3, #7
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	e00a      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80086da:	2306      	movs	r3, #6
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	e007      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80086e0:	79fb      	ldrb	r3, [r7, #7]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80086e6:	2309      	movs	r3, #9
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	e001      	b.n	80086f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80086ec:	2309      	movs	r3, #9
 80086ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	029b      	lsls	r3, r3, #10
 8008704:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008708:	431a      	orrs	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	00d8acbf 	.word	0x00d8acbf
 8008720:	00e4e1c0 	.word	0x00e4e1c0
 8008724:	00f42400 	.word	0x00f42400
 8008728:	01067380 	.word	0x01067380
 800872c:	011a499f 	.word	0x011a499f
 8008730:	01312cff 	.word	0x01312cff
 8008734:	014ca43f 	.word	0x014ca43f
 8008738:	016e3600 	.word	0x016e3600
 800873c:	01a6ab1f 	.word	0x01a6ab1f
 8008740:	01e84800 	.word	0x01e84800

08008744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f043 0201 	orr.w	r2, r3, #1
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	370c      	adds	r7, #12
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f023 0201 	bic.w	r2, r3, #1
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d115      	bne.n	80087d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087b6:	200a      	movs	r0, #10
 80087b8:	f7f9 f988 	bl	8001acc <HAL_Delay>
      ms += 10U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	330a      	adds	r3, #10
 80087c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f93f 	bl	8009a46 <USB_GetMode>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d01e      	beq.n	800880c <USB_SetCurrentMode+0x84>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80087d2:	d9f0      	bls.n	80087b6 <USB_SetCurrentMode+0x2e>
 80087d4:	e01a      	b.n	800880c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d115      	bne.n	8008808 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087e8:	200a      	movs	r0, #10
 80087ea:	f7f9 f96f 	bl	8001acc <HAL_Delay>
      ms += 10U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	330a      	adds	r3, #10
 80087f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 f926 	bl	8009a46 <USB_GetMode>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <USB_SetCurrentMode+0x84>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2bc7      	cmp	r3, #199	@ 0xc7
 8008804:	d9f0      	bls.n	80087e8 <USB_SetCurrentMode+0x60>
 8008806:	e001      	b.n	800880c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e005      	b.n	8008818 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008810:	d101      	bne.n	8008816 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008820:	b084      	sub	sp, #16
 8008822:	b580      	push	{r7, lr}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800882e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800883a:	2300      	movs	r3, #0
 800883c:	613b      	str	r3, [r7, #16]
 800883e:	e009      	b.n	8008854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	3340      	adds	r3, #64	@ 0x40
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	2200      	movs	r2, #0
 800884c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	3301      	adds	r3, #1
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2b0e      	cmp	r3, #14
 8008858:	d9f2      	bls.n	8008840 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800885a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800885e:	2b00      	cmp	r3, #0
 8008860:	d11c      	bne.n	800889c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008870:	f043 0302 	orr.w	r3, r3, #2
 8008874:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008892:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	639a      	str	r2, [r3, #56]	@ 0x38
 800889a:	e00b      	b.n	80088b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088ba:	461a      	mov	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d10d      	bne.n	80088e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f968 	bl	8008ba8 <USB_SetDevSpeed>
 80088d8:	e008      	b.n	80088ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088da:	2101      	movs	r1, #1
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f963 	bl	8008ba8 <USB_SetDevSpeed>
 80088e2:	e003      	b.n	80088ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088e4:	2103      	movs	r1, #3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f95e 	bl	8008ba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088ec:	2110      	movs	r1, #16
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f8fa 	bl	8008ae8 <USB_FlushTxFifo>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f924 	bl	8008b4c <USB_FlushRxFifo>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008914:	461a      	mov	r2, r3
 8008916:	2300      	movs	r3, #0
 8008918:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008920:	461a      	mov	r2, r3
 8008922:	2300      	movs	r3, #0
 8008924:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800892c:	461a      	mov	r2, r3
 800892e:	2300      	movs	r3, #0
 8008930:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	e043      	b.n	80089c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800894a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800894e:	d118      	bne.n	8008982 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008962:	461a      	mov	r2, r3
 8008964:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008968:	6013      	str	r3, [r2, #0]
 800896a:	e013      	b.n	8008994 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008978:	461a      	mov	r2, r3
 800897a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	e008      	b.n	8008994 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898e:	461a      	mov	r2, r3
 8008990:	2300      	movs	r3, #0
 8008992:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a0:	461a      	mov	r2, r3
 80089a2:	2300      	movs	r3, #0
 80089a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	015a      	lsls	r2, r3, #5
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	4413      	add	r3, r2
 80089ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089b2:	461a      	mov	r2, r3
 80089b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80089b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3301      	adds	r3, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089c4:	461a      	mov	r2, r3
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d3b5      	bcc.n	8008938 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089cc:	2300      	movs	r3, #0
 80089ce:	613b      	str	r3, [r7, #16]
 80089d0:	e043      	b.n	8008a5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089e8:	d118      	bne.n	8008a1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e013      	b.n	8008a2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a12:	461a      	mov	r2, r3
 8008a14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e008      	b.n	8008a2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	3301      	adds	r3, #1
 8008a58:	613b      	str	r3, [r7, #16]
 8008a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008a5e:	461a      	mov	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d3b5      	bcc.n	80089d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008a86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d105      	bne.n	8008a9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f043 0210 	orr.w	r2, r3, #16
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <USB_DevInit+0x2c4>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f043 0208 	orr.w	r2, r3, #8
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008abc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d107      	bne.n	8008ad4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008acc:	f043 0304 	orr.w	r3, r3, #4
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ae0:	b004      	add	sp, #16
 8008ae2:	4770      	bx	lr
 8008ae4:	803c3800 	.word	0x803c3800

08008ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b02:	d901      	bls.n	8008b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e01b      	b.n	8008b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	daf2      	bge.n	8008af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	019b      	lsls	r3, r3, #6
 8008b18:	f043 0220 	orr.w	r2, r3, #32
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3301      	adds	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b2c:	d901      	bls.n	8008b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e006      	b.n	8008b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d0f0      	beq.n	8008b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b64:	d901      	bls.n	8008b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e018      	b.n	8008b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	daf2      	bge.n	8008b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2210      	movs	r2, #16
 8008b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b88:	d901      	bls.n	8008b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e006      	b.n	8008b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0310 	and.w	r3, r3, #16
 8008b96:	2b10      	cmp	r3, #16
 8008b98:	d0f0      	beq.n	8008b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bda:	b480      	push	{r7}
 8008bdc:	b087      	sub	sp, #28
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0306 	and.w	r3, r3, #6
 8008bf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d102      	bne.n	8008c00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	75fb      	strb	r3, [r7, #23]
 8008bfe:	e00a      	b.n	8008c16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d002      	beq.n	8008c0c <USB_GetDevSpeed+0x32>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b06      	cmp	r3, #6
 8008c0a:	d102      	bne.n	8008c12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	75fb      	strb	r3, [r7, #23]
 8008c10:	e001      	b.n	8008c16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c12:	230f      	movs	r3, #15
 8008c14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	371c      	adds	r7, #28
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	785b      	ldrb	r3, [r3, #1]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d13a      	bne.n	8008cb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c46:	69da      	ldr	r2, [r3, #28]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 030f 	and.w	r3, r3, #15
 8008c50:	2101      	movs	r1, #1
 8008c52:	fa01 f303 	lsl.w	r3, r1, r3
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d155      	bne.n	8008d24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	791b      	ldrb	r3, [r3, #4]
 8008c92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	059b      	lsls	r3, r3, #22
 8008c9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	e036      	b.n	8008d24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ccc:	041b      	lsls	r3, r3, #16
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11a      	bne.n	8008d24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	791b      	ldrb	r3, [r3, #4]
 8008d08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d0a:	430b      	orrs	r3, r1
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d161      	bne.n	8008e14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d66:	d11f      	bne.n	8008da8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	0151      	lsls	r1, r2, #5
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	440a      	add	r2, r1
 8008d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008da6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	43db      	mvns	r3, r3
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dc8:	4013      	ands	r3, r2
 8008dca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd2:	69da      	ldr	r2, [r3, #28]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f303 	lsl.w	r3, r1, r3
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dec:	4013      	ands	r3, r2
 8008dee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	0159      	lsls	r1, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	440b      	add	r3, r1
 8008e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4b35      	ldr	r3, [pc, #212]	@ (8008ee4 <USB_DeactivateEndpoint+0x1b0>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	600b      	str	r3, [r1, #0]
 8008e12:	e060      	b.n	8008ed6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e2a:	d11f      	bne.n	8008e6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	0151      	lsls	r1, r2, #5
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	440a      	add	r2, r1
 8008e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e82:	041b      	lsls	r3, r3, #16
 8008e84:	43db      	mvns	r3, r3
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e96:	69da      	ldr	r2, [r3, #28]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	43db      	mvns	r3, r3
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	0159      	lsls	r1, r3, #5
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	440b      	add	r3, r1
 8008eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4b05      	ldr	r3, [pc, #20]	@ (8008ee8 <USB_DeactivateEndpoint+0x1b4>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	ec337800 	.word	0xec337800
 8008ee8:	eff37800 	.word	0xeff37800

08008eec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08a      	sub	sp, #40	@ 0x28
 8008ef0:	af02      	add	r7, sp, #8
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	785b      	ldrb	r3, [r3, #1]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	f040 817f 	bne.w	800920c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d132      	bne.n	8008f7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	0151      	lsls	r1, r2, #5
 8008f28:	69fa      	ldr	r2, [r7, #28]
 8008f2a:	440a      	add	r2, r1
 8008f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	69ba      	ldr	r2, [r7, #24]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f74:	0cdb      	lsrs	r3, r3, #19
 8008f76:	04db      	lsls	r3, r3, #19
 8008f78:	6113      	str	r3, [r2, #16]
 8008f7a:	e097      	b.n	80090ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	0151      	lsls	r1, r2, #5
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	440a      	add	r2, r1
 8008f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f96:	0cdb      	lsrs	r3, r3, #19
 8008f98:	04db      	lsls	r3, r3, #19
 8008f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008fba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008fbe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d11a      	bne.n	8008ffc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d903      	bls.n	8008fda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	689a      	ldr	r2, [r3, #8]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	0151      	lsls	r1, r2, #5
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	440a      	add	r2, r1
 8008ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ff8:	6113      	str	r3, [r2, #16]
 8008ffa:	e044      	b.n	8009086 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	691a      	ldr	r2, [r3, #16]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	4413      	add	r3, r2
 8009006:	1e5a      	subs	r2, r3, #1
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009010:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	8afb      	ldrh	r3, [r7, #22]
 8009022:	04d9      	lsls	r1, r3, #19
 8009024:	4ba4      	ldr	r3, [pc, #656]	@ (80092b8 <USB_EPStartXfer+0x3cc>)
 8009026:	400b      	ands	r3, r1
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	0148      	lsls	r0, r1, #5
 800902c:	69f9      	ldr	r1, [r7, #28]
 800902e:	4401      	add	r1, r0
 8009030:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009034:	4313      	orrs	r3, r2
 8009036:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	791b      	ldrb	r3, [r3, #4]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d122      	bne.n	8009086 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	440a      	add	r2, r1
 8009056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800905a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800905e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	8afb      	ldrh	r3, [r7, #22]
 8009070:	075b      	lsls	r3, r3, #29
 8009072:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009076:	69b9      	ldr	r1, [r7, #24]
 8009078:	0148      	lsls	r0, r1, #5
 800907a:	69f9      	ldr	r1, [r7, #28]
 800907c:	4401      	add	r1, r0
 800907e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009082:	4313      	orrs	r3, r2
 8009084:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800909c:	69b9      	ldr	r1, [r7, #24]
 800909e:	0148      	lsls	r0, r1, #5
 80090a0:	69f9      	ldr	r1, [r7, #28]
 80090a2:	4401      	add	r1, r0
 80090a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80090a8:	4313      	orrs	r3, r2
 80090aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d14b      	bne.n	800914a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d009      	beq.n	80090ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c6:	461a      	mov	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	791b      	ldrb	r3, [r3, #4]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d128      	bne.n	8009128 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d110      	bne.n	8009108 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	e00f      	b.n	8009128 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009126:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	0151      	lsls	r1, r2, #5
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	440a      	add	r2, r1
 800913e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009142:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	e166      	b.n	8009418 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	015a      	lsls	r2, r3, #5
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	0151      	lsls	r1, r2, #5
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	440a      	add	r2, r1
 8009160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009164:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009168:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	791b      	ldrb	r3, [r3, #4]
 800916e:	2b01      	cmp	r3, #1
 8009170:	d015      	beq.n	800919e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 814e 	beq.w	8009418 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	2101      	movs	r1, #1
 800918e:	fa01 f303 	lsl.w	r3, r1, r3
 8009192:	69f9      	ldr	r1, [r7, #28]
 8009194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009198:	4313      	orrs	r3, r2
 800919a:	634b      	str	r3, [r1, #52]	@ 0x34
 800919c:	e13c      	b.n	8009418 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d110      	bne.n	80091d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	0151      	lsls	r1, r2, #5
 80091c0:	69fa      	ldr	r2, [r7, #28]
 80091c2:	440a      	add	r2, r1
 80091c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e00f      	b.n	80091f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	68d9      	ldr	r1, [r3, #12]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	781a      	ldrb	r2, [r3, #0]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	b298      	uxth	r0, r3
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	4603      	mov	r3, r0
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f000 f9b9 	bl	800957c <USB_WritePacket>
 800920a:	e105      	b.n	8009418 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	0151      	lsls	r1, r2, #5
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	440a      	add	r2, r1
 8009222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009226:	0cdb      	lsrs	r3, r3, #19
 8009228:	04db      	lsls	r3, r3, #19
 800922a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	69ba      	ldr	r2, [r7, #24]
 800923c:	0151      	lsls	r1, r2, #5
 800923e:	69fa      	ldr	r2, [r7, #28]
 8009240:	440a      	add	r2, r1
 8009242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009246:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800924a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800924e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d132      	bne.n	80092bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	015a      	lsls	r2, r3, #5
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927a:	691a      	ldr	r2, [r3, #16]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009284:	69b9      	ldr	r1, [r7, #24]
 8009286:	0148      	lsls	r0, r1, #5
 8009288:	69f9      	ldr	r1, [r7, #28]
 800928a:	4401      	add	r1, r0
 800928c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009290:	4313      	orrs	r3, r2
 8009292:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80092b2:	6113      	str	r3, [r2, #16]
 80092b4:	e062      	b.n	800937c <USB_EPStartXfer+0x490>
 80092b6:	bf00      	nop
 80092b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d123      	bne.n	800930c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092da:	69b9      	ldr	r1, [r7, #24]
 80092dc:	0148      	lsls	r0, r1, #5
 80092de:	69f9      	ldr	r1, [r7, #28]
 80092e0:	4401      	add	r1, r0
 80092e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80092e6:	4313      	orrs	r3, r2
 80092e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	0151      	lsls	r1, r2, #5
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	440a      	add	r2, r1
 8009300:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009304:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009308:	6113      	str	r3, [r2, #16]
 800930a:	e037      	b.n	800937c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	4413      	add	r3, r2
 8009316:	1e5a      	subs	r2, r3, #1
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009320:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	8afa      	ldrh	r2, [r7, #22]
 8009328:	fb03 f202 	mul.w	r2, r3, r2
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933c:	691a      	ldr	r2, [r3, #16]
 800933e:	8afb      	ldrh	r3, [r7, #22]
 8009340:	04d9      	lsls	r1, r3, #19
 8009342:	4b38      	ldr	r3, [pc, #224]	@ (8009424 <USB_EPStartXfer+0x538>)
 8009344:	400b      	ands	r3, r1
 8009346:	69b9      	ldr	r1, [r7, #24]
 8009348:	0148      	lsls	r0, r1, #5
 800934a:	69f9      	ldr	r1, [r7, #28]
 800934c:	4401      	add	r1, r0
 800934e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009352:	4313      	orrs	r3, r2
 8009354:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800936c:	69b9      	ldr	r1, [r7, #24]
 800936e:	0148      	lsls	r0, r1, #5
 8009370:	69f9      	ldr	r1, [r7, #28]
 8009372:	4401      	add	r1, r0
 8009374:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009378:	4313      	orrs	r3, r2
 800937a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d10d      	bne.n	800939e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	68d9      	ldr	r1, [r3, #12]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939a:	460a      	mov	r2, r1
 800939c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	791b      	ldrb	r3, [r3, #4]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d128      	bne.n	80093f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d110      	bne.n	80093d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	69fa      	ldr	r2, [r7, #28]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	e00f      	b.n	80093f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	0151      	lsls	r1, r2, #5
 80093ea:	69fa      	ldr	r2, [r7, #28]
 80093ec:	440a      	add	r2, r1
 80093ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69ba      	ldr	r2, [r7, #24]
 8009408:	0151      	lsls	r1, r2, #5
 800940a:	69fa      	ldr	r2, [r7, #28]
 800940c:	440a      	add	r2, r1
 800940e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009412:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3720      	adds	r7, #32
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	1ff80000 	.word	0x1ff80000

08009428 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d14a      	bne.n	80094dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800945a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800945e:	f040 8086 	bne.w	800956e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009480:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009484:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d902      	bls.n	80094c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]
          break;
 80094be:	e056      	b.n	800956e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094d8:	d0e7      	beq.n	80094aa <USB_EPStopXfer+0x82>
 80094da:	e048      	b.n	800956e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094f4:	d13b      	bne.n	800956e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	015a      	lsls	r2, r3, #5
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	4413      	add	r3, r2
 8009500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	7812      	ldrb	r2, [r2, #0]
 800950a:	0151      	lsls	r1, r2, #5
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	440a      	add	r2, r1
 8009510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009514:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009518:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	7812      	ldrb	r2, [r2, #0]
 800952e:	0151      	lsls	r1, r2, #5
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	440a      	add	r2, r1
 8009534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800953c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f242 7210 	movw	r2, #10000	@ 0x2710
 800954a:	4293      	cmp	r3, r2
 800954c:	d902      	bls.n	8009554 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
          break;
 8009552:	e00c      	b.n	800956e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	015a      	lsls	r2, r3, #5
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	4413      	add	r3, r2
 800955e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800956c:	d0e7      	beq.n	800953e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009570:	4618      	mov	r0, r3
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800957c:	b480      	push	{r7}
 800957e:	b089      	sub	sp, #36	@ 0x24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4611      	mov	r1, r2
 8009588:	461a      	mov	r2, r3
 800958a:	460b      	mov	r3, r1
 800958c:	71fb      	strb	r3, [r7, #7]
 800958e:	4613      	mov	r3, r2
 8009590:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800959a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d123      	bne.n	80095ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80095a2:	88bb      	ldrh	r3, [r7, #4]
 80095a4:	3303      	adds	r3, #3
 80095a6:	089b      	lsrs	r3, r3, #2
 80095a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80095aa:	2300      	movs	r3, #0
 80095ac:	61bb      	str	r3, [r7, #24]
 80095ae:	e018      	b.n	80095e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	031a      	lsls	r2, r3, #12
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095bc:	461a      	mov	r2, r3
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	3301      	adds	r3, #1
 80095c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	3301      	adds	r3, #1
 80095ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	3301      	adds	r3, #1
 80095d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	3301      	adds	r3, #1
 80095da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	3301      	adds	r3, #1
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d3e2      	bcc.n	80095b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3724      	adds	r7, #36	@ 0x24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b08b      	sub	sp, #44	@ 0x2c
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	089b      	lsrs	r3, r3, #2
 8009612:	b29b      	uxth	r3, r3
 8009614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800961e:	2300      	movs	r3, #0
 8009620:	623b      	str	r3, [r7, #32]
 8009622:	e014      	b.n	800964e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	3301      	adds	r3, #1
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	3301      	adds	r3, #1
 800963a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800963e:	3301      	adds	r3, #1
 8009640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009644:	3301      	adds	r3, #1
 8009646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	3301      	adds	r3, #1
 800964c:	623b      	str	r3, [r7, #32]
 800964e:	6a3a      	ldr	r2, [r7, #32]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	429a      	cmp	r2, r3
 8009654:	d3e6      	bcc.n	8009624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009656:	8bfb      	ldrh	r3, [r7, #30]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01e      	beq.n	800969a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009666:	461a      	mov	r2, r3
 8009668:	f107 0310 	add.w	r3, r7, #16
 800966c:	6812      	ldr	r2, [r2, #0]
 800966e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
 800967c:	b2da      	uxtb	r2, r3
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	701a      	strb	r2, [r3, #0]
      i++;
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	3301      	adds	r3, #1
 8009686:	623b      	str	r3, [r7, #32]
      pDest++;
 8009688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968a:	3301      	adds	r3, #1
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800968e:	8bfb      	ldrh	r3, [r7, #30]
 8009690:	3b01      	subs	r3, #1
 8009692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009694:	8bfb      	ldrh	r3, [r7, #30]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1ea      	bne.n	8009670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800969a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800969c:	4618      	mov	r0, r3
 800969e:	372c      	adds	r7, #44	@ 0x2c
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d12c      	bne.n	800971e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	db12      	blt.n	80096fc <USB_EPSetStall+0x54>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00f      	beq.n	80096fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80096fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009716:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	e02b      	b.n	8009776 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	db12      	blt.n	8009756 <USB_EPSetStall+0xae>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00f      	beq.n	8009756 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	015a      	lsls	r2, r3, #5
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4413      	add	r3, r2
 800973e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	0151      	lsls	r1, r2, #5
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	440a      	add	r2, r1
 800974c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009754:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	0151      	lsls	r1, r2, #5
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	440a      	add	r2, r1
 800976c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d128      	bne.n	80097f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	015a      	lsls	r2, r3, #5
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	0151      	lsls	r1, r2, #5
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	440a      	add	r2, r1
 80097b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	791b      	ldrb	r3, [r3, #4]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d003      	beq.n	80097d0 <USB_EPClearStall+0x4c>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	791b      	ldrb	r3, [r3, #4]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d138      	bne.n	8009842 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	015a      	lsls	r2, r3, #5
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	4413      	add	r3, r2
 80097d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	0151      	lsls	r1, r2, #5
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	440a      	add	r2, r1
 80097e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	e027      	b.n	8009842 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800980c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009810:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	791b      	ldrb	r3, [r3, #4]
 8009816:	2b03      	cmp	r3, #3
 8009818:	d003      	beq.n	8009822 <USB_EPClearStall+0x9e>
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	791b      	ldrb	r3, [r3, #4]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d10f      	bne.n	8009842 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	0151      	lsls	r1, r2, #5
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	440a      	add	r2, r1
 8009838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800983c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009840:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800986e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009872:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009884:	68f9      	ldr	r1, [r7, #12]
 8009886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800988a:	4313      	orrs	r3, r2
 800988c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098b6:	f023 0303 	bic.w	r3, r3, #3
 80098ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098ca:	f023 0302 	bic.w	r3, r3, #2
 80098ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098f8:	f023 0303 	bic.w	r3, r3, #3
 80098fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800990c:	f043 0302 	orr.w	r3, r3, #2
 8009910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	4013      	ands	r3, r2
 8009936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009938:	68fb      	ldr	r3, [r7, #12]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009946:	b480      	push	{r7}
 8009948:	b085      	sub	sp, #20
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	4013      	ands	r3, r2
 8009968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	0c1b      	lsrs	r3, r3, #16
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	4013      	ands	r3, r2
 800999c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	b29b      	uxth	r3, r3
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b085      	sub	sp, #20
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80099be:	78fb      	ldrb	r3, [r7, #3]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	4013      	ands	r3, r2
 80099da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099dc:	68bb      	ldr	r3, [r7, #8]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	f003 030f 	and.w	r3, r3, #15
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1a:	01db      	lsls	r3, r3, #7
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	693a      	ldr	r2, [r7, #16]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4013      	ands	r3, r2
 8009a36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a38:	68bb      	ldr	r3, [r7, #8]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	f003 0301 	and.w	r3, r3, #1
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b085      	sub	sp, #20
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009a80:	f023 0307 	bic.w	r3, r3, #7
 8009a84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	333c      	adds	r3, #60	@ 0x3c
 8009abe:	3304      	adds	r3, #4
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	4a26      	ldr	r2, [pc, #152]	@ (8009b60 <USB_EP0_OutStart+0xb8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d90a      	bls.n	8009ae2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009adc:	d101      	bne.n	8009ae2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e037      	b.n	8009b52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae8:	461a      	mov	r2, r3
 8009aea:	2300      	movs	r3, #0
 8009aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009afc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b10:	f043 0318 	orr.w	r3, r3, #24
 8009b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009b28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d10f      	bne.n	8009b50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b36:	461a      	mov	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	4f54300a 	.word	0x4f54300a

08009b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b7c:	d901      	bls.n	8009b82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e022      	b.n	8009bc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	daf2      	bge.n	8009b70 <USB_CoreReset+0xc>

  count = 10U;
 8009b8a:	230a      	movs	r3, #10
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009b8e:	e002      	b.n	8009b96 <USB_CoreReset+0x32>
  {
    count--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1f9      	bne.n	8009b90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	f043 0201 	orr.w	r2, r3, #1
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3301      	adds	r3, #1
 8009bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bb4:	d901      	bls.n	8009bba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e006      	b.n	8009bc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d0f0      	beq.n	8009ba8 <USB_CoreReset+0x44>

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009be0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009be4:	f002 fd1e 	bl	800c624 <USBD_static_malloc>
 8009be8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d109      	bne.n	8009c04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	32b0      	adds	r2, #176	@ 0xb0
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c00:	2302      	movs	r3, #2
 8009c02:	e0d4      	b.n	8009dae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c04:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c08:	2100      	movs	r1, #0
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f002 fd4e 	bl	800c6ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	32b0      	adds	r2, #176	@ 0xb0
 8009c1a:	68f9      	ldr	r1, [r7, #12]
 8009c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	32b0      	adds	r2, #176	@ 0xb0
 8009c2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	7c1b      	ldrb	r3, [r3, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d138      	bne.n	8009cae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c3c:	4b5e      	ldr	r3, [pc, #376]	@ (8009db8 <USBD_CDC_Init+0x1e4>)
 8009c3e:	7819      	ldrb	r1, [r3, #0]
 8009c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c44:	2202      	movs	r2, #2
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f002 fbc9 	bl	800c3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c4c:	4b5a      	ldr	r3, [pc, #360]	@ (8009db8 <USBD_CDC_Init+0x1e4>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	3323      	adds	r3, #35	@ 0x23
 8009c62:	2201      	movs	r2, #1
 8009c64:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c66:	4b55      	ldr	r3, [pc, #340]	@ (8009dbc <USBD_CDC_Init+0x1e8>)
 8009c68:	7819      	ldrb	r1, [r3, #0]
 8009c6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c6e:	2202      	movs	r2, #2
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f002 fbb4 	bl	800c3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c76:	4b51      	ldr	r3, [pc, #324]	@ (8009dbc <USBD_CDC_Init+0x1e8>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	f003 020f 	and.w	r2, r3, #15
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	440b      	add	r3, r1
 8009c8a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c8e:	2201      	movs	r2, #1
 8009c90:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c92:	4b4b      	ldr	r3, [pc, #300]	@ (8009dc0 <USBD_CDC_Init+0x1ec>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	f003 020f 	and.w	r2, r3, #15
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	331c      	adds	r3, #28
 8009ca8:	2210      	movs	r2, #16
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	e035      	b.n	8009d1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cae:	4b42      	ldr	r3, [pc, #264]	@ (8009db8 <USBD_CDC_Init+0x1e4>)
 8009cb0:	7819      	ldrb	r1, [r3, #0]
 8009cb2:	2340      	movs	r3, #64	@ 0x40
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f002 fb91 	bl	800c3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8009db8 <USBD_CDC_Init+0x1e4>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	3323      	adds	r3, #35	@ 0x23
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cd6:	4b39      	ldr	r3, [pc, #228]	@ (8009dbc <USBD_CDC_Init+0x1e8>)
 8009cd8:	7819      	ldrb	r1, [r3, #0]
 8009cda:	2340      	movs	r3, #64	@ 0x40
 8009cdc:	2202      	movs	r2, #2
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f002 fb7d 	bl	800c3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009ce4:	4b35      	ldr	r3, [pc, #212]	@ (8009dbc <USBD_CDC_Init+0x1e8>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	f003 020f 	and.w	r2, r3, #15
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d00:	4b2f      	ldr	r3, [pc, #188]	@ (8009dc0 <USBD_CDC_Init+0x1ec>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	f003 020f 	and.w	r2, r3, #15
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	440b      	add	r3, r1
 8009d14:	331c      	adds	r3, #28
 8009d16:	2210      	movs	r2, #16
 8009d18:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d1a:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <USBD_CDC_Init+0x1ec>)
 8009d1c:	7819      	ldrb	r1, [r3, #0]
 8009d1e:	2308      	movs	r3, #8
 8009d20:	2203      	movs	r2, #3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f002 fb5b 	bl	800c3de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d28:	4b25      	ldr	r3, [pc, #148]	@ (8009dc0 <USBD_CDC_Init+0x1ec>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 020f 	and.w	r2, r3, #15
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	3323      	adds	r3, #35	@ 0x23
 8009d3e:	2201      	movs	r2, #1
 8009d40:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	33b0      	adds	r3, #176	@ 0xb0
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d101      	bne.n	8009d7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d78:	2302      	movs	r3, #2
 8009d7a:	e018      	b.n	8009dae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	7c1b      	ldrb	r3, [r3, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d84:	4b0d      	ldr	r3, [pc, #52]	@ (8009dbc <USBD_CDC_Init+0x1e8>)
 8009d86:	7819      	ldrb	r1, [r3, #0]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 fc12 	bl	800c5bc <USBD_LL_PrepareReceive>
 8009d98:	e008      	b.n	8009dac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d9a:	4b08      	ldr	r3, [pc, #32]	@ (8009dbc <USBD_CDC_Init+0x1e8>)
 8009d9c:	7819      	ldrb	r1, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009da4:	2340      	movs	r3, #64	@ 0x40
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f002 fc08 	bl	800c5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	200000c3 	.word	0x200000c3
 8009dbc:	200000c4 	.word	0x200000c4
 8009dc0:	200000c5 	.word	0x200000c5

08009dc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8009ebc <USBD_CDC_DeInit+0xf8>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f002 fb27 	bl	800c42a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009ddc:	4b37      	ldr	r3, [pc, #220]	@ (8009ebc <USBD_CDC_DeInit+0xf8>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 020f 	and.w	r2, r3, #15
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	3323      	adds	r3, #35	@ 0x23
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009df6:	4b32      	ldr	r3, [pc, #200]	@ (8009ec0 <USBD_CDC_DeInit+0xfc>)
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f002 fb14 	bl	800c42a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e02:	4b2f      	ldr	r3, [pc, #188]	@ (8009ec0 <USBD_CDC_DeInit+0xfc>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	f003 020f 	and.w	r2, r3, #15
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	440b      	add	r3, r1
 8009e16:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e1e:	4b29      	ldr	r3, [pc, #164]	@ (8009ec4 <USBD_CDC_DeInit+0x100>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f002 fb00 	bl	800c42a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e2a:	4b26      	ldr	r3, [pc, #152]	@ (8009ec4 <USBD_CDC_DeInit+0x100>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	f003 020f 	and.w	r2, r3, #15
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	4613      	mov	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	440b      	add	r3, r1
 8009e3e:	3323      	adds	r3, #35	@ 0x23
 8009e40:	2200      	movs	r2, #0
 8009e42:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e44:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec4 <USBD_CDC_DeInit+0x100>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 020f 	and.w	r2, r3, #15
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	331c      	adds	r3, #28
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	32b0      	adds	r2, #176	@ 0xb0
 8009e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d01f      	beq.n	8009eb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	33b0      	adds	r3, #176	@ 0xb0
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	32b0      	adds	r2, #176	@ 0xb0
 8009e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 fbd4 	bl	800c640 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	32b0      	adds	r2, #176	@ 0xb0
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	200000c3 	.word	0x200000c3
 8009ec0:	200000c4 	.word	0x200000c4
 8009ec4:	200000c5 	.word	0x200000c5

08009ec8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	32b0      	adds	r2, #176	@ 0xb0
 8009edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e0bf      	b.n	800a078 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d050      	beq.n	8009fa6 <USBD_CDC_Setup+0xde>
 8009f04:	2b20      	cmp	r3, #32
 8009f06:	f040 80af 	bne.w	800a068 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d03a      	beq.n	8009f88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	da1b      	bge.n	8009f54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	33b0      	adds	r3, #176	@ 0xb0
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	683a      	ldr	r2, [r7, #0]
 8009f30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	88d2      	ldrh	r2, [r2, #6]
 8009f38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	88db      	ldrh	r3, [r3, #6]
 8009f3e:	2b07      	cmp	r3, #7
 8009f40:	bf28      	it	cs
 8009f42:	2307      	movcs	r3, #7
 8009f44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	89fa      	ldrh	r2, [r7, #14]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 fda9 	bl	800baa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f52:	e090      	b.n	800a076 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	785a      	ldrb	r2, [r3, #1]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	88db      	ldrh	r3, [r3, #6]
 8009f62:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f64:	d803      	bhi.n	8009f6e <USBD_CDC_Setup+0xa6>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	88db      	ldrh	r3, [r3, #6]
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	e000      	b.n	8009f70 <USBD_CDC_Setup+0xa8>
 8009f6e:	2240      	movs	r2, #64	@ 0x40
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f76:	6939      	ldr	r1, [r7, #16]
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 fdbe 	bl	800bb02 <USBD_CtlPrepareRx>
      break;
 8009f86:	e076      	b.n	800a076 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	33b0      	adds	r3, #176	@ 0xb0
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	7850      	ldrb	r0, [r2, #1]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	4798      	blx	r3
      break;
 8009fa4:	e067      	b.n	800a076 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	2b0b      	cmp	r3, #11
 8009fac:	d851      	bhi.n	800a052 <USBD_CDC_Setup+0x18a>
 8009fae:	a201      	add	r2, pc, #4	@ (adr r2, 8009fb4 <USBD_CDC_Setup+0xec>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	08009fe5 	.word	0x08009fe5
 8009fb8:	0800a061 	.word	0x0800a061
 8009fbc:	0800a053 	.word	0x0800a053
 8009fc0:	0800a053 	.word	0x0800a053
 8009fc4:	0800a053 	.word	0x0800a053
 8009fc8:	0800a053 	.word	0x0800a053
 8009fcc:	0800a053 	.word	0x0800a053
 8009fd0:	0800a053 	.word	0x0800a053
 8009fd4:	0800a053 	.word	0x0800a053
 8009fd8:	0800a053 	.word	0x0800a053
 8009fdc:	0800a00f 	.word	0x0800a00f
 8009fe0:	0800a039 	.word	0x0800a039
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d107      	bne.n	800a000 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ff0:	f107 030a 	add.w	r3, r7, #10
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 fd53 	bl	800baa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ffe:	e032      	b.n	800a066 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fcd1 	bl	800b9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	75fb      	strb	r3, [r7, #23]
          break;
 800a00c:	e02b      	b.n	800a066 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b03      	cmp	r3, #3
 800a018:	d107      	bne.n	800a02a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a01a:	f107 030d 	add.w	r3, r7, #13
 800a01e:	2201      	movs	r2, #1
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f001 fd3e 	bl	800baa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a028:	e01d      	b.n	800a066 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 fcbc 	bl	800b9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800a032:	2303      	movs	r3, #3
 800a034:	75fb      	strb	r3, [r7, #23]
          break;
 800a036:	e016      	b.n	800a066 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b03      	cmp	r3, #3
 800a042:	d00f      	beq.n	800a064 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f001 fcaf 	bl	800b9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800a04c:	2303      	movs	r3, #3
 800a04e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a050:	e008      	b.n	800a064 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f001 fca8 	bl	800b9aa <USBD_CtlError>
          ret = USBD_FAIL;
 800a05a:	2303      	movs	r3, #3
 800a05c:	75fb      	strb	r3, [r7, #23]
          break;
 800a05e:	e002      	b.n	800a066 <USBD_CDC_Setup+0x19e>
          break;
 800a060:	bf00      	nop
 800a062:	e008      	b.n	800a076 <USBD_CDC_Setup+0x1ae>
          break;
 800a064:	bf00      	nop
      }
      break;
 800a066:	e006      	b.n	800a076 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f001 fc9d 	bl	800b9aa <USBD_CtlError>
      ret = USBD_FAIL;
 800a070:	2303      	movs	r3, #3
 800a072:	75fb      	strb	r3, [r7, #23]
      break;
 800a074:	bf00      	nop
  }

  return (uint8_t)ret;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	32b0      	adds	r2, #176	@ 0xb0
 800a09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e065      	b.n	800a176 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	32b0      	adds	r2, #176	@ 0xb0
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	f003 020f 	and.w	r2, r3, #15
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3314      	adds	r3, #20
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d02f      	beq.n	800a134 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	f003 020f 	and.w	r2, r3, #15
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	f003 010f 	and.w	r1, r3, #15
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	440b      	add	r3, r1
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4403      	add	r3, r0
 800a0fc:	331c      	adds	r3, #28
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	fbb2 f1f3 	udiv	r1, r2, r3
 800a104:	fb01 f303 	mul.w	r3, r1, r3
 800a108:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d112      	bne.n	800a134 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a10e:	78fb      	ldrb	r3, [r7, #3]
 800a110:	f003 020f 	and.w	r2, r3, #15
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	4613      	mov	r3, r2
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	440b      	add	r3, r1
 800a120:	3314      	adds	r3, #20
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a126:	78f9      	ldrb	r1, [r7, #3]
 800a128:	2300      	movs	r3, #0
 800a12a:	2200      	movs	r2, #0
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f002 fa24 	bl	800c57a <USBD_LL_Transmit>
 800a132:	e01f      	b.n	800a174 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2200      	movs	r2, #0
 800a138:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	33b0      	adds	r3, #176	@ 0xb0
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d010      	beq.n	800a174 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	33b0      	adds	r3, #176	@ 0xb0
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a170:	78fa      	ldrb	r2, [r7, #3]
 800a172:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}

0800a17e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a17e:	b580      	push	{r7, lr}
 800a180:	b084      	sub	sp, #16
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	32b0      	adds	r2, #176	@ 0xb0
 800a194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a198:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	32b0      	adds	r2, #176	@ 0xb0
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e01a      	b.n	800a1e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1b0:	78fb      	ldrb	r3, [r7, #3]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f002 fa22 	bl	800c5fe <USBD_LL_GetRxDataSize>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	33b0      	adds	r3, #176	@ 0xb0
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	32b0      	adds	r2, #176	@ 0xb0
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e024      	b.n	800a25a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	33b0      	adds	r3, #176	@ 0xb0
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	4413      	add	r3, r2
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d019      	beq.n	800a258 <USBD_CDC_EP0_RxReady+0x6a>
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a22a:	2bff      	cmp	r3, #255	@ 0xff
 800a22c:	d014      	beq.n	800a258 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	33b0      	adds	r3, #176	@ 0xb0
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a246:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a24e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	22ff      	movs	r2, #255	@ 0xff
 800a254:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
	...

0800a264 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a26c:	2182      	movs	r1, #130	@ 0x82
 800a26e:	4818      	ldr	r0, [pc, #96]	@ (800a2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a270:	f000 fd62 	bl	800ad38 <USBD_GetEpDesc>
 800a274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a276:	2101      	movs	r1, #1
 800a278:	4815      	ldr	r0, [pc, #84]	@ (800a2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a27a:	f000 fd5d 	bl	800ad38 <USBD_GetEpDesc>
 800a27e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a280:	2181      	movs	r1, #129	@ 0x81
 800a282:	4813      	ldr	r0, [pc, #76]	@ (800a2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a284:	f000 fd58 	bl	800ad38 <USBD_GetEpDesc>
 800a288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2210      	movs	r2, #16
 800a294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d006      	beq.n	800a2aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2a4:	711a      	strb	r2, [r3, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d006      	beq.n	800a2be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2b8:	711a      	strb	r2, [r3, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2243      	movs	r2, #67	@ 0x43
 800a2c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2c4:	4b02      	ldr	r3, [pc, #8]	@ (800a2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000080 	.word	0x20000080

0800a2d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2dc:	2182      	movs	r1, #130	@ 0x82
 800a2de:	4818      	ldr	r0, [pc, #96]	@ (800a340 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2e0:	f000 fd2a 	bl	800ad38 <USBD_GetEpDesc>
 800a2e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2e6:	2101      	movs	r1, #1
 800a2e8:	4815      	ldr	r0, [pc, #84]	@ (800a340 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2ea:	f000 fd25 	bl	800ad38 <USBD_GetEpDesc>
 800a2ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2f0:	2181      	movs	r1, #129	@ 0x81
 800a2f2:	4813      	ldr	r0, [pc, #76]	@ (800a340 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2f4:	f000 fd20 	bl	800ad38 <USBD_GetEpDesc>
 800a2f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2210      	movs	r2, #16
 800a304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	2200      	movs	r2, #0
 800a310:	711a      	strb	r2, [r3, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f042 0202 	orr.w	r2, r2, #2
 800a318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d006      	beq.n	800a32e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	711a      	strb	r2, [r3, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f042 0202 	orr.w	r2, r2, #2
 800a32c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2243      	movs	r2, #67	@ 0x43
 800a332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20000080 	.word	0x20000080

0800a344 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a34c:	2182      	movs	r1, #130	@ 0x82
 800a34e:	4818      	ldr	r0, [pc, #96]	@ (800a3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a350:	f000 fcf2 	bl	800ad38 <USBD_GetEpDesc>
 800a354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a356:	2101      	movs	r1, #1
 800a358:	4815      	ldr	r0, [pc, #84]	@ (800a3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a35a:	f000 fced 	bl	800ad38 <USBD_GetEpDesc>
 800a35e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a360:	2181      	movs	r1, #129	@ 0x81
 800a362:	4813      	ldr	r0, [pc, #76]	@ (800a3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a364:	f000 fce8 	bl	800ad38 <USBD_GetEpDesc>
 800a368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	2210      	movs	r2, #16
 800a374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d006      	beq.n	800a38a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2200      	movs	r2, #0
 800a380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a384:	711a      	strb	r2, [r3, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d006      	beq.n	800a39e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a398:	711a      	strb	r2, [r3, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2243      	movs	r2, #67	@ 0x43
 800a3a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	@ (800a3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20000080 	.word	0x20000080

0800a3b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	220a      	movs	r2, #10
 800a3c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3c2:	4b03      	ldr	r3, [pc, #12]	@ (800a3d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	2000003c 	.word	0x2000003c

0800a3d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e009      	b.n	800a3fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	33b0      	adds	r3, #176	@ 0xb0
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	4413      	add	r3, r2
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	32b0      	adds	r2, #176	@ 0xb0
 800a41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a422:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e008      	b.n	800a440 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b085      	sub	sp, #20
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	32b0      	adds	r2, #176	@ 0xb0
 800a460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e004      	b.n	800a47a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
	...

0800a488 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	32b0      	adds	r2, #176	@ 0xb0
 800a49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e025      	b.n	800a4fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d11f      	bne.n	800a4f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a4c0:	4b10      	ldr	r3, [pc, #64]	@ (800a504 <USBD_CDC_TransmitPacket+0x7c>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	f003 020f 	and.w	r2, r3, #15
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4403      	add	r3, r0
 800a4da:	3314      	adds	r3, #20
 800a4dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a4de:	4b09      	ldr	r3, [pc, #36]	@ (800a504 <USBD_CDC_TransmitPacket+0x7c>)
 800a4e0:	7819      	ldrb	r1, [r3, #0]
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f002 f843 	bl	800c57a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	200000c3 	.word	0x200000c3

0800a508 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	32b0      	adds	r2, #176	@ 0xb0
 800a51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32b0      	adds	r2, #176	@ 0xb0
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	e018      	b.n	800a568 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	7c1b      	ldrb	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a53e:	4b0c      	ldr	r3, [pc, #48]	@ (800a570 <USBD_CDC_ReceivePacket+0x68>)
 800a540:	7819      	ldrb	r1, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f002 f835 	bl	800c5bc <USBD_LL_PrepareReceive>
 800a552:	e008      	b.n	800a566 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a554:	4b06      	ldr	r3, [pc, #24]	@ (800a570 <USBD_CDC_ReceivePacket+0x68>)
 800a556:	7819      	ldrb	r1, [r3, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a55e:	2340      	movs	r3, #64	@ 0x40
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f002 f82b 	bl	800c5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	200000c4 	.word	0x200000c4

0800a574 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a588:	2303      	movs	r3, #3
 800a58a:	e01f      	b.n	800a5cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d003      	beq.n	800a5b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	79fa      	ldrb	r2, [r7, #7]
 800a5be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f001 fea5 	bl	800c310 <USBD_LL_Init>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3718      	adds	r7, #24
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e025      	b.n	800a638 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	32ae      	adds	r2, #174	@ 0xae
 800a5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00f      	beq.n	800a628 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	32ae      	adds	r2, #174	@ 0xae
 800a612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a618:	f107 020e 	add.w	r2, r7, #14
 800a61c:	4610      	mov	r0, r2
 800a61e:	4798      	blx	r3
 800a620:	4602      	mov	r2, r0
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 fead 	bl	800c3a8 <USBD_LL_Start>
 800a64e:	4603      	mov	r3, r0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a684:	2b00      	cmp	r3, #0
 800a686:	d009      	beq.n	800a69c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	4611      	mov	r1, r2
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	4798      	blx	r3
 800a698:	4603      	mov	r3, r0
 800a69a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	78fa      	ldrb	r2, [r7, #3]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	4798      	blx	r3
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6ea:	6839      	ldr	r1, [r7, #0]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 f922 	bl	800b936 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a700:	461a      	mov	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a70e:	f003 031f 	and.w	r3, r3, #31
 800a712:	2b02      	cmp	r3, #2
 800a714:	d01a      	beq.n	800a74c <USBD_LL_SetupStage+0x72>
 800a716:	2b02      	cmp	r3, #2
 800a718:	d822      	bhi.n	800a760 <USBD_LL_SetupStage+0x86>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <USBD_LL_SetupStage+0x4a>
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d00a      	beq.n	800a738 <USBD_LL_SetupStage+0x5e>
 800a722:	e01d      	b.n	800a760 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a72a:	4619      	mov	r1, r3
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fb77 	bl	800ae20 <USBD_StdDevReq>
 800a732:	4603      	mov	r3, r0
 800a734:	73fb      	strb	r3, [r7, #15]
      break;
 800a736:	e020      	b.n	800a77a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fbdf 	bl	800af04 <USBD_StdItfReq>
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]
      break;
 800a74a:	e016      	b.n	800a77a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fc41 	bl	800afdc <USBD_StdEPReq>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]
      break;
 800a75e:	e00c      	b.n	800a77a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a766:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f001 fe7a 	bl	800c468 <USBD_LL_StallEP>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
      break;
 800a778:	bf00      	nop
  }

  return ret;
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	460b      	mov	r3, r1
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a796:	7afb      	ldrb	r3, [r7, #11]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d177      	bne.n	800a88c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a7a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	f040 80a1 	bne.w	800a8f2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	8992      	ldrh	r2, [r2, #12]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d91c      	bls.n	800a7f6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	8992      	ldrh	r2, [r2, #12]
 800a7c4:	1a9a      	subs	r2, r3, r2
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	8992      	ldrh	r2, [r2, #12]
 800a7d2:	441a      	add	r2, r3
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	6919      	ldr	r1, [r3, #16]
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	899b      	ldrh	r3, [r3, #12]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	bf38      	it	cc
 800a7ea:	4613      	movcc	r3, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f001 f9a8 	bl	800bb44 <USBD_CtlContinueRx>
 800a7f4:	e07d      	b.n	800a8f2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7fc:	f003 031f 	and.w	r3, r3, #31
 800a800:	2b02      	cmp	r3, #2
 800a802:	d014      	beq.n	800a82e <USBD_LL_DataOutStage+0xaa>
 800a804:	2b02      	cmp	r3, #2
 800a806:	d81d      	bhi.n	800a844 <USBD_LL_DataOutStage+0xc0>
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <USBD_LL_DataOutStage+0x8e>
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d003      	beq.n	800a818 <USBD_LL_DataOutStage+0x94>
 800a810:	e018      	b.n	800a844 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a812:	2300      	movs	r3, #0
 800a814:	75bb      	strb	r3, [r7, #22]
            break;
 800a816:	e018      	b.n	800a84a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	4619      	mov	r1, r3
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 fa6e 	bl	800ad04 <USBD_CoreFindIF>
 800a828:	4603      	mov	r3, r0
 800a82a:	75bb      	strb	r3, [r7, #22]
            break;
 800a82c:	e00d      	b.n	800a84a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a834:	b2db      	uxtb	r3, r3
 800a836:	4619      	mov	r1, r3
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 fa70 	bl	800ad1e <USBD_CoreFindEP>
 800a83e:	4603      	mov	r3, r0
 800a840:	75bb      	strb	r3, [r7, #22]
            break;
 800a842:	e002      	b.n	800a84a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	75bb      	strb	r3, [r7, #22]
            break;
 800a848:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a84a:	7dbb      	ldrb	r3, [r7, #22]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d119      	bne.n	800a884 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b03      	cmp	r3, #3
 800a85a:	d113      	bne.n	800a884 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a85c:	7dba      	ldrb	r2, [r7, #22]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	32ae      	adds	r2, #174	@ 0xae
 800a862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00b      	beq.n	800a884 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a86c:	7dba      	ldrb	r2, [r7, #22]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a874:	7dba      	ldrb	r2, [r7, #22]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	32ae      	adds	r2, #174	@ 0xae
 800a87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f001 f96e 	bl	800bb66 <USBD_CtlSendStatus>
 800a88a:	e032      	b.n	800a8f2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a892:	b2db      	uxtb	r3, r3
 800a894:	4619      	mov	r1, r3
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 fa41 	bl	800ad1e <USBD_CoreFindEP>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8a0:	7dbb      	ldrb	r3, [r7, #22]
 800a8a2:	2bff      	cmp	r3, #255	@ 0xff
 800a8a4:	d025      	beq.n	800a8f2 <USBD_LL_DataOutStage+0x16e>
 800a8a6:	7dbb      	ldrb	r3, [r7, #22]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d122      	bne.n	800a8f2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d117      	bne.n	800a8e8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8b8:	7dba      	ldrb	r2, [r7, #22]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	32ae      	adds	r2, #174	@ 0xae
 800a8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00f      	beq.n	800a8e8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a8c8:	7dba      	ldrb	r2, [r7, #22]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a8d0:	7dba      	ldrb	r2, [r7, #22]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	32ae      	adds	r2, #174	@ 0xae
 800a8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	7afa      	ldrb	r2, [r7, #11]
 800a8de:	4611      	mov	r1, r2
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	4798      	blx	r3
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a8ee:	7dfb      	ldrb	r3, [r7, #23]
 800a8f0:	e000      	b.n	800a8f4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3718      	adds	r7, #24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	460b      	mov	r3, r1
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a90a:	7afb      	ldrb	r3, [r7, #11]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d178      	bne.n	800aa02 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3314      	adds	r3, #20
 800a914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d163      	bne.n	800a9e8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	8992      	ldrh	r2, [r2, #12]
 800a928:	4293      	cmp	r3, r2
 800a92a:	d91c      	bls.n	800a966 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	693a      	ldr	r2, [r7, #16]
 800a932:	8992      	ldrh	r2, [r2, #12]
 800a934:	1a9a      	subs	r2, r3, r2
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	8992      	ldrh	r2, [r2, #12]
 800a942:	441a      	add	r2, r3
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	6919      	ldr	r1, [r3, #16]
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	461a      	mov	r2, r3
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f001 f8c4 	bl	800bae0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a958:	2300      	movs	r3, #0
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f001 fe2c 	bl	800c5bc <USBD_LL_PrepareReceive>
 800a964:	e040      	b.n	800a9e8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	899b      	ldrh	r3, [r3, #12]
 800a96a:	461a      	mov	r2, r3
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	429a      	cmp	r2, r3
 800a972:	d11c      	bne.n	800a9ae <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d316      	bcc.n	800a9ae <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d20f      	bcs.n	800a9ae <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a98e:	2200      	movs	r2, #0
 800a990:	2100      	movs	r1, #0
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f001 f8a4 	bl	800bae0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f001 fe08 	bl	800c5bc <USBD_LL_PrepareReceive>
 800a9ac:	e01c      	b.n	800a9e8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d10f      	bne.n	800a9da <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d009      	beq.n	800a9da <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9da:	2180      	movs	r1, #128	@ 0x80
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f001 fd43 	bl	800c468 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f001 f8d2 	bl	800bb8c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d03a      	beq.n	800aa68 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f7ff fe30 	bl	800a658 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aa00:	e032      	b.n	800aa68 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aa02:	7afb      	ldrb	r3, [r7, #11]
 800aa04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f000 f986 	bl	800ad1e <USBD_CoreFindEP>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
 800aa18:	2bff      	cmp	r3, #255	@ 0xff
 800aa1a:	d025      	beq.n	800aa68 <USBD_LL_DataInStage+0x16c>
 800aa1c:	7dfb      	ldrb	r3, [r7, #23]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d122      	bne.n	800aa68 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d11c      	bne.n	800aa68 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa2e:	7dfa      	ldrb	r2, [r7, #23]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	32ae      	adds	r2, #174	@ 0xae
 800aa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d014      	beq.n	800aa68 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800aa3e:	7dfa      	ldrb	r2, [r7, #23]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa46:	7dfa      	ldrb	r2, [r7, #23]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	32ae      	adds	r2, #174	@ 0xae
 800aa4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	7afa      	ldrb	r2, [r7, #11]
 800aa54:	4611      	mov	r1, r2
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	4798      	blx	r3
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa5e:	7dbb      	ldrb	r3, [r7, #22]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800aa64:	7dbb      	ldrb	r3, [r7, #22]
 800aa66:	e000      	b.n	800aa6a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d014      	beq.n	800aad8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00e      	beq.n	800aad8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6852      	ldr	r2, [r2, #4]
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	4611      	mov	r1, r2
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aad8:	2340      	movs	r3, #64	@ 0x40
 800aada:	2200      	movs	r2, #0
 800aadc:	2100      	movs	r1, #0
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f001 fc7d 	bl	800c3de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2240      	movs	r2, #64	@ 0x40
 800aaf0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaf4:	2340      	movs	r3, #64	@ 0x40
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2180      	movs	r1, #128	@ 0x80
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 fc6f 	bl	800c3de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2240      	movs	r2, #64	@ 0x40
 800ab0c:	841a      	strh	r2, [r3, #32]

  return ret;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	78fa      	ldrb	r2, [r7, #3]
 800ab28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d006      	beq.n	800ab5a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2204      	movs	r2, #4
 800ab5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr

0800ab70 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b04      	cmp	r3, #4
 800ab82:	d106      	bne.n	800ab92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d110      	bne.n	800abd6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00b      	beq.n	800abd6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32ae      	adds	r2, #174	@ 0xae
 800abf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e01c      	b.n	800ac3c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d115      	bne.n	800ac3a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	32ae      	adds	r2, #174	@ 0xae
 800ac18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00b      	beq.n	800ac3a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	32ae      	adds	r2, #174	@ 0xae
 800ac2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	78fa      	ldrb	r2, [r7, #3]
 800ac34:	4611      	mov	r1, r2
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	32ae      	adds	r2, #174	@ 0xae
 800ac5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e01c      	b.n	800aca0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d115      	bne.n	800ac9e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	32ae      	adds	r2, #174	@ 0xae
 800ac7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00b      	beq.n	800ac9e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	32ae      	adds	r2, #174	@ 0xae
 800ac90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}

0800aca8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00e      	beq.n	800acfa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6852      	ldr	r2, [r2, #4]
 800ace8:	b2d2      	uxtb	r2, r2
 800acea:	4611      	mov	r1, r2
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	4798      	blx	r3
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d001      	beq.n	800acfa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800acf6:	2303      	movs	r3, #3
 800acf8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	885b      	ldrh	r3, [r3, #2]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	7812      	ldrb	r2, [r2, #0]
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d91f      	bls.n	800ad9e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad64:	e013      	b.n	800ad8e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad66:	f107 030a 	add.w	r3, r7, #10
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	6978      	ldr	r0, [r7, #20]
 800ad6e:	f000 f81b 	bl	800ada8 <USBD_GetNextDesc>
 800ad72:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	785b      	ldrb	r3, [r3, #1]
 800ad78:	2b05      	cmp	r3, #5
 800ad7a:	d108      	bne.n	800ad8e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	789b      	ldrb	r3, [r3, #2]
 800ad84:	78fa      	ldrb	r2, [r7, #3]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d008      	beq.n	800ad9c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	885b      	ldrh	r3, [r3, #2]
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	897b      	ldrh	r3, [r7, #10]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d8e5      	bhi.n	800ad66 <USBD_GetEpDesc+0x2e>
 800ad9a:	e000      	b.n	800ad9e <USBD_GetEpDesc+0x66>
          break;
 800ad9c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad9e:	693b      	ldr	r3, [r7, #16]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	881b      	ldrh	r3, [r3, #0]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	7812      	ldrb	r2, [r2, #0]
 800adbe:	4413      	add	r3, r2
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	461a      	mov	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4413      	add	r3, r2
 800add0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800add2:	68fb      	ldr	r3, [r7, #12]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3714      	adds	r7, #20
 800add8:	46bd      	mov	sp, r7
 800adda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adde:	4770      	bx	lr

0800ade0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	3301      	adds	r3, #1
 800adf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800adfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	b21a      	sxth	r2, r3
 800ae06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	b21b      	sxth	r3, r3
 800ae0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae10:	89fb      	ldrh	r3, [r7, #14]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	371c      	adds	r7, #28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae36:	2b40      	cmp	r3, #64	@ 0x40
 800ae38:	d005      	beq.n	800ae46 <USBD_StdDevReq+0x26>
 800ae3a:	2b40      	cmp	r3, #64	@ 0x40
 800ae3c:	d857      	bhi.n	800aeee <USBD_StdDevReq+0xce>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00f      	beq.n	800ae62 <USBD_StdDevReq+0x42>
 800ae42:	2b20      	cmp	r3, #32
 800ae44:	d153      	bne.n	800aeee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	32ae      	adds	r2, #174	@ 0xae
 800ae50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae60:	e04a      	b.n	800aef8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	2b09      	cmp	r3, #9
 800ae68:	d83b      	bhi.n	800aee2 <USBD_StdDevReq+0xc2>
 800ae6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae70 <USBD_StdDevReq+0x50>)
 800ae6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae70:	0800aec5 	.word	0x0800aec5
 800ae74:	0800aed9 	.word	0x0800aed9
 800ae78:	0800aee3 	.word	0x0800aee3
 800ae7c:	0800aecf 	.word	0x0800aecf
 800ae80:	0800aee3 	.word	0x0800aee3
 800ae84:	0800aea3 	.word	0x0800aea3
 800ae88:	0800ae99 	.word	0x0800ae99
 800ae8c:	0800aee3 	.word	0x0800aee3
 800ae90:	0800aebb 	.word	0x0800aebb
 800ae94:	0800aead 	.word	0x0800aead
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa3e 	bl	800b31c <USBD_GetDescriptor>
          break;
 800aea0:	e024      	b.n	800aeec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fba3 	bl	800b5f0 <USBD_SetAddress>
          break;
 800aeaa:	e01f      	b.n	800aeec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fbe2 	bl	800b678 <USBD_SetConfig>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
          break;
 800aeb8:	e018      	b.n	800aeec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fc85 	bl	800b7cc <USBD_GetConfig>
          break;
 800aec2:	e013      	b.n	800aeec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fcb6 	bl	800b838 <USBD_GetStatus>
          break;
 800aecc:	e00e      	b.n	800aeec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fce5 	bl	800b8a0 <USBD_SetFeature>
          break;
 800aed6:	e009      	b.n	800aeec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fd09 	bl	800b8f2 <USBD_ClrFeature>
          break;
 800aee0:	e004      	b.n	800aeec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fd60 	bl	800b9aa <USBD_CtlError>
          break;
 800aeea:	bf00      	nop
      }
      break;
 800aeec:	e004      	b.n	800aef8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fd5a 	bl	800b9aa <USBD_CtlError>
      break;
 800aef6:	bf00      	nop
  }

  return ret;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop

0800af04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af1a:	2b40      	cmp	r3, #64	@ 0x40
 800af1c:	d005      	beq.n	800af2a <USBD_StdItfReq+0x26>
 800af1e:	2b40      	cmp	r3, #64	@ 0x40
 800af20:	d852      	bhi.n	800afc8 <USBD_StdItfReq+0xc4>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <USBD_StdItfReq+0x26>
 800af26:	2b20      	cmp	r3, #32
 800af28:	d14e      	bne.n	800afc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af30:	b2db      	uxtb	r3, r3
 800af32:	3b01      	subs	r3, #1
 800af34:	2b02      	cmp	r3, #2
 800af36:	d840      	bhi.n	800afba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	889b      	ldrh	r3, [r3, #4]
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d836      	bhi.n	800afb0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	889b      	ldrh	r3, [r3, #4]
 800af46:	b2db      	uxtb	r3, r3
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff feda 	bl	800ad04 <USBD_CoreFindIF>
 800af50:	4603      	mov	r3, r0
 800af52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	2bff      	cmp	r3, #255	@ 0xff
 800af58:	d01d      	beq.n	800af96 <USBD_StdItfReq+0x92>
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d11a      	bne.n	800af96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af60:	7bba      	ldrb	r2, [r7, #14]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	32ae      	adds	r2, #174	@ 0xae
 800af66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00f      	beq.n	800af90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af70:	7bba      	ldrb	r2, [r7, #14]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af78:	7bba      	ldrb	r2, [r7, #14]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	32ae      	adds	r2, #174	@ 0xae
 800af7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	4798      	blx	r3
 800af8a:	4603      	mov	r3, r0
 800af8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af8e:	e004      	b.n	800af9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af90:	2303      	movs	r3, #3
 800af92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af94:	e001      	b.n	800af9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af96:	2303      	movs	r3, #3
 800af98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	88db      	ldrh	r3, [r3, #6]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d110      	bne.n	800afc4 <USBD_StdItfReq+0xc0>
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d10d      	bne.n	800afc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fddc 	bl	800bb66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800afae:	e009      	b.n	800afc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fcf9 	bl	800b9aa <USBD_CtlError>
          break;
 800afb8:	e004      	b.n	800afc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fcf4 	bl	800b9aa <USBD_CtlError>
          break;
 800afc2:	e000      	b.n	800afc6 <USBD_StdItfReq+0xc2>
          break;
 800afc4:	bf00      	nop
      }
      break;
 800afc6:	e004      	b.n	800afd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fced 	bl	800b9aa <USBD_CtlError>
      break;
 800afd0:	bf00      	nop
  }

  return ret;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	889b      	ldrh	r3, [r3, #4]
 800afee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aff8:	2b40      	cmp	r3, #64	@ 0x40
 800affa:	d007      	beq.n	800b00c <USBD_StdEPReq+0x30>
 800affc:	2b40      	cmp	r3, #64	@ 0x40
 800affe:	f200 8181 	bhi.w	800b304 <USBD_StdEPReq+0x328>
 800b002:	2b00      	cmp	r3, #0
 800b004:	d02a      	beq.n	800b05c <USBD_StdEPReq+0x80>
 800b006:	2b20      	cmp	r3, #32
 800b008:	f040 817c 	bne.w	800b304 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff fe84 	bl	800ad1e <USBD_CoreFindEP>
 800b016:	4603      	mov	r3, r0
 800b018:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b01a:	7b7b      	ldrb	r3, [r7, #13]
 800b01c:	2bff      	cmp	r3, #255	@ 0xff
 800b01e:	f000 8176 	beq.w	800b30e <USBD_StdEPReq+0x332>
 800b022:	7b7b      	ldrb	r3, [r7, #13]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f040 8172 	bne.w	800b30e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800b02a:	7b7a      	ldrb	r2, [r7, #13]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b032:	7b7a      	ldrb	r2, [r7, #13]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	32ae      	adds	r2, #174	@ 0xae
 800b038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 8165 	beq.w	800b30e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b044:	7b7a      	ldrb	r2, [r7, #13]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	32ae      	adds	r2, #174	@ 0xae
 800b04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
 800b056:	4603      	mov	r3, r0
 800b058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b05a:	e158      	b.n	800b30e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	785b      	ldrb	r3, [r3, #1]
 800b060:	2b03      	cmp	r3, #3
 800b062:	d008      	beq.n	800b076 <USBD_StdEPReq+0x9a>
 800b064:	2b03      	cmp	r3, #3
 800b066:	f300 8147 	bgt.w	800b2f8 <USBD_StdEPReq+0x31c>
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f000 809b 	beq.w	800b1a6 <USBD_StdEPReq+0x1ca>
 800b070:	2b01      	cmp	r3, #1
 800b072:	d03c      	beq.n	800b0ee <USBD_StdEPReq+0x112>
 800b074:	e140      	b.n	800b2f8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d002      	beq.n	800b088 <USBD_StdEPReq+0xac>
 800b082:	2b03      	cmp	r3, #3
 800b084:	d016      	beq.n	800b0b4 <USBD_StdEPReq+0xd8>
 800b086:	e02c      	b.n	800b0e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00d      	beq.n	800b0aa <USBD_StdEPReq+0xce>
 800b08e:	7bbb      	ldrb	r3, [r7, #14]
 800b090:	2b80      	cmp	r3, #128	@ 0x80
 800b092:	d00a      	beq.n	800b0aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b094:	7bbb      	ldrb	r3, [r7, #14]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 f9e5 	bl	800c468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b09e:	2180      	movs	r1, #128	@ 0x80
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 f9e1 	bl	800c468 <USBD_LL_StallEP>
 800b0a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0a8:	e020      	b.n	800b0ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fc7c 	bl	800b9aa <USBD_CtlError>
              break;
 800b0b2:	e01b      	b.n	800b0ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	885b      	ldrh	r3, [r3, #2]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10e      	bne.n	800b0da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00b      	beq.n	800b0da <USBD_StdEPReq+0xfe>
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	2b80      	cmp	r3, #128	@ 0x80
 800b0c6:	d008      	beq.n	800b0da <USBD_StdEPReq+0xfe>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	88db      	ldrh	r3, [r3, #6]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 f9c7 	bl	800c468 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fd43 	bl	800bb66 <USBD_CtlSendStatus>

              break;
 800b0e0:	e004      	b.n	800b0ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fc60 	bl	800b9aa <USBD_CtlError>
              break;
 800b0ea:	bf00      	nop
          }
          break;
 800b0ec:	e109      	b.n	800b302 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b02      	cmp	r3, #2
 800b0f8:	d002      	beq.n	800b100 <USBD_StdEPReq+0x124>
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d016      	beq.n	800b12c <USBD_StdEPReq+0x150>
 800b0fe:	e04b      	b.n	800b198 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b100:	7bbb      	ldrb	r3, [r7, #14]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00d      	beq.n	800b122 <USBD_StdEPReq+0x146>
 800b106:	7bbb      	ldrb	r3, [r7, #14]
 800b108:	2b80      	cmp	r3, #128	@ 0x80
 800b10a:	d00a      	beq.n	800b122 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 f9a9 	bl	800c468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b116:	2180      	movs	r1, #128	@ 0x80
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 f9a5 	bl	800c468 <USBD_LL_StallEP>
 800b11e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b120:	e040      	b.n	800b1a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fc40 	bl	800b9aa <USBD_CtlError>
              break;
 800b12a:	e03b      	b.n	800b1a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	885b      	ldrh	r3, [r3, #2]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d136      	bne.n	800b1a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 f9af 	bl	800c4a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fd0c 	bl	800bb66 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b14e:	7bbb      	ldrb	r3, [r7, #14]
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff fde3 	bl	800ad1e <USBD_CoreFindEP>
 800b158:	4603      	mov	r3, r0
 800b15a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b15c:	7b7b      	ldrb	r3, [r7, #13]
 800b15e:	2bff      	cmp	r3, #255	@ 0xff
 800b160:	d01f      	beq.n	800b1a2 <USBD_StdEPReq+0x1c6>
 800b162:	7b7b      	ldrb	r3, [r7, #13]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d11c      	bne.n	800b1a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b168:	7b7a      	ldrb	r2, [r7, #13]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b170:	7b7a      	ldrb	r2, [r7, #13]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	32ae      	adds	r2, #174	@ 0xae
 800b176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d010      	beq.n	800b1a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b180:	7b7a      	ldrb	r2, [r7, #13]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	32ae      	adds	r2, #174	@ 0xae
 800b186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	4798      	blx	r3
 800b192:	4603      	mov	r3, r0
 800b194:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b196:	e004      	b.n	800b1a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fc05 	bl	800b9aa <USBD_CtlError>
              break;
 800b1a0:	e000      	b.n	800b1a4 <USBD_StdEPReq+0x1c8>
              break;
 800b1a2:	bf00      	nop
          }
          break;
 800b1a4:	e0ad      	b.n	800b302 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d002      	beq.n	800b1b8 <USBD_StdEPReq+0x1dc>
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d033      	beq.n	800b21e <USBD_StdEPReq+0x242>
 800b1b6:	e099      	b.n	800b2ec <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <USBD_StdEPReq+0x1f2>
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	2b80      	cmp	r3, #128	@ 0x80
 800b1c2:	d004      	beq.n	800b1ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fbef 	bl	800b9aa <USBD_CtlError>
                break;
 800b1cc:	e093      	b.n	800b2f6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	da0b      	bge.n	800b1ee <USBD_StdEPReq+0x212>
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	3310      	adds	r3, #16
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	e00b      	b.n	800b206 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	3304      	adds	r3, #4
 800b206:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2200      	movs	r2, #0
 800b20c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	330e      	adds	r3, #14
 800b212:	2202      	movs	r2, #2
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fc44 	bl	800baa4 <USBD_CtlSendData>
              break;
 800b21c:	e06b      	b.n	800b2f6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b21e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b222:	2b00      	cmp	r3, #0
 800b224:	da11      	bge.n	800b24a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	f003 020f 	and.w	r2, r3, #15
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	440b      	add	r3, r1
 800b238:	3323      	adds	r3, #35	@ 0x23
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d117      	bne.n	800b270 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b240:	6839      	ldr	r1, [r7, #0]
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fbb1 	bl	800b9aa <USBD_CtlError>
                  break;
 800b248:	e055      	b.n	800b2f6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	f003 020f 	and.w	r2, r3, #15
 800b250:	6879      	ldr	r1, [r7, #4]
 800b252:	4613      	mov	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	440b      	add	r3, r1
 800b25c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d104      	bne.n	800b270 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fb9e 	bl	800b9aa <USBD_CtlError>
                  break;
 800b26e:	e042      	b.n	800b2f6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b274:	2b00      	cmp	r3, #0
 800b276:	da0b      	bge.n	800b290 <USBD_StdEPReq+0x2b4>
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b27e:	4613      	mov	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	3310      	adds	r3, #16
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	4413      	add	r3, r2
 800b28c:	3304      	adds	r3, #4
 800b28e:	e00b      	b.n	800b2a8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <USBD_StdEPReq+0x2da>
 800b2b0:	7bbb      	ldrb	r3, [r7, #14]
 800b2b2:	2b80      	cmp	r3, #128	@ 0x80
 800b2b4:	d103      	bne.n	800b2be <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	739a      	strb	r2, [r3, #14]
 800b2bc:	e00e      	b.n	800b2dc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 f90e 	bl	800c4e4 <USBD_LL_IsStallEP>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d003      	beq.n	800b2d6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	739a      	strb	r2, [r3, #14]
 800b2d4:	e002      	b.n	800b2dc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	330e      	adds	r3, #14
 800b2e0:	2202      	movs	r2, #2
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fbdd 	bl	800baa4 <USBD_CtlSendData>
              break;
 800b2ea:	e004      	b.n	800b2f6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fb5b 	bl	800b9aa <USBD_CtlError>
              break;
 800b2f4:	bf00      	nop
          }
          break;
 800b2f6:	e004      	b.n	800b302 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fb55 	bl	800b9aa <USBD_CtlError>
          break;
 800b300:	bf00      	nop
      }
      break;
 800b302:	e005      	b.n	800b310 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fb4f 	bl	800b9aa <USBD_CtlError>
      break;
 800b30c:	e000      	b.n	800b310 <USBD_StdEPReq+0x334>
      break;
 800b30e:	bf00      	nop
  }

  return ret;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	885b      	ldrh	r3, [r3, #2]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	2b06      	cmp	r3, #6
 800b33e:	f200 8128 	bhi.w	800b592 <USBD_GetDescriptor+0x276>
 800b342:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <USBD_GetDescriptor+0x2c>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b365 	.word	0x0800b365
 800b34c:	0800b37d 	.word	0x0800b37d
 800b350:	0800b3bd 	.word	0x0800b3bd
 800b354:	0800b593 	.word	0x0800b593
 800b358:	0800b593 	.word	0x0800b593
 800b35c:	0800b533 	.word	0x0800b533
 800b360:	0800b55f 	.word	0x0800b55f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	7c12      	ldrb	r2, [r2, #16]
 800b370:	f107 0108 	add.w	r1, r7, #8
 800b374:	4610      	mov	r0, r2
 800b376:	4798      	blx	r3
 800b378:	60f8      	str	r0, [r7, #12]
      break;
 800b37a:	e112      	b.n	800b5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	7c1b      	ldrb	r3, [r3, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10d      	bne.n	800b3a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f107 0208 	add.w	r2, r7, #8
 800b390:	4610      	mov	r0, r2
 800b392:	4798      	blx	r3
 800b394:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	2202      	movs	r2, #2
 800b39c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b39e:	e100      	b.n	800b5a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a8:	f107 0208 	add.w	r2, r7, #8
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	701a      	strb	r2, [r3, #0]
      break;
 800b3ba:	e0f2      	b.n	800b5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	885b      	ldrh	r3, [r3, #2]
 800b3c0:	b2db      	uxtb	r3, r3
 800b3c2:	2b05      	cmp	r3, #5
 800b3c4:	f200 80ac 	bhi.w	800b520 <USBD_GetDescriptor+0x204>
 800b3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3d0 <USBD_GetDescriptor+0xb4>)
 800b3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ce:	bf00      	nop
 800b3d0:	0800b3e9 	.word	0x0800b3e9
 800b3d4:	0800b41d 	.word	0x0800b41d
 800b3d8:	0800b451 	.word	0x0800b451
 800b3dc:	0800b485 	.word	0x0800b485
 800b3e0:	0800b4b9 	.word	0x0800b4b9
 800b3e4:	0800b4ed 	.word	0x0800b4ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00b      	beq.n	800b40c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	7c12      	ldrb	r2, [r2, #16]
 800b400:	f107 0108 	add.w	r1, r7, #8
 800b404:	4610      	mov	r0, r2
 800b406:	4798      	blx	r3
 800b408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40a:	e091      	b.n	800b530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 facb 	bl	800b9aa <USBD_CtlError>
            err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
          break;
 800b41a:	e089      	b.n	800b530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00b      	beq.n	800b440 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	7c12      	ldrb	r2, [r2, #16]
 800b434:	f107 0108 	add.w	r1, r7, #8
 800b438:	4610      	mov	r0, r2
 800b43a:	4798      	blx	r3
 800b43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b43e:	e077      	b.n	800b530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fab1 	bl	800b9aa <USBD_CtlError>
            err++;
 800b448:	7afb      	ldrb	r3, [r7, #11]
 800b44a:	3301      	adds	r3, #1
 800b44c:	72fb      	strb	r3, [r7, #11]
          break;
 800b44e:	e06f      	b.n	800b530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00b      	beq.n	800b474 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	7c12      	ldrb	r2, [r2, #16]
 800b468:	f107 0108 	add.w	r1, r7, #8
 800b46c:	4610      	mov	r0, r2
 800b46e:	4798      	blx	r3
 800b470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b472:	e05d      	b.n	800b530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b474:	6839      	ldr	r1, [r7, #0]
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 fa97 	bl	800b9aa <USBD_CtlError>
            err++;
 800b47c:	7afb      	ldrb	r3, [r7, #11]
 800b47e:	3301      	adds	r3, #1
 800b480:	72fb      	strb	r3, [r7, #11]
          break;
 800b482:	e055      	b.n	800b530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	7c12      	ldrb	r2, [r2, #16]
 800b49c:	f107 0108 	add.w	r1, r7, #8
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4798      	blx	r3
 800b4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a6:	e043      	b.n	800b530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fa7d 	bl	800b9aa <USBD_CtlError>
            err++;
 800b4b0:	7afb      	ldrb	r3, [r7, #11]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4b6:	e03b      	b.n	800b530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	7c12      	ldrb	r2, [r2, #16]
 800b4d0:	f107 0108 	add.w	r1, r7, #8
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4da:	e029      	b.n	800b530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fa63 	bl	800b9aa <USBD_CtlError>
            err++;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ea:	e021      	b.n	800b530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50e:	e00f      	b.n	800b530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa49 	bl	800b9aa <USBD_CtlError>
            err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
          break;
 800b51e:	e007      	b.n	800b530 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b520:	6839      	ldr	r1, [r7, #0]
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fa41 	bl	800b9aa <USBD_CtlError>
          err++;
 800b528:	7afb      	ldrb	r3, [r7, #11]
 800b52a:	3301      	adds	r3, #1
 800b52c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b52e:	bf00      	nop
      }
      break;
 800b530:	e037      	b.n	800b5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7c1b      	ldrb	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d109      	bne.n	800b54e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b542:	f107 0208 	add.w	r2, r7, #8
 800b546:	4610      	mov	r0, r2
 800b548:	4798      	blx	r3
 800b54a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b54c:	e029      	b.n	800b5a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fa2a 	bl	800b9aa <USBD_CtlError>
        err++;
 800b556:	7afb      	ldrb	r3, [r7, #11]
 800b558:	3301      	adds	r3, #1
 800b55a:	72fb      	strb	r3, [r7, #11]
      break;
 800b55c:	e021      	b.n	800b5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	7c1b      	ldrb	r3, [r3, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10d      	bne.n	800b582 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b56e:	f107 0208 	add.w	r2, r7, #8
 800b572:	4610      	mov	r0, r2
 800b574:	4798      	blx	r3
 800b576:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3301      	adds	r3, #1
 800b57c:	2207      	movs	r2, #7
 800b57e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b580:	e00f      	b.n	800b5a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fa10 	bl	800b9aa <USBD_CtlError>
        err++;
 800b58a:	7afb      	ldrb	r3, [r7, #11]
 800b58c:	3301      	adds	r3, #1
 800b58e:	72fb      	strb	r3, [r7, #11]
      break;
 800b590:	e007      	b.n	800b5a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fa08 	bl	800b9aa <USBD_CtlError>
      err++;
 800b59a:	7afb      	ldrb	r3, [r7, #11]
 800b59c:	3301      	adds	r3, #1
 800b59e:	72fb      	strb	r3, [r7, #11]
      break;
 800b5a0:	bf00      	nop
  }

  if (err != 0U)
 800b5a2:	7afb      	ldrb	r3, [r7, #11]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11e      	bne.n	800b5e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	88db      	ldrh	r3, [r3, #6]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d016      	beq.n	800b5de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b5b0:	893b      	ldrh	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00e      	beq.n	800b5d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	88da      	ldrh	r2, [r3, #6]
 800b5ba:	893b      	ldrh	r3, [r7, #8]
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	bf28      	it	cs
 800b5c0:	4613      	movcs	r3, r2
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5c6:	893b      	ldrh	r3, [r7, #8]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	68f9      	ldr	r1, [r7, #12]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fa69 	bl	800baa4 <USBD_CtlSendData>
 800b5d2:	e009      	b.n	800b5e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f9e7 	bl	800b9aa <USBD_CtlError>
 800b5dc:	e004      	b.n	800b5e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fac1 	bl	800bb66 <USBD_CtlSendStatus>
 800b5e4:	e000      	b.n	800b5e8 <USBD_GetDescriptor+0x2cc>
    return;
 800b5e6:	bf00      	nop
  }
}
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop

0800b5f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	889b      	ldrh	r3, [r3, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d131      	bne.n	800b666 <USBD_SetAddress+0x76>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	88db      	ldrh	r3, [r3, #6]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d12d      	bne.n	800b666 <USBD_SetAddress+0x76>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	885b      	ldrh	r3, [r3, #2]
 800b60e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b610:	d829      	bhi.n	800b666 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	885b      	ldrh	r3, [r3, #2]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b61c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b624:	b2db      	uxtb	r3, r3
 800b626:	2b03      	cmp	r3, #3
 800b628:	d104      	bne.n	800b634 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f9bc 	bl	800b9aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b632:	e01d      	b.n	800b670 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	7bfa      	ldrb	r2, [r7, #15]
 800b638:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 ff7b 	bl	800c53c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa8d 	bl	800bb66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2202      	movs	r2, #2
 800b656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b65a:	e009      	b.n	800b670 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b664:	e004      	b.n	800b670 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f99e 	bl	800b9aa <USBD_CtlError>
  }
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	885b      	ldrh	r3, [r3, #2]
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	4b4e      	ldr	r3, [pc, #312]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b68e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b690:	4b4d      	ldr	r3, [pc, #308]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d905      	bls.n	800b6a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f985 	bl	800b9aa <USBD_CtlError>
    return USBD_FAIL;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e08c      	b.n	800b7be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2b02      	cmp	r3, #2
 800b6ae:	d002      	beq.n	800b6b6 <USBD_SetConfig+0x3e>
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d029      	beq.n	800b708 <USBD_SetConfig+0x90>
 800b6b4:	e075      	b.n	800b7a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6b6:	4b44      	ldr	r3, [pc, #272]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d020      	beq.n	800b700 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6be:	4b42      	ldr	r3, [pc, #264]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6c8:	4b3f      	ldr	r3, [pc, #252]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7fe ffcd 	bl	800a66e <USBD_SetClassConfig>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d008      	beq.n	800b6f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f962 	bl	800b9aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6ee:	e065      	b.n	800b7bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 fa38 	bl	800bb66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2203      	movs	r2, #3
 800b6fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6fe:	e05d      	b.n	800b7bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa30 	bl	800bb66 <USBD_CtlSendStatus>
      break;
 800b706:	e059      	b.n	800b7bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b708:	4b2f      	ldr	r3, [pc, #188]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d112      	bne.n	800b736 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2202      	movs	r2, #2
 800b714:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b718:	4b2b      	ldr	r3, [pc, #172]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b71a:	781b      	ldrb	r3, [r3, #0]
 800b71c:	461a      	mov	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b722:	4b29      	ldr	r3, [pc, #164]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7fe ffbc 	bl	800a6a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 fa19 	bl	800bb66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b734:	e042      	b.n	800b7bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b736:	4b24      	ldr	r3, [pc, #144]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d02a      	beq.n	800b79a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7fe ffaa 	bl	800a6a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b752:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b75c:	4b1a      	ldr	r3, [pc, #104]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7fe ff83 	bl	800a66e <USBD_SetClassConfig>
 800b768:	4603      	mov	r3, r0
 800b76a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00f      	beq.n	800b792 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b772:	6839      	ldr	r1, [r7, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f918 	bl	800b9aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe ff8f 	bl	800a6a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b790:	e014      	b.n	800b7bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f9e7 	bl	800bb66 <USBD_CtlSendStatus>
      break;
 800b798:	e010      	b.n	800b7bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f9e3 	bl	800bb66 <USBD_CtlSendStatus>
      break;
 800b7a0:	e00c      	b.n	800b7bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f900 	bl	800b9aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7aa:	4b07      	ldr	r3, [pc, #28]	@ (800b7c8 <USBD_SetConfig+0x150>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7fe ff78 	bl	800a6a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ba:	bf00      	nop
  }

  return ret;
 800b7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	200009a0 	.word	0x200009a0

0800b7cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	88db      	ldrh	r3, [r3, #6]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d004      	beq.n	800b7e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f8e2 	bl	800b9aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b7e6:	e023      	b.n	800b830 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	dc02      	bgt.n	800b7fa <USBD_GetConfig+0x2e>
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	dc03      	bgt.n	800b800 <USBD_GetConfig+0x34>
 800b7f8:	e015      	b.n	800b826 <USBD_GetConfig+0x5a>
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d00b      	beq.n	800b816 <USBD_GetConfig+0x4a>
 800b7fe:	e012      	b.n	800b826 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3308      	adds	r3, #8
 800b80a:	2201      	movs	r2, #1
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f948 	bl	800baa4 <USBD_CtlSendData>
        break;
 800b814:	e00c      	b.n	800b830 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3304      	adds	r3, #4
 800b81a:	2201      	movs	r2, #1
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f940 	bl	800baa4 <USBD_CtlSendData>
        break;
 800b824:	e004      	b.n	800b830 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f8be 	bl	800b9aa <USBD_CtlError>
        break;
 800b82e:	bf00      	nop
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	3b01      	subs	r3, #1
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d81e      	bhi.n	800b88e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	88db      	ldrh	r3, [r3, #6]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d004      	beq.n	800b862 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b858:	6839      	ldr	r1, [r7, #0]
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f8a5 	bl	800b9aa <USBD_CtlError>
        break;
 800b860:	e01a      	b.n	800b898 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2201      	movs	r2, #1
 800b866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	f043 0202 	orr.w	r2, r3, #2
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	330c      	adds	r3, #12
 800b882:	2202      	movs	r2, #2
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 f90c 	bl	800baa4 <USBD_CtlSendData>
      break;
 800b88c:	e004      	b.n	800b898 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b88e:	6839      	ldr	r1, [r7, #0]
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f88a 	bl	800b9aa <USBD_CtlError>
      break;
 800b896:	bf00      	nop
  }
}
 800b898:	bf00      	nop
 800b89a:	3708      	adds	r7, #8
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	885b      	ldrh	r3, [r3, #2]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d107      	bne.n	800b8c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f953 	bl	800bb66 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8c0:	e013      	b.n	800b8ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	885b      	ldrh	r3, [r3, #2]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d10b      	bne.n	800b8e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	889b      	ldrh	r3, [r3, #4]
 800b8ce:	0a1b      	lsrs	r3, r3, #8
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f943 	bl	800bb66 <USBD_CtlSendStatus>
}
 800b8e0:	e003      	b.n	800b8ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b8e2:	6839      	ldr	r1, [r7, #0]
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f860 	bl	800b9aa <USBD_CtlError>
}
 800b8ea:	bf00      	nop
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b082      	sub	sp, #8
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b902:	b2db      	uxtb	r3, r3
 800b904:	3b01      	subs	r3, #1
 800b906:	2b02      	cmp	r3, #2
 800b908:	d80b      	bhi.n	800b922 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	885b      	ldrh	r3, [r3, #2]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d10c      	bne.n	800b92c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f923 	bl	800bb66 <USBD_CtlSendStatus>
      }
      break;
 800b920:	e004      	b.n	800b92c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f840 	bl	800b9aa <USBD_CtlError>
      break;
 800b92a:	e000      	b.n	800b92e <USBD_ClrFeature+0x3c>
      break;
 800b92c:	bf00      	nop
  }
}
 800b92e:	bf00      	nop
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b084      	sub	sp, #16
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	781a      	ldrb	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3301      	adds	r3, #1
 800b950:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	781a      	ldrb	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	3301      	adds	r3, #1
 800b95e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7ff fa3d 	bl	800ade0 <SWAPBYTE>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3301      	adds	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3301      	adds	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f7ff fa30 	bl	800ade0 <SWAPBYTE>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3301      	adds	r3, #1
 800b98c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f7ff fa23 	bl	800ade0 <SWAPBYTE>
 800b99a:	4603      	mov	r3, r0
 800b99c:	461a      	mov	r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	80da      	strh	r2, [r3, #6]
}
 800b9a2:	bf00      	nop
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9b4:	2180      	movs	r1, #128	@ 0x80
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fd56 	bl	800c468 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9bc:	2100      	movs	r1, #0
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fd52 	bl	800c468 <USBD_LL_StallEP>
}
 800b9c4:	bf00      	nop
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d042      	beq.n	800ba68 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b9e6:	6938      	ldr	r0, [r7, #16]
 800b9e8:	f000 f842 	bl	800ba70 <USBD_GetLen>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9f6:	d808      	bhi.n	800ba0a <USBD_GetString+0x3e>
 800b9f8:	6938      	ldr	r0, [r7, #16]
 800b9fa:	f000 f839 	bl	800ba70 <USBD_GetLen>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	3301      	adds	r3, #1
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	b29a      	uxth	r2, r3
 800ba08:	e001      	b.n	800ba0e <USBD_GetString+0x42>
 800ba0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	68ba      	ldr	r2, [r7, #8]
 800ba16:	4413      	add	r3, r2
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	7812      	ldrb	r2, [r2, #0]
 800ba1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
 800ba20:	3301      	adds	r3, #1
 800ba22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	68ba      	ldr	r2, [r7, #8]
 800ba28:	4413      	add	r3, r2
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	3301      	adds	r3, #1
 800ba32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba34:	e013      	b.n	800ba5e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ba36:	7dfb      	ldrb	r3, [r7, #23]
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	7812      	ldrb	r2, [r2, #0]
 800ba40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	3301      	adds	r3, #1
 800ba46:	613b      	str	r3, [r7, #16]
    idx++;
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	4413      	add	r3, r2
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1e7      	bne.n	800ba36 <USBD_GetString+0x6a>
 800ba66:	e000      	b.n	800ba6a <USBD_GetString+0x9e>
    return;
 800ba68:	bf00      	nop
  }
}
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba80:	e005      	b.n	800ba8e <USBD_GetLen+0x1e>
  {
    len++;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
 800ba84:	3301      	adds	r3, #1
 800ba86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1f5      	bne.n	800ba82 <USBD_GetLen+0x12>
  }

  return len;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2202      	movs	r2, #2
 800bab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	2100      	movs	r1, #0
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 fd52 	bl	800c57a <USBD_LL_Transmit>

  return USBD_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	2100      	movs	r1, #0
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 fd41 	bl	800c57a <USBD_LL_Transmit>

  return USBD_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2203      	movs	r2, #3
 800bb12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	2100      	movs	r1, #0
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 fd41 	bl	800c5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	2100      	movs	r1, #0
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fd30 	bl	800c5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2204      	movs	r2, #4
 800bb72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb76:	2300      	movs	r3, #0
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fcfc 	bl	800c57a <USBD_LL_Transmit>

  return USBD_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2205      	movs	r2, #5
 800bb98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 fd0a 	bl	800c5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	4912      	ldr	r1, [pc, #72]	@ (800bc04 <MX_USB_DEVICE_Init+0x50>)
 800bbbc:	4812      	ldr	r0, [pc, #72]	@ (800bc08 <MX_USB_DEVICE_Init+0x54>)
 800bbbe:	f7fe fcd9 	bl	800a574 <USBD_Init>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbc8:	f7f5 f8a6 	bl	8000d18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bbcc:	490f      	ldr	r1, [pc, #60]	@ (800bc0c <MX_USB_DEVICE_Init+0x58>)
 800bbce:	480e      	ldr	r0, [pc, #56]	@ (800bc08 <MX_USB_DEVICE_Init+0x54>)
 800bbd0:	f7fe fd00 	bl	800a5d4 <USBD_RegisterClass>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbda:	f7f5 f89d 	bl	8000d18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bbde:	490c      	ldr	r1, [pc, #48]	@ (800bc10 <MX_USB_DEVICE_Init+0x5c>)
 800bbe0:	4809      	ldr	r0, [pc, #36]	@ (800bc08 <MX_USB_DEVICE_Init+0x54>)
 800bbe2:	f7fe fbf7 	bl	800a3d4 <USBD_CDC_RegisterInterface>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbec:	f7f5 f894 	bl	8000d18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbf0:	4805      	ldr	r0, [pc, #20]	@ (800bc08 <MX_USB_DEVICE_Init+0x54>)
 800bbf2:	f7fe fd25 	bl	800a640 <USBD_Start>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbfc:	f7f5 f88c 	bl	8000d18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc00:	bf00      	nop
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	200000e4 	.word	0x200000e4
 800bc08:	200009a4 	.word	0x200009a4
 800bc0c:	20000048 	.word	0x20000048
 800bc10:	200000d0 	.word	0x200000d0

0800bc14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4905      	ldr	r1, [pc, #20]	@ (800bc30 <CDC_Init_FS+0x1c>)
 800bc1c:	4805      	ldr	r0, [pc, #20]	@ (800bc34 <CDC_Init_FS+0x20>)
 800bc1e:	f7fe fbf3 	bl	800a408 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc22:	4905      	ldr	r1, [pc, #20]	@ (800bc38 <CDC_Init_FS+0x24>)
 800bc24:	4803      	ldr	r0, [pc, #12]	@ (800bc34 <CDC_Init_FS+0x20>)
 800bc26:	f7fe fc11 	bl	800a44c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20000e80 	.word	0x20000e80
 800bc34:	200009a4 	.word	0x200009a4
 800bc38:	20000c80 	.word	0x20000c80

0800bc3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	6039      	str	r1, [r7, #0]
 800bc56:	71fb      	strb	r3, [r7, #7]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	2b23      	cmp	r3, #35	@ 0x23
 800bc60:	f200 8098 	bhi.w	800bd94 <CDC_Control_FS+0x148>
 800bc64:	a201      	add	r2, pc, #4	@ (adr r2, 800bc6c <CDC_Control_FS+0x20>)
 800bc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6a:	bf00      	nop
 800bc6c:	0800bd95 	.word	0x0800bd95
 800bc70:	0800bd95 	.word	0x0800bd95
 800bc74:	0800bd95 	.word	0x0800bd95
 800bc78:	0800bd95 	.word	0x0800bd95
 800bc7c:	0800bd95 	.word	0x0800bd95
 800bc80:	0800bd95 	.word	0x0800bd95
 800bc84:	0800bd95 	.word	0x0800bd95
 800bc88:	0800bd95 	.word	0x0800bd95
 800bc8c:	0800bd95 	.word	0x0800bd95
 800bc90:	0800bd95 	.word	0x0800bd95
 800bc94:	0800bd95 	.word	0x0800bd95
 800bc98:	0800bd95 	.word	0x0800bd95
 800bc9c:	0800bd95 	.word	0x0800bd95
 800bca0:	0800bd95 	.word	0x0800bd95
 800bca4:	0800bd95 	.word	0x0800bd95
 800bca8:	0800bd95 	.word	0x0800bd95
 800bcac:	0800bd95 	.word	0x0800bd95
 800bcb0:	0800bd95 	.word	0x0800bd95
 800bcb4:	0800bd95 	.word	0x0800bd95
 800bcb8:	0800bd95 	.word	0x0800bd95
 800bcbc:	0800bd95 	.word	0x0800bd95
 800bcc0:	0800bd95 	.word	0x0800bd95
 800bcc4:	0800bd95 	.word	0x0800bd95
 800bcc8:	0800bd95 	.word	0x0800bd95
 800bccc:	0800bd95 	.word	0x0800bd95
 800bcd0:	0800bd95 	.word	0x0800bd95
 800bcd4:	0800bd95 	.word	0x0800bd95
 800bcd8:	0800bd95 	.word	0x0800bd95
 800bcdc:	0800bd95 	.word	0x0800bd95
 800bce0:	0800bd95 	.word	0x0800bd95
 800bce4:	0800bd95 	.word	0x0800bd95
 800bce8:	0800bd95 	.word	0x0800bd95
 800bcec:	0800bcfd 	.word	0x0800bcfd
 800bcf0:	0800bd41 	.word	0x0800bd41
 800bcf4:	0800bd95 	.word	0x0800bd95
 800bcf8:	0800bd95 	.word	0x0800bd95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	461a      	mov	r2, r3
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	021b      	lsls	r3, r3, #8
 800bd0a:	431a      	orrs	r2, r3
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	3302      	adds	r3, #2
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	041b      	lsls	r3, r3, #16
 800bd14:	431a      	orrs	r2, r3
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	3303      	adds	r3, #3
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	061b      	lsls	r3, r3, #24
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	461a      	mov	r2, r3
 800bd22:	4b20      	ldr	r3, [pc, #128]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd24:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	791a      	ldrb	r2, [r3, #4]
 800bd2a:	4b1e      	ldr	r3, [pc, #120]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd2c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	795a      	ldrb	r2, [r3, #5]
 800bd32:	4b1c      	ldr	r3, [pc, #112]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd34:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	799a      	ldrb	r2, [r3, #6]
 800bd3a:	4b1a      	ldr	r3, [pc, #104]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd3c:	719a      	strb	r2, [r3, #6]
    break;
 800bd3e:	e02a      	b.n	800bd96 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800bd40:	4b18      	ldr	r3, [pc, #96]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800bd4a:	4b16      	ldr	r3, [pc, #88]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	0a1a      	lsrs	r2, r3, #8
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	3301      	adds	r3, #1
 800bd54:	b2d2      	uxtb	r2, r2
 800bd56:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800bd58:	4b12      	ldr	r3, [pc, #72]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	0c1a      	lsrs	r2, r3, #16
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	3302      	adds	r3, #2
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800bd66:	4b0f      	ldr	r3, [pc, #60]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	0e1a      	lsrs	r2, r3, #24
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	3303      	adds	r3, #3
 800bd70:	b2d2      	uxtb	r2, r2
 800bd72:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	3304      	adds	r3, #4
 800bd78:	4a0a      	ldr	r2, [pc, #40]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd7a:	7912      	ldrb	r2, [r2, #4]
 800bd7c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	3305      	adds	r3, #5
 800bd82:	4a08      	ldr	r2, [pc, #32]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd84:	7952      	ldrb	r2, [r2, #5]
 800bd86:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3306      	adds	r3, #6
 800bd8c:	4a05      	ldr	r2, [pc, #20]	@ (800bda4 <CDC_Control_FS+0x158>)
 800bd8e:	7992      	ldrb	r2, [r2, #6]
 800bd90:	701a      	strb	r2, [r3, #0]
    break;
 800bd92:	e000      	b.n	800bd96 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd94:	bf00      	nop
  }

  return (USBD_OK);
 800bd96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	370c      	adds	r7, #12
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	200000c8 	.word	0x200000c8

0800bda8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800bdb2:	4b0b      	ldr	r3, [pc, #44]	@ (800bde0 <CDC_Receive_FS+0x38>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d006      	beq.n	800bdc8 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800bdba:	4b09      	ldr	r3, [pc, #36]	@ (800bde0 <CDC_Receive_FS+0x38>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	6812      	ldr	r2, [r2, #0]
 800bdc2:	4611      	mov	r1, r2
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	4806      	ldr	r0, [pc, #24]	@ (800bde4 <CDC_Receive_FS+0x3c>)
 800bdcc:	f7fe fb3e 	bl	800a44c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bdd0:	4804      	ldr	r0, [pc, #16]	@ (800bde4 <CDC_Receive_FS+0x3c>)
 800bdd2:	f7fe fb99 	bl	800a508 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800bdd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20001080 	.word	0x20001080
 800bde4:	200009a4 	.word	0x200009a4

0800bde8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bdf8:	4b0d      	ldr	r3, [pc, #52]	@ (800be30 <CDC_Transmit_FS+0x48>)
 800bdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bdfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e00b      	b.n	800be26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800be0e:	887b      	ldrh	r3, [r7, #2]
 800be10:	461a      	mov	r2, r3
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	4806      	ldr	r0, [pc, #24]	@ (800be30 <CDC_Transmit_FS+0x48>)
 800be16:	f7fe faf7 	bl	800a408 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800be1a:	4805      	ldr	r0, [pc, #20]	@ (800be30 <CDC_Transmit_FS+0x48>)
 800be1c:	f7fe fb34 	bl	800a488 <USBD_CDC_TransmitPacket>
 800be20:	4603      	mov	r3, r0
 800be22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800be24:	7bfb      	ldrb	r3, [r7, #15]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	200009a4 	.word	0x200009a4

0800be34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800be34:	b480      	push	{r7}
 800be36:	b087      	sub	sp, #28
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	4613      	mov	r3, r2
 800be40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800be46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
	...

0800be58 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800be60:	4a04      	ldr	r2, [pc, #16]	@ (800be74 <CDC_Attach_Rx+0x1c>)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6013      	str	r3, [r2, #0]
}
 800be66:	bf00      	nop
 800be68:	370c      	adds	r7, #12
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	20001080 	.word	0x20001080

0800be78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	6039      	str	r1, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	2212      	movs	r2, #18
 800be88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800be8a:	4b03      	ldr	r3, [pc, #12]	@ (800be98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	20000100 	.word	0x20000100

0800be9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2204      	movs	r2, #4
 800beac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800beae:	4b03      	ldr	r3, [pc, #12]	@ (800bebc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr
 800bebc:	20000114 	.word	0x20000114

0800bec0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	4603      	mov	r3, r0
 800bec8:	6039      	str	r1, [r7, #0]
 800beca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d105      	bne.n	800bede <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	4907      	ldr	r1, [pc, #28]	@ (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bed6:	4808      	ldr	r0, [pc, #32]	@ (800bef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bed8:	f7ff fd78 	bl	800b9cc <USBD_GetString>
 800bedc:	e004      	b.n	800bee8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4904      	ldr	r1, [pc, #16]	@ (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bee2:	4805      	ldr	r0, [pc, #20]	@ (800bef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bee4:	f7ff fd72 	bl	800b9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bee8:	4b02      	ldr	r3, [pc, #8]	@ (800bef4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	20001084 	.word	0x20001084
 800bef8:	0800c71c 	.word	0x0800c71c

0800befc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	6039      	str	r1, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf08:	683a      	ldr	r2, [r7, #0]
 800bf0a:	4904      	ldr	r1, [pc, #16]	@ (800bf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf0c:	4804      	ldr	r0, [pc, #16]	@ (800bf20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf0e:	f7ff fd5d 	bl	800b9cc <USBD_GetString>
  return USBD_StrDesc;
 800bf12:	4b02      	ldr	r3, [pc, #8]	@ (800bf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20001084 	.word	0x20001084
 800bf20:	0800c734 	.word	0x0800c734

0800bf24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	6039      	str	r1, [r7, #0]
 800bf2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	221a      	movs	r2, #26
 800bf34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bf36:	f000 f843 	bl	800bfc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bf3a:	4b02      	ldr	r3, [pc, #8]	@ (800bf44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	20000118 	.word	0x20000118

0800bf48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	4603      	mov	r3, r0
 800bf50:	6039      	str	r1, [r7, #0]
 800bf52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bf54:	79fb      	ldrb	r3, [r7, #7]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	4907      	ldr	r1, [pc, #28]	@ (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf5e:	4808      	ldr	r0, [pc, #32]	@ (800bf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf60:	f7ff fd34 	bl	800b9cc <USBD_GetString>
 800bf64:	e004      	b.n	800bf70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	4904      	ldr	r1, [pc, #16]	@ (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bf6a:	4805      	ldr	r0, [pc, #20]	@ (800bf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bf6c:	f7ff fd2e 	bl	800b9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf70:	4b02      	ldr	r3, [pc, #8]	@ (800bf7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20001084 	.word	0x20001084
 800bf80:	0800c748 	.word	0x0800c748

0800bf84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d105      	bne.n	800bfa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	4907      	ldr	r1, [pc, #28]	@ (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bf9a:	4808      	ldr	r0, [pc, #32]	@ (800bfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bf9c:	f7ff fd16 	bl	800b9cc <USBD_GetString>
 800bfa0:	e004      	b.n	800bfac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4904      	ldr	r1, [pc, #16]	@ (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bfa6:	4805      	ldr	r0, [pc, #20]	@ (800bfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bfa8:	f7ff fd10 	bl	800b9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfac:	4b02      	ldr	r3, [pc, #8]	@ (800bfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20001084 	.word	0x20001084
 800bfbc:	0800c754 	.word	0x0800c754

0800bfc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <Get_SerialNum+0x44>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bfcc:	4b0e      	ldr	r3, [pc, #56]	@ (800c008 <Get_SerialNum+0x48>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bfd2:	4b0e      	ldr	r3, [pc, #56]	@ (800c00c <Get_SerialNum+0x4c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4413      	add	r3, r2
 800bfde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d009      	beq.n	800bffa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	4909      	ldr	r1, [pc, #36]	@ (800c010 <Get_SerialNum+0x50>)
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f814 	bl	800c018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bff0:	2204      	movs	r2, #4
 800bff2:	4908      	ldr	r1, [pc, #32]	@ (800c014 <Get_SerialNum+0x54>)
 800bff4:	68b8      	ldr	r0, [r7, #8]
 800bff6:	f000 f80f 	bl	800c018 <IntToUnicode>
  }
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	1fff7a10 	.word	0x1fff7a10
 800c008:	1fff7a14 	.word	0x1fff7a14
 800c00c:	1fff7a18 	.word	0x1fff7a18
 800c010:	2000011a 	.word	0x2000011a
 800c014:	2000012a 	.word	0x2000012a

0800c018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c018:	b480      	push	{r7}
 800c01a:	b087      	sub	sp, #28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
 800c02e:	e027      	b.n	800c080 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	0f1b      	lsrs	r3, r3, #28
 800c034:	2b09      	cmp	r3, #9
 800c036:	d80b      	bhi.n	800c050 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	0f1b      	lsrs	r3, r3, #28
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4619      	mov	r1, r3
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	440b      	add	r3, r1
 800c048:	3230      	adds	r2, #48	@ 0x30
 800c04a:	b2d2      	uxtb	r2, r2
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	e00a      	b.n	800c066 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	0f1b      	lsrs	r3, r3, #28
 800c054:	b2da      	uxtb	r2, r3
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	4619      	mov	r1, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	440b      	add	r3, r1
 800c060:	3237      	adds	r2, #55	@ 0x37
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	3301      	adds	r3, #1
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	4413      	add	r3, r2
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c07a:	7dfb      	ldrb	r3, [r7, #23]
 800c07c:	3301      	adds	r3, #1
 800c07e:	75fb      	strb	r3, [r7, #23]
 800c080:	7dfa      	ldrb	r2, [r7, #23]
 800c082:	79fb      	ldrb	r3, [r7, #7]
 800c084:	429a      	cmp	r2, r3
 800c086:	d3d3      	bcc.n	800c030 <IntToUnicode+0x18>
  }
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	371c      	adds	r7, #28
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
	...

0800c098 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08a      	sub	sp, #40	@ 0x28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0a0:	f107 0314 	add.w	r3, r7, #20
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	605a      	str	r2, [r3, #4]
 800c0aa:	609a      	str	r2, [r3, #8]
 800c0ac:	60da      	str	r2, [r3, #12]
 800c0ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0b8:	d13a      	bne.n	800c130 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	613b      	str	r3, [r7, #16]
 800c0be:	4b1e      	ldr	r3, [pc, #120]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c2:	4a1d      	ldr	r2, [pc, #116]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c0c4:	f043 0301 	orr.w	r3, r3, #1
 800c0c8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	613b      	str	r3, [r7, #16]
 800c0d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c0d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c0da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c0e8:	230a      	movs	r3, #10
 800c0ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c0ec:	f107 0314 	add.w	r3, r7, #20
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4812      	ldr	r0, [pc, #72]	@ (800c13c <HAL_PCD_MspInit+0xa4>)
 800c0f4:	f7f6 feec 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c0fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0fc:	4a0e      	ldr	r2, [pc, #56]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c102:	6353      	str	r3, [r2, #52]	@ 0x34
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
 800c108:	4b0b      	ldr	r3, [pc, #44]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c10a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c10c:	4a0a      	ldr	r2, [pc, #40]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c10e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c112:	6453      	str	r3, [r2, #68]	@ 0x44
 800c114:	4b08      	ldr	r3, [pc, #32]	@ (800c138 <HAL_PCD_MspInit+0xa0>)
 800c116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c120:	2200      	movs	r2, #0
 800c122:	2100      	movs	r1, #0
 800c124:	2043      	movs	r0, #67	@ 0x43
 800c126:	f7f6 faf0 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c12a:	2043      	movs	r0, #67	@ 0x43
 800c12c:	f7f6 fb09 	bl	8002742 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c130:	bf00      	nop
 800c132:	3728      	adds	r7, #40	@ 0x28
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	40023800 	.word	0x40023800
 800c13c:	40020000 	.word	0x40020000

0800c140 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c154:	4619      	mov	r1, r3
 800c156:	4610      	mov	r0, r2
 800c158:	f7fe fabf 	bl	800a6da <USBD_LL_SetupStage>
}
 800c15c:	bf00      	nop
 800c15e:	3708      	adds	r7, #8
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c176:	78fa      	ldrb	r2, [r7, #3]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	4613      	mov	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	78fb      	ldrb	r3, [r7, #3]
 800c18c:	4619      	mov	r1, r3
 800c18e:	f7fe faf9 	bl	800a784 <USBD_LL_DataOutStage>
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c1ac:	78fa      	ldrb	r2, [r7, #3]
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	4413      	add	r3, r2
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	440b      	add	r3, r1
 800c1ba:	3320      	adds	r3, #32
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	78fb      	ldrb	r3, [r7, #3]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7fe fb9b 	bl	800a8fc <USBD_LL_DataInStage>
}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b082      	sub	sp, #8
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe fcdf 	bl	800aba0 <USBD_LL_SOF>
}
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	79db      	ldrb	r3, [r3, #7]
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d001      	beq.n	800c202 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1fe:	f7f4 fd8b 	bl	8000d18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c208:	7bfa      	ldrb	r2, [r7, #15]
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fe fc83 	bl	800ab18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c218:	4618      	mov	r0, r3
 800c21a:	f7fe fc2a 	bl	800aa72 <USBD_LL_Reset>
}
 800c21e:	bf00      	nop
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fc7e 	bl	800ab38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	6812      	ldr	r2, [r2, #0]
 800c24a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c24e:	f043 0301 	orr.w	r3, r3, #1
 800c252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7adb      	ldrb	r3, [r3, #11]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d005      	beq.n	800c268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c25c:	4b04      	ldr	r3, [pc, #16]	@ (800c270 <HAL_PCD_SuspendCallback+0x48>)
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	4a03      	ldr	r2, [pc, #12]	@ (800c270 <HAL_PCD_SuspendCallback+0x48>)
 800c262:	f043 0306 	orr.w	r3, r3, #6
 800c266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	e000ed00 	.word	0xe000ed00

0800c274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c282:	4618      	mov	r0, r3
 800c284:	f7fe fc74 	bl	800ab70 <USBD_LL_Resume>
}
 800c288:	bf00      	nop
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2a2:	78fa      	ldrb	r2, [r7, #3]
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe fccc 	bl	800ac44 <USBD_LL_IsoOUTIncomplete>
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2c6:	78fa      	ldrb	r2, [r7, #3]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe fc88 	bl	800abe0 <USBD_LL_IsoINIncomplete>
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe fcde 	bl	800aca8 <USBD_LL_DevConnected>
}
 800c2ec:	bf00      	nop
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fcdb 	bl	800acbe <USBD_LL_DevDisconnected>
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d13c      	bne.n	800c39a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c320:	4a20      	ldr	r2, [pc, #128]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c32c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c330:	4b1c      	ldr	r3, [pc, #112]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c332:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c338:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c33a:	2204      	movs	r2, #4
 800c33c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c33e:	4b19      	ldr	r3, [pc, #100]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c340:	2202      	movs	r2, #2
 800c342:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c344:	4b17      	ldr	r3, [pc, #92]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c346:	2200      	movs	r2, #0
 800c348:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c34a:	4b16      	ldr	r3, [pc, #88]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c34c:	2202      	movs	r2, #2
 800c34e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c350:	4b14      	ldr	r3, [pc, #80]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c352:	2200      	movs	r2, #0
 800c354:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c356:	4b13      	ldr	r3, [pc, #76]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c358:	2200      	movs	r2, #0
 800c35a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c35c:	4b11      	ldr	r3, [pc, #68]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c35e:	2200      	movs	r2, #0
 800c360:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c362:	4b10      	ldr	r3, [pc, #64]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c364:	2200      	movs	r2, #0
 800c366:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c368:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c36e:	480d      	ldr	r0, [pc, #52]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c370:	f7f9 fd44 	bl	8005dfc <HAL_PCD_Init>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c37a:	f7f4 fccd 	bl	8000d18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c37e:	2180      	movs	r1, #128	@ 0x80
 800c380:	4808      	ldr	r0, [pc, #32]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c382:	f7fa ff70 	bl	8007266 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c386:	2240      	movs	r2, #64	@ 0x40
 800c388:	2100      	movs	r1, #0
 800c38a:	4806      	ldr	r0, [pc, #24]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c38c:	f7fa ff24 	bl	80071d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c390:	2280      	movs	r2, #128	@ 0x80
 800c392:	2101      	movs	r1, #1
 800c394:	4803      	ldr	r0, [pc, #12]	@ (800c3a4 <USBD_LL_Init+0x94>)
 800c396:	f7fa ff1f 	bl	80071d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20001284 	.word	0x20001284

0800c3a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f9 fe2b 	bl	800601a <HAL_PCD_Start>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 f942 	bl	800c654 <USBD_Get_USB_Status>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	4608      	mov	r0, r1
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	70fb      	strb	r3, [r7, #3]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70bb      	strb	r3, [r7, #2]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c406:	78bb      	ldrb	r3, [r7, #2]
 800c408:	883a      	ldrh	r2, [r7, #0]
 800c40a:	78f9      	ldrb	r1, [r7, #3]
 800c40c:	f7fa faff 	bl	8006a0e <HAL_PCD_EP_Open>
 800c410:	4603      	mov	r3, r0
 800c412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f91c 	bl	800c654 <USBD_Get_USB_Status>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c420:	7bbb      	ldrb	r3, [r7, #14]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	460b      	mov	r3, r1
 800c434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c436:	2300      	movs	r3, #0
 800c438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c444:	78fa      	ldrb	r2, [r7, #3]
 800c446:	4611      	mov	r1, r2
 800c448:	4618      	mov	r0, r3
 800c44a:	f7fa fb4a 	bl	8006ae2 <HAL_PCD_EP_Close>
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	4618      	mov	r0, r3
 800c456:	f000 f8fd 	bl	800c654 <USBD_Get_USB_Status>
 800c45a:	4603      	mov	r3, r0
 800c45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	460b      	mov	r3, r1
 800c472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c478:	2300      	movs	r3, #0
 800c47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c482:	78fa      	ldrb	r2, [r7, #3]
 800c484:	4611      	mov	r1, r2
 800c486:	4618      	mov	r0, r3
 800c488:	f7fa fc02 	bl	8006c90 <HAL_PCD_EP_SetStall>
 800c48c:	4603      	mov	r3, r0
 800c48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 f8de 	bl	800c654 <USBD_Get_USB_Status>
 800c498:	4603      	mov	r3, r0
 800c49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4c0:	78fa      	ldrb	r2, [r7, #3]
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fa fc46 	bl	8006d56 <HAL_PCD_EP_ClrStall>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ce:	7bfb      	ldrb	r3, [r7, #15]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 f8bf 	bl	800c654 <USBD_Get_USB_Status>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c4f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	da0b      	bge.n	800c518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	4613      	mov	r3, r2
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	4413      	add	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	440b      	add	r3, r1
 800c512:	3316      	adds	r3, #22
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	e00b      	b.n	800c530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c518:	78fb      	ldrb	r3, [r7, #3]
 800c51a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c51e:	68f9      	ldr	r1, [r7, #12]
 800c520:	4613      	mov	r3, r2
 800c522:	00db      	lsls	r3, r3, #3
 800c524:	4413      	add	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	440b      	add	r3, r1
 800c52a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c556:	78fa      	ldrb	r2, [r7, #3]
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fa fa33 	bl	80069c6 <HAL_PCD_SetAddress>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f874 	bl	800c654 <USBD_Get_USB_Status>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c570:	7bbb      	ldrb	r3, [r7, #14]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b086      	sub	sp, #24
 800c57e:	af00      	add	r7, sp, #0
 800c580:	60f8      	str	r0, [r7, #12]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	603b      	str	r3, [r7, #0]
 800c586:	460b      	mov	r3, r1
 800c588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c598:	7af9      	ldrb	r1, [r7, #11]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	f7fa fb3d 	bl	8006c1c <HAL_PCD_EP_Transmit>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 f853 	bl	800c654 <USBD_Get_USB_Status>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3718      	adds	r7, #24
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	607a      	str	r2, [r7, #4]
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c5da:	7af9      	ldrb	r1, [r7, #11]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	f7fa fac9 	bl	8006b76 <HAL_PCD_EP_Receive>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 f832 	bl	800c654 <USBD_Get_USB_Status>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c5f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b082      	sub	sp, #8
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	460b      	mov	r3, r1
 800c608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c610:	78fa      	ldrb	r2, [r7, #3]
 800c612:	4611      	mov	r1, r2
 800c614:	4618      	mov	r0, r3
 800c616:	f7fa fae9 	bl	8006bec <HAL_PCD_EP_GetRxCount>
 800c61a:	4603      	mov	r3, r0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c62c:	4b03      	ldr	r3, [pc, #12]	@ (800c63c <USBD_static_malloc+0x18>)
}
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	20001768 	.word	0x20001768

0800c640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]

}
 800c648:	bf00      	nop
 800c64a:	370c      	adds	r7, #12
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr

0800c654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	4603      	mov	r3, r0
 800c65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	2b03      	cmp	r3, #3
 800c666:	d817      	bhi.n	800c698 <USBD_Get_USB_Status+0x44>
 800c668:	a201      	add	r2, pc, #4	@ (adr r2, 800c670 <USBD_Get_USB_Status+0x1c>)
 800c66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66e:	bf00      	nop
 800c670:	0800c681 	.word	0x0800c681
 800c674:	0800c687 	.word	0x0800c687
 800c678:	0800c68d 	.word	0x0800c68d
 800c67c:	0800c693 	.word	0x0800c693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	73fb      	strb	r3, [r7, #15]
    break;
 800c684:	e00b      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c686:	2303      	movs	r3, #3
 800c688:	73fb      	strb	r3, [r7, #15]
    break;
 800c68a:	e008      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c68c:	2301      	movs	r3, #1
 800c68e:	73fb      	strb	r3, [r7, #15]
    break;
 800c690:	e005      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c692:	2303      	movs	r3, #3
 800c694:	73fb      	strb	r3, [r7, #15]
    break;
 800c696:	e002      	b.n	800c69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	73fb      	strb	r3, [r7, #15]
    break;
 800c69c:	bf00      	nop
  }
  return usb_status;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <memset>:
 800c6ac:	4402      	add	r2, r0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d100      	bne.n	800c6b6 <memset+0xa>
 800c6b4:	4770      	bx	lr
 800c6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ba:	e7f9      	b.n	800c6b0 <memset+0x4>

0800c6bc <__libc_init_array>:
 800c6bc:	b570      	push	{r4, r5, r6, lr}
 800c6be:	4d0d      	ldr	r5, [pc, #52]	@ (800c6f4 <__libc_init_array+0x38>)
 800c6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c6f8 <__libc_init_array+0x3c>)
 800c6c2:	1b64      	subs	r4, r4, r5
 800c6c4:	10a4      	asrs	r4, r4, #2
 800c6c6:	2600      	movs	r6, #0
 800c6c8:	42a6      	cmp	r6, r4
 800c6ca:	d109      	bne.n	800c6e0 <__libc_init_array+0x24>
 800c6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c6fc <__libc_init_array+0x40>)
 800c6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c700 <__libc_init_array+0x44>)
 800c6d0:	f000 f818 	bl	800c704 <_init>
 800c6d4:	1b64      	subs	r4, r4, r5
 800c6d6:	10a4      	asrs	r4, r4, #2
 800c6d8:	2600      	movs	r6, #0
 800c6da:	42a6      	cmp	r6, r4
 800c6dc:	d105      	bne.n	800c6ea <__libc_init_array+0x2e>
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6e4:	4798      	blx	r3
 800c6e6:	3601      	adds	r6, #1
 800c6e8:	e7ee      	b.n	800c6c8 <__libc_init_array+0xc>
 800c6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ee:	4798      	blx	r3
 800c6f0:	3601      	adds	r6, #1
 800c6f2:	e7f2      	b.n	800c6da <__libc_init_array+0x1e>
 800c6f4:	0800c79c 	.word	0x0800c79c
 800c6f8:	0800c79c 	.word	0x0800c79c
 800c6fc:	0800c79c 	.word	0x0800c79c
 800c700:	0800c7a0 	.word	0x0800c7a0

0800c704 <_init>:
 800c704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c706:	bf00      	nop
 800c708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70a:	bc08      	pop	{r3}
 800c70c:	469e      	mov	lr, r3
 800c70e:	4770      	bx	lr

0800c710 <_fini>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	bf00      	nop
 800c714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c716:	bc08      	pop	{r3}
 800c718:	469e      	mov	lr, r3
 800c71a:	4770      	bx	lr
